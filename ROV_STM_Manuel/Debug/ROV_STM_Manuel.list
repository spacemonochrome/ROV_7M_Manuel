
ROV_STM_Manuel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000606c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08006180  08006180  00007180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006528  08006528  000081e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006528  08006528  00007528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006530  08006530  000081e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006530  08006530  00007530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006534  08006534  00007534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08006538  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001e8  08006720  000081e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08006720  00008488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3d0  00000000  00000000  00008211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dda  00000000  00000000  000145e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  000163c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bb  00000000  00000000  00017038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188be  00000000  00000000  000179f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd1a  00000000  00000000  000302b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7ce  00000000  00000000  0003dfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca799  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  000ca7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ceb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006164 	.word	0x08006164

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08006164 	.word	0x08006164

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <motordegeratama>:

uint8_t RxData[16];
uint8_t TxData[10];

void motordegeratama()
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (dutycycle + MotorValueNow[0]*carpan));
 8000a8c:	4b32      	ldr	r3, [pc, #200]	@ (8000b58 <motordegeratama+0xd0>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b32      	ldr	r3, [pc, #200]	@ (8000b5c <motordegeratama+0xd4>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <motordegeratama+0xd8>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	fb01 f303 	mul.w	r3, r1, r3
 8000aa0:	441a      	add	r2, r3
 8000aa2:	4b30      	ldr	r3, [pc, #192]	@ (8000b64 <motordegeratama+0xdc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, (dutycycle + MotorValueNow[1]*carpan));
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b58 <motordegeratama+0xd0>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <motordegeratama+0xd4>)
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <motordegeratama+0xd8>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	fb01 f303 	mul.w	r3, r1, r3
 8000abc:	441a      	add	r2, r3
 8000abe:	4b29      	ldr	r3, [pc, #164]	@ (8000b64 <motordegeratama+0xdc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, (dutycycle + MotorValueNow[2]*carpan));
 8000ac4:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <motordegeratama+0xd0>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <motordegeratama+0xd4>)
 8000acc:	789b      	ldrb	r3, [r3, #2]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <motordegeratama+0xd8>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	fb01 f303 	mul.w	r3, r1, r3
 8000ad8:	441a      	add	r2, r3
 8000ada:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <motordegeratama+0xdc>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, (dutycycle + MotorValueNow[3]*carpan));
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <motordegeratama+0xd0>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <motordegeratama+0xd4>)
 8000ae8:	78db      	ldrb	r3, [r3, #3]
 8000aea:	4619      	mov	r1, r3
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <motordegeratama+0xd8>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	fb01 f303 	mul.w	r3, r1, r3
 8000af4:	441a      	add	r2, r3
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <motordegeratama+0xdc>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	641a      	str	r2, [r3, #64]	@ 0x40
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (dutycycle + MotorValueNow[4]*carpan));
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <motordegeratama+0xd0>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <motordegeratama+0xd4>)
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	4619      	mov	r1, r3
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <motordegeratama+0xd8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	fb01 f303 	mul.w	r3, r1, r3
 8000b10:	441a      	add	r2, r3
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <motordegeratama+0xe0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, (dutycycle + MotorValueNow[5]*carpan));
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <motordegeratama+0xd0>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <motordegeratama+0xd4>)
 8000b20:	795b      	ldrb	r3, [r3, #5]
 8000b22:	4619      	mov	r1, r3
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <motordegeratama+0xd8>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	fb01 f303 	mul.w	r3, r1, r3
 8000b2c:	441a      	add	r2, r3
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <motordegeratama+0xe0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, (dutycycle + MotorValueNow[6]*carpan));
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <motordegeratama+0xd0>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <motordegeratama+0xd4>)
 8000b3c:	799b      	ldrb	r3, [r3, #6]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <motordegeratama+0xd8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	fb01 f303 	mul.w	r3, r1, r3
 8000b48:	441a      	add	r2, r3
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <motordegeratama+0xe0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	20000010 	.word	0x20000010
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	2000000f 	.word	0x2000000f
 8000b64:	20000204 	.word	0x20000204
 8000b68:	2000024c 	.word	0x2000024c

08000b6c <motor_acma>:

void motor_acma()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b70:	2100      	movs	r1, #0
 8000b72:	480e      	ldr	r0, [pc, #56]	@ (8000bac <motor_acma+0x40>)
 8000b74:	f001 fd4e 	bl	8002614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b78:	2104      	movs	r1, #4
 8000b7a:	480c      	ldr	r0, [pc, #48]	@ (8000bac <motor_acma+0x40>)
 8000b7c:	f001 fd4a 	bl	8002614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b80:	2108      	movs	r1, #8
 8000b82:	480a      	ldr	r0, [pc, #40]	@ (8000bac <motor_acma+0x40>)
 8000b84:	f001 fd46 	bl	8002614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b88:	210c      	movs	r1, #12
 8000b8a:	4808      	ldr	r0, [pc, #32]	@ (8000bac <motor_acma+0x40>)
 8000b8c:	f001 fd42 	bl	8002614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b90:	2100      	movs	r1, #0
 8000b92:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <motor_acma+0x44>)
 8000b94:	f001 fd3e 	bl	8002614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b98:	2104      	movs	r1, #4
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <motor_acma+0x44>)
 8000b9c:	f001 fd3a 	bl	8002614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <motor_acma+0x44>)
 8000ba4:	f001 fd36 	bl	8002614 <HAL_TIM_PWM_Start>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000204 	.word	0x20000204
 8000bb0:	2000024c 	.word	0x2000024c

08000bb4 <motordegerrevalue>:
		HAL_Delay(delaysuresi);
	}
}

void motordegerrevalue()
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
	for(uint8_t x = 0; x < sizeof(MotorValueNow); x++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	e029      	b.n	8000c14 <motordegerrevalue+0x60>
	{
		if(MotorValueNow[x] == MotorValueReceive[x])
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4a19      	ldr	r2, [pc, #100]	@ (8000c28 <motordegerrevalue+0x74>)
 8000bc4:	5cd2      	ldrb	r2, [r2, r3]
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4918      	ldr	r1, [pc, #96]	@ (8000c2c <motordegerrevalue+0x78>)
 8000bca:	5ccb      	ldrb	r3, [r1, r3]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d01e      	beq.n	8000c0e <motordegerrevalue+0x5a>
		{

		}
		else if(MotorValueNow[x] > MotorValueReceive[x])
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4a15      	ldr	r2, [pc, #84]	@ (8000c28 <motordegerrevalue+0x74>)
 8000bd4:	5cd2      	ldrb	r2, [r2, r3]
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4914      	ldr	r1, [pc, #80]	@ (8000c2c <motordegerrevalue+0x78>)
 8000bda:	5ccb      	ldrb	r3, [r1, r3]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d907      	bls.n	8000bf0 <motordegerrevalue+0x3c>
		{
			MotorValueNow[x]--;
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4a11      	ldr	r2, [pc, #68]	@ (8000c28 <motordegerrevalue+0x74>)
 8000be4:	5cd2      	ldrb	r2, [r2, r3]
 8000be6:	3a01      	subs	r2, #1
 8000be8:	b2d1      	uxtb	r1, r2
 8000bea:	4a0f      	ldr	r2, [pc, #60]	@ (8000c28 <motordegerrevalue+0x74>)
 8000bec:	54d1      	strb	r1, [r2, r3]
 8000bee:	e00e      	b.n	8000c0e <motordegerrevalue+0x5a>
		}
		else if(MotorValueNow[x] < MotorValueReceive[x])
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <motordegerrevalue+0x74>)
 8000bf4:	5cd2      	ldrb	r2, [r2, r3]
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <motordegerrevalue+0x78>)
 8000bfa:	5ccb      	ldrb	r3, [r1, r3]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d206      	bcs.n	8000c0e <motordegerrevalue+0x5a>
		{
			MotorValueNow[x]++;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <motordegerrevalue+0x74>)
 8000c04:	5cd2      	ldrb	r2, [r2, r3]
 8000c06:	3201      	adds	r2, #1
 8000c08:	b2d1      	uxtb	r1, r2
 8000c0a:	4a07      	ldr	r2, [pc, #28]	@ (8000c28 <motordegerrevalue+0x74>)
 8000c0c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t x = 0; x < sizeof(MotorValueNow); x++)
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	3301      	adds	r3, #1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d9d2      	bls.n	8000bc0 <motordegerrevalue+0xc>
		}
	}
	//HAL_Delay(delaysuresi);
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f000 fd06 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f854 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 f9e4 	bl	8001008 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c40:	f000 f896 	bl	8000d70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c44:	f000 f92a 	bl	8000e9c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000c48:	f000 f9b4 	bl	8000fb4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c52:	481f      	ldr	r0, [pc, #124]	@ (8000cd0 <main+0xa0>)
 8000c54:	f000 ff8c 	bl	8001b70 <HAL_GPIO_WritePin>
  motor_acma();
 8000c58:	f7ff ff88 	bl	8000b6c <motor_acma>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Receive(&huart3, RxData, sizeof(RxData), 100);
	  if (HAL_UART_Receive(&huart3, RxData, sizeof(RxData), 100) == HAL_OK)
 8000c5c:	2364      	movs	r3, #100	@ 0x64
 8000c5e:	2210      	movs	r2, #16
 8000c60:	491c      	ldr	r1, [pc, #112]	@ (8000cd4 <main+0xa4>)
 8000c62:	481d      	ldr	r0, [pc, #116]	@ (8000cd8 <main+0xa8>)
 8000c64:	f002 fc11 	bl	800348a <HAL_UART_Receive>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d129      	bne.n	8000cc2 <main+0x92>
	  {
		  if (RxData[7] == 95 && RxData[15] == 95)
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <main+0xa4>)
 8000c70:	79db      	ldrb	r3, [r3, #7]
 8000c72:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c74:	d114      	bne.n	8000ca0 <main+0x70>
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <main+0xa4>)
 8000c78:	7bdb      	ldrb	r3, [r3, #15]
 8000c7a:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c7c:	d110      	bne.n	8000ca0 <main+0x70>
		  {
			  memcpy(MotorValueReceive, RxData, sizeof(MotorValueReceive));
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <main+0xac>)
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <main+0xa4>)
 8000c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c86:	6018      	str	r0, [r3, #0]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	8019      	strh	r1, [r3, #0]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	0c0a      	lsrs	r2, r1, #16
 8000c90:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c98:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <main+0xa0>)
 8000c9a:	f000 ff69 	bl	8001b70 <HAL_GPIO_WritePin>
 8000c9e:	e00b      	b.n	8000cb8 <main+0x88>

		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ca6:	480a      	ldr	r0, [pc, #40]	@ (8000cd0 <main+0xa0>)
 8000ca8:	f000 ff62 	bl	8001b70 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart3, (uint8_t*)"**********", sizeof(TxData), 50);
 8000cac:	2332      	movs	r3, #50	@ 0x32
 8000cae:	220a      	movs	r2, #10
 8000cb0:	490b      	ldr	r1, [pc, #44]	@ (8000ce0 <main+0xb0>)
 8000cb2:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <main+0xa8>)
 8000cb4:	f002 fb5e 	bl	8003374 <HAL_UART_Transmit>
		  }
		  motordegerrevalue();
 8000cb8:	f7ff ff7c 	bl	8000bb4 <motordegerrevalue>
		  motordegeratama();
 8000cbc:	f7ff fee4 	bl	8000a88 <motordegeratama>
 8000cc0:	e7cc      	b.n	8000c5c <main+0x2c>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc8:	4801      	ldr	r0, [pc, #4]	@ (8000cd0 <main+0xa0>)
 8000cca:	f000 ff51 	bl	8001b70 <HAL_GPIO_WritePin>
	  if (HAL_UART_Receive(&huart3, RxData, sizeof(RxData), 100) == HAL_OK)
 8000cce:	e7c5      	b.n	8000c5c <main+0x2c>
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	200002dc 	.word	0x200002dc
 8000cd8:	20000294 	.word	0x20000294
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	08006180 	.word	0x08006180

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b090      	sub	sp, #64	@ 0x40
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	2228      	movs	r2, #40	@ 0x28
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fb0b 	bl	800430e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d14:	2301      	movs	r3, #1
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d22:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 ff37 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d38:	f000 f9d0 	bl	80010dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d40:	2302      	movs	r3, #2
 8000d42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2102      	movs	r1, #2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 f9a4 	bl	80020a4 <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d62:	f000 f9bb 	bl	80010dc <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3740      	adds	r7, #64	@ 0x40
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	@ 0x38
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 0320 	add.w	r3, r7, #32
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da0:	4b3d      	ldr	r3, [pc, #244]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000da2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8000da8:	4b3b      	ldr	r3, [pc, #236]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000daa:	2240      	movs	r2, #64	@ 0x40
 8000dac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b3a      	ldr	r3, [pc, #232]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000db4:	4b38      	ldr	r3, [pc, #224]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000db6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000dba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b35      	ldr	r3, [pc, #212]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc8:	4833      	ldr	r0, [pc, #204]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000dca:	f001 fb29 	bl	8002420 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000dd4:	f000 f982 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000de2:	4619      	mov	r1, r3
 8000de4:	482c      	ldr	r0, [pc, #176]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000de6:	f001 fe69 	bl	8002abc <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000df0:	f000 f974 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000df4:	4828      	ldr	r0, [pc, #160]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000df6:	f001 fbb5 	bl	8002564 <HAL_TIM_PWM_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e00:	f000 f96c 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4619      	mov	r1, r3
 8000e12:	4821      	ldr	r0, [pc, #132]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000e14:	f002 f9ee 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e1e:	f000 f95d 	bl	80010dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e22:	2360      	movs	r3, #96	@ 0x60
 8000e24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4817      	ldr	r0, [pc, #92]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000e3a:	f001 fd7d 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e44:	f000 f94a 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000e50:	f001 fd72 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000e5a:	f000 f93f 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2208      	movs	r2, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000e66:	f001 fd67 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000e70:	f000 f934 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	220c      	movs	r2, #12
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4807      	ldr	r0, [pc, #28]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000e7c:	f001 fd5c 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000e86:	f000 f929 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e8a:	4803      	ldr	r0, [pc, #12]	@ (8000e98 <MX_TIM2_Init+0x128>)
 8000e8c:	f000 f98e 	bl	80011ac <HAL_TIM_MspPostInit>

}
 8000e90:	bf00      	nop
 8000e92:	3738      	adds	r7, #56	@ 0x38
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000204 	.word	0x20000204

08000e9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	@ 0x38
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ecc:	4b37      	ldr	r3, [pc, #220]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000ece:	4a38      	ldr	r2, [pc, #224]	@ (8000fb0 <MX_TIM3_Init+0x114>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000ed2:	4b36      	ldr	r3, [pc, #216]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000ed4:	2240      	movs	r2, #64	@ 0x40
 8000ed6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b34      	ldr	r3, [pc, #208]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000ede:	4b33      	ldr	r3, [pc, #204]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000ee0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000ee4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ef2:	482e      	ldr	r0, [pc, #184]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000ef4:	f001 fa94 	bl	8002420 <HAL_TIM_Base_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000efe:	f000 f8ed 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4827      	ldr	r0, [pc, #156]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000f10:	f001 fdd4 	bl	8002abc <HAL_TIM_ConfigClockSource>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f1a:	f000 f8df 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f1e:	4823      	ldr	r0, [pc, #140]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000f20:	f001 fb20 	bl	8002564 <HAL_TIM_PWM_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f2a:	f000 f8d7 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481b      	ldr	r0, [pc, #108]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000f3e:	f002 f959 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f48:	f000 f8c8 	bl	80010dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4c:	2360      	movs	r3, #96	@ 0x60
 8000f4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4812      	ldr	r0, [pc, #72]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000f64:	f001 fce8 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f6e:	f000 f8b5 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2204      	movs	r2, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000f7a:	f001 fcdd 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f84:	f000 f8aa 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4807      	ldr	r0, [pc, #28]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000f90:	f001 fcd2 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000f9a:	f000 f89f 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f9e:	4803      	ldr	r0, [pc, #12]	@ (8000fac <MX_TIM3_Init+0x110>)
 8000fa0:	f000 f904 	bl	80011ac <HAL_TIM_MspPostInit>

}
 8000fa4:	bf00      	nop
 8000fa6:	3738      	adds	r7, #56	@ 0x38
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000024c 	.word	0x2000024c
 8000fb0:	40000400 	.word	0x40000400

08000fb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <MX_USART3_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fec:	f002 f972 	bl	80032d4 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f000 f871 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000294 	.word	0x20000294
 8001004:	40004800 	.word	0x40004800

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a23      	ldr	r2, [pc, #140]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 8001022:	f043 0310 	orr.w	r3, r3, #16
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001034:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0320 	and.w	r3, r3, #32
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a17      	ldr	r2, [pc, #92]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a11      	ldr	r2, [pc, #68]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_GPIO_Init+0xa8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001082:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <MX_GPIO_Init+0xac>)
 8001084:	f000 fd74 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2302      	movs	r3, #2
 8001098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <MX_GPIO_Init+0xac>)
 80010a2:	f000 fbe1 	bl	8001868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40011000 	.word	0x40011000

080010b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ca:	f000 fad1 	bl	8001670 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40012c00 	.word	0x40012c00

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <Error_Handler+0x8>

080010e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_MspInit+0x5c>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a14      	ldr	r2, [pc, #80]	@ (8001144 <HAL_MspInit+0x5c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_MspInit+0x5c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <HAL_MspInit+0x5c>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <HAL_MspInit+0x5c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_MspInit+0x5c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_MspInit+0x60>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_MspInit+0x60>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000

0800114c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800115c:	d10c      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_TIM_Base_MspInit+0x58>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <HAL_TIM_Base_MspInit+0x58>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_TIM_Base_MspInit+0x58>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001176:	e010      	b.n	800119a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_TIM_Base_MspInit+0x5c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10b      	bne.n	800119a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_TIM_Base_MspInit+0x58>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_TIM_Base_MspInit+0x58>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_TIM_Base_MspInit+0x58>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40000400 	.word	0x40000400

080011ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011ca:	d118      	bne.n	80011fe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <HAL_TIM_MspPostInit+0xc4>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a27      	ldr	r2, [pc, #156]	@ (8001270 <HAL_TIM_MspPostInit+0xc4>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <HAL_TIM_MspPostInit+0xc4>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011e4:	230f      	movs	r3, #15
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2302      	movs	r3, #2
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	4619      	mov	r1, r3
 80011f6:	481f      	ldr	r0, [pc, #124]	@ (8001274 <HAL_TIM_MspPostInit+0xc8>)
 80011f8:	f000 fb36 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011fc:	e034      	b.n	8001268 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1d      	ldr	r2, [pc, #116]	@ (8001278 <HAL_TIM_MspPostInit+0xcc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d12f      	bne.n	8001268 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <HAL_TIM_MspPostInit+0xc4>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a18      	ldr	r2, [pc, #96]	@ (8001270 <HAL_TIM_MspPostInit+0xc4>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <HAL_TIM_MspPostInit+0xc4>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <HAL_TIM_MspPostInit+0xc4>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <HAL_TIM_MspPostInit+0xc4>)
 8001226:	f043 0308 	orr.w	r3, r3, #8
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <HAL_TIM_MspPostInit+0xc4>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001238:	23c0      	movs	r3, #192	@ 0xc0
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2302      	movs	r3, #2
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4619      	mov	r1, r3
 800124a:	480a      	ldr	r0, [pc, #40]	@ (8001274 <HAL_TIM_MspPostInit+0xc8>)
 800124c:	f000 fb0c 	bl	8001868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2302      	movs	r3, #2
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <HAL_TIM_MspPostInit+0xd0>)
 8001264:	f000 fb00 	bl	8001868 <HAL_GPIO_Init>
}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	40010800 	.word	0x40010800
 8001278:	40000400 	.word	0x40000400
 800127c:	40010c00 	.word	0x40010c00

08001280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <HAL_UART_MspInit+0x8c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d131      	bne.n	8001304 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <HAL_UART_MspInit+0x90>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001310 <HAL_UART_MspInit+0x90>)
 80012a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012aa:	61d3      	str	r3, [r2, #28]
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <HAL_UART_MspInit+0x90>)
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_UART_MspInit+0x90>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <HAL_UART_MspInit+0x90>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_UART_MspInit+0x90>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4619      	mov	r1, r3
 80012e4:	480b      	ldr	r0, [pc, #44]	@ (8001314 <HAL_UART_MspInit+0x94>)
 80012e6:	f000 fabf 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	4619      	mov	r1, r3
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <HAL_UART_MspInit+0x94>)
 8001300:	f000 fab2 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40004800 	.word	0x40004800
 8001310:	40021000 	.word	0x40021000
 8001314:	40010c00 	.word	0x40010c00

08001318 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800132e:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <HAL_InitTick+0xd0>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a2d      	ldr	r2, [pc, #180]	@ (80013e8 <HAL_InitTick+0xd0>)
 8001334:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001338:	6193      	str	r3, [r2, #24]
 800133a:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <HAL_InitTick+0xd0>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001346:	f107 020c 	add.w	r2, r7, #12
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f001 f817 	bl	8002384 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001356:	f001 f801 	bl	800235c <HAL_RCC_GetPCLK2Freq>
 800135a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <HAL_InitTick+0xd4>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	0c9b      	lsrs	r3, r3, #18
 8001366:	3b01      	subs	r3, #1
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800136a:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <HAL_InitTick+0xd8>)
 800136c:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <HAL_InitTick+0xdc>)
 800136e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001370:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <HAL_InitTick+0xd8>)
 8001372:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001376:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001378:	4a1d      	ldr	r2, [pc, #116]	@ (80013f0 <HAL_InitTick+0xd8>)
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <HAL_InitTick+0xd8>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <HAL_InitTick+0xd8>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_InitTick+0xd8>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001390:	4817      	ldr	r0, [pc, #92]	@ (80013f0 <HAL_InitTick+0xd8>)
 8001392:	f001 f845 	bl	8002420 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800139c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11b      	bne.n	80013dc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013a4:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <HAL_InitTick+0xd8>)
 80013a6:	f001 f88b 	bl	80024c0 <HAL_TIM_Base_Start_IT>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80013b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d111      	bne.n	80013dc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013b8:	2019      	movs	r0, #25
 80013ba:	f000 fa46 	bl	800184a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d808      	bhi.n	80013d6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	2019      	movs	r0, #25
 80013ca:	f000 fa22 	bl	8001812 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <HAL_InitTick+0xe0>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e002      	b.n	80013dc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3730      	adds	r7, #48	@ 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	200002ec 	.word	0x200002ec
 80013f4:	40012c00 	.word	0x40012c00
 80013f8:	20000018 	.word	0x20000018

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <NMI_Handler+0x4>

08001404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <MemManage_Handler+0x4>

08001414 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <UsageFault_Handler+0x4>

08001424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <TIM1_UP_IRQHandler+0x10>)
 800145a:	f001 f97d 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200002ec 	.word	0x200002ec

08001468 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return 1;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <_kill>:

int _kill(int pid, int sig)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001480:	f002 ff98 	bl	80043b4 <__errno>
 8001484:	4603      	mov	r3, r0
 8001486:	2216      	movs	r2, #22
 8001488:	601a      	str	r2, [r3, #0]
  return -1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_exit>:

void _exit (int status)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800149e:	f04f 31ff 	mov.w	r1, #4294967295
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffe7 	bl	8001476 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <_exit+0x12>

080014ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e00a      	b.n	80014d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014be:	f3af 8000 	nop.w
 80014c2:	4601      	mov	r1, r0
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60ba      	str	r2, [r7, #8]
 80014ca:	b2ca      	uxtb	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbf0      	blt.n	80014be <_read+0x12>
  }

  return len;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e009      	b.n	800150c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf1      	blt.n	80014f8 <_write+0x12>
  }
  return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_close>:

int _close(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001544:	605a      	str	r2, [r3, #4]
  return 0;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
	...

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d207      	bcs.n	80015c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b0:	f002 ff00 	bl	80043b4 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e009      	b.n	80015d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a05      	ldr	r2, [pc, #20]	@ (80015e4 <_sbrk+0x64>)
 80015d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20005000 	.word	0x20005000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	20000334 	.word	0x20000334
 80015e8:	20000488 	.word	0x20000488

080015ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f8:	f7ff fff8 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480b      	ldr	r0, [pc, #44]	@ (800162c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015fe:	490c      	ldr	r1, [pc, #48]	@ (8001630 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001600:	4a0c      	ldr	r2, [pc, #48]	@ (8001634 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a09      	ldr	r2, [pc, #36]	@ (8001638 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001614:	4c09      	ldr	r4, [pc, #36]	@ (800163c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f002 fecd 	bl	80043c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001626:	f7ff fb03 	bl	8000c30 <main>
  bx lr
 800162a:	4770      	bx	lr
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001634:	08006538 	.word	0x08006538
  ldr r2, =_sbss
 8001638:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800163c:	20000488 	.word	0x20000488

08001640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC1_2_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_Init+0x28>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	@ (800166c <HAL_Init+0x28>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f8d1 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	200f      	movs	r0, #15
 800165c:	f7ff fe5c 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fd42 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000

08001670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <HAL_IncTick+0x1c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_IncTick+0x20>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a03      	ldr	r2, [pc, #12]	@ (8001690 <HAL_IncTick+0x20>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	2000001c 	.word	0x2000001c
 8001690:	20000338 	.word	0x20000338

08001694 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b02      	ldr	r3, [pc, #8]	@ (80016a4 <HAL_GetTick+0x10>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000338 	.word	0x20000338

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4906      	ldr	r1, [pc, #24]	@ (8001740 <__NVIC_EnableIRQ+0x34>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	@ (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	@ (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff4f 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff64 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ffb2 	bl	8001798 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff81 	bl	8001744 <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff57 	bl	800170c <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b08b      	sub	sp, #44	@ 0x2c
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e169      	b.n	8001b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800187c:	2201      	movs	r2, #1
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 8158 	bne.w	8001b4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a9a      	ldr	r2, [pc, #616]	@ (8001b08 <HAL_GPIO_Init+0x2a0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d05e      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018a4:	4a98      	ldr	r2, [pc, #608]	@ (8001b08 <HAL_GPIO_Init+0x2a0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d875      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018aa:	4a98      	ldr	r2, [pc, #608]	@ (8001b0c <HAL_GPIO_Init+0x2a4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d058      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018b0:	4a96      	ldr	r2, [pc, #600]	@ (8001b0c <HAL_GPIO_Init+0x2a4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d86f      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018b6:	4a96      	ldr	r2, [pc, #600]	@ (8001b10 <HAL_GPIO_Init+0x2a8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d052      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018bc:	4a94      	ldr	r2, [pc, #592]	@ (8001b10 <HAL_GPIO_Init+0x2a8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d869      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018c2:	4a94      	ldr	r2, [pc, #592]	@ (8001b14 <HAL_GPIO_Init+0x2ac>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d04c      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018c8:	4a92      	ldr	r2, [pc, #584]	@ (8001b14 <HAL_GPIO_Init+0x2ac>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d863      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018ce:	4a92      	ldr	r2, [pc, #584]	@ (8001b18 <HAL_GPIO_Init+0x2b0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d046      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018d4:	4a90      	ldr	r2, [pc, #576]	@ (8001b18 <HAL_GPIO_Init+0x2b0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d85d      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018da:	2b12      	cmp	r3, #18
 80018dc:	d82a      	bhi.n	8001934 <HAL_GPIO_Init+0xcc>
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d859      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018e2:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <HAL_GPIO_Init+0x80>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	08001963 	.word	0x08001963
 80018ec:	0800193d 	.word	0x0800193d
 80018f0:	0800194f 	.word	0x0800194f
 80018f4:	08001991 	.word	0x08001991
 80018f8:	08001997 	.word	0x08001997
 80018fc:	08001997 	.word	0x08001997
 8001900:	08001997 	.word	0x08001997
 8001904:	08001997 	.word	0x08001997
 8001908:	08001997 	.word	0x08001997
 800190c:	08001997 	.word	0x08001997
 8001910:	08001997 	.word	0x08001997
 8001914:	08001997 	.word	0x08001997
 8001918:	08001997 	.word	0x08001997
 800191c:	08001997 	.word	0x08001997
 8001920:	08001997 	.word	0x08001997
 8001924:	08001997 	.word	0x08001997
 8001928:	08001997 	.word	0x08001997
 800192c:	08001945 	.word	0x08001945
 8001930:	08001959 	.word	0x08001959
 8001934:	4a79      	ldr	r2, [pc, #484]	@ (8001b1c <HAL_GPIO_Init+0x2b4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800193a:	e02c      	b.n	8001996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e029      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	3304      	adds	r3, #4
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e024      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	3308      	adds	r3, #8
 8001954:	623b      	str	r3, [r7, #32]
          break;
 8001956:	e01f      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	330c      	adds	r3, #12
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e01a      	b.n	8001998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800196a:	2304      	movs	r3, #4
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e013      	b.n	8001998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001978:	2308      	movs	r3, #8
 800197a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	611a      	str	r2, [r3, #16]
          break;
 8001982:	e009      	b.n	8001998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	615a      	str	r2, [r3, #20]
          break;
 800198e:	e003      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x130>
          break;
 8001996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2bff      	cmp	r3, #255	@ 0xff
 800199c:	d801      	bhi.n	80019a2 <HAL_GPIO_Init+0x13a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	e001      	b.n	80019a6 <HAL_GPIO_Init+0x13e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3304      	adds	r3, #4
 80019a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2bff      	cmp	r3, #255	@ 0xff
 80019ac:	d802      	bhi.n	80019b4 <HAL_GPIO_Init+0x14c>
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x152>
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	3b08      	subs	r3, #8
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	210f      	movs	r1, #15
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	6a39      	ldr	r1, [r7, #32]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80b1 	beq.w	8001b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001b20 <HAL_GPIO_Init+0x2b8>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001b20 <HAL_GPIO_Init+0x2b8>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001b20 <HAL_GPIO_Init+0x2b8>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a00:	4a48      	ldr	r2, [pc, #288]	@ (8001b24 <HAL_GPIO_Init+0x2bc>)
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a40      	ldr	r2, [pc, #256]	@ (8001b28 <HAL_GPIO_Init+0x2c0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d013      	beq.n	8001a54 <HAL_GPIO_Init+0x1ec>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b2c <HAL_GPIO_Init+0x2c4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00d      	beq.n	8001a50 <HAL_GPIO_Init+0x1e8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a3e      	ldr	r2, [pc, #248]	@ (8001b30 <HAL_GPIO_Init+0x2c8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d007      	beq.n	8001a4c <HAL_GPIO_Init+0x1e4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b34 <HAL_GPIO_Init+0x2cc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_GPIO_Init+0x1e0>
 8001a44:	2303      	movs	r3, #3
 8001a46:	e006      	b.n	8001a56 <HAL_GPIO_Init+0x1ee>
 8001a48:	2304      	movs	r3, #4
 8001a4a:	e004      	b.n	8001a56 <HAL_GPIO_Init+0x1ee>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x1ee>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_GPIO_Init+0x1ee>
 8001a54:	2300      	movs	r3, #0
 8001a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	4093      	lsls	r3, r2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a66:	492f      	ldr	r1, [pc, #188]	@ (8001b24 <HAL_GPIO_Init+0x2bc>)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a80:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	492c      	ldr	r1, [pc, #176]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4928      	ldr	r1, [pc, #160]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa8:	4b23      	ldr	r3, [pc, #140]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	4922      	ldr	r1, [pc, #136]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab6:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	491e      	ldr	r1, [pc, #120]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4918      	ldr	r1, [pc, #96]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ade:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4914      	ldr	r1, [pc, #80]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d021      	beq.n	8001b3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	490e      	ldr	r1, [pc, #56]	@ (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e021      	b.n	8001b4a <HAL_GPIO_Init+0x2e2>
 8001b06:	bf00      	nop
 8001b08:	10320000 	.word	0x10320000
 8001b0c:	10310000 	.word	0x10310000
 8001b10:	10220000 	.word	0x10220000
 8001b14:	10210000 	.word	0x10210000
 8001b18:	10120000 	.word	0x10120000
 8001b1c:	10110000 	.word	0x10110000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	40011000 	.word	0x40011000
 8001b34:	40011400 	.word	0x40011400
 8001b38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_GPIO_Init+0x304>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4909      	ldr	r1, [pc, #36]	@ (8001b6c <HAL_GPIO_Init+0x304>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f47f ae8e 	bne.w	800187c <HAL_GPIO_Init+0x14>
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	372c      	adds	r7, #44	@ 0x2c
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8c:	e003      	b.n	8001b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	041a      	lsls	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e272      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8087 	beq.w	8001cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc0:	4b92      	ldr	r3, [pc, #584]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d00c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bcc:	4b8f      	ldr	r3, [pc, #572]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d112      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5e>
 8001bd8:	4b8c      	ldr	r3, [pc, #560]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	4b89      	ldr	r3, [pc, #548]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d06c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x12c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d168      	bne.n	8001ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e24c      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x76>
 8001c08:	4b80      	ldr	r3, [pc, #512]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e02e      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x98>
 8001c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7a      	ldr	r2, [pc, #488]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b78      	ldr	r3, [pc, #480]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a77      	ldr	r2, [pc, #476]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0xbc>
 8001c42:	4b72      	ldr	r3, [pc, #456]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a71      	ldr	r2, [pc, #452]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b6f      	ldr	r3, [pc, #444]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6e      	ldr	r2, [pc, #440]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c5c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6a      	ldr	r2, [pc, #424]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b68      	ldr	r3, [pc, #416]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a67      	ldr	r2, [pc, #412]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fd0a 	bl	8001694 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fd06 	bl	8001694 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	@ 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e200      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b5d      	ldr	r3, [pc, #372]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xe4>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fcf6 	bl	8001694 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fcf2 	bl	8001694 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	@ 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1ec      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b53      	ldr	r3, [pc, #332]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x10c>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cda:	4b4c      	ldr	r3, [pc, #304]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce6:	4b49      	ldr	r3, [pc, #292]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x18c>
 8001cf2:	4b46      	ldr	r3, [pc, #280]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b43      	ldr	r3, [pc, #268]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x176>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1c0      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b3d      	ldr	r3, [pc, #244]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4939      	ldr	r1, [pc, #228]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b36      	ldr	r3, [pc, #216]	@ (8001e10 <HAL_RCC_OscConfig+0x270>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fcab 	bl	8001694 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff fca7 	bl	8001694 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1a1      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4927      	ldr	r1, [pc, #156]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <HAL_RCC_OscConfig+0x270>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fc8a 	bl	8001694 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff fc86 	bl	8001694 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e180      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03a      	beq.n	8001e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d019      	beq.n	8001dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_RCC_OscConfig+0x274>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fc6a 	bl	8001694 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fc66 	bl	8001694 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e160      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 fafe 	bl	80023e4 <RCC_Delay>
 8001de8:	e01c      	b.n	8001e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_RCC_OscConfig+0x274>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fc50 	bl	8001694 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df6:	e00f      	b.n	8001e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff fc4c 	bl	8001694 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d908      	bls.n	8001e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e146      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	42420000 	.word	0x42420000
 8001e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4b92      	ldr	r3, [pc, #584]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e9      	bne.n	8001df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80a6 	beq.w	8001f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b8b      	ldr	r3, [pc, #556]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10d      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b88      	ldr	r3, [pc, #544]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a87      	ldr	r2, [pc, #540]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]
 8001e4e:	4b85      	ldr	r3, [pc, #532]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b82      	ldr	r3, [pc, #520]	@ (8002068 <HAL_RCC_OscConfig+0x4c8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002068 <HAL_RCC_OscConfig+0x4c8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002068 <HAL_RCC_OscConfig+0x4c8>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fc0d 	bl	8001694 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7ff fc09 	bl	8001694 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	@ 0x64
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e103      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	4b75      	ldr	r3, [pc, #468]	@ (8002068 <HAL_RCC_OscConfig+0x4c8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x312>
 8001ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a6e      	ldr	r2, [pc, #440]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e02d      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x334>
 8001eba:	4b6a      	ldr	r3, [pc, #424]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a69      	ldr	r2, [pc, #420]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b67      	ldr	r3, [pc, #412]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a66      	ldr	r2, [pc, #408]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
 8001ed2:	e01c      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d10c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x356>
 8001edc:	4b61      	ldr	r3, [pc, #388]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a60      	ldr	r2, [pc, #384]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a5d      	ldr	r2, [pc, #372]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e00b      	b.n	8001f0e <HAL_RCC_OscConfig+0x36e>
 8001ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a5a      	ldr	r2, [pc, #360]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	4b58      	ldr	r3, [pc, #352]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a57      	ldr	r2, [pc, #348]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d015      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fbbd 	bl	8001694 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fbb9 	bl	8001694 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0b1      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	4b4b      	ldr	r3, [pc, #300]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ee      	beq.n	8001f1e <HAL_RCC_OscConfig+0x37e>
 8001f40:	e014      	b.n	8001f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fba7 	bl	8001694 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff fba3 	bl	8001694 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e09b      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	4b40      	ldr	r3, [pc, #256]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b3c      	ldr	r3, [pc, #240]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a3b      	ldr	r2, [pc, #236]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8087 	beq.w	8002096 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f88:	4b36      	ldr	r3, [pc, #216]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d061      	beq.n	8002058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d146      	bne.n	800202a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9c:	4b33      	ldr	r3, [pc, #204]	@ (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fb77 	bl	8001694 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7ff fb73 	bl	8001694 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e06d      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	4b29      	ldr	r3, [pc, #164]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd0:	d108      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd2:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4921      	ldr	r1, [pc, #132]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a19      	ldr	r1, [r3, #32]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	491b      	ldr	r1, [pc, #108]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7ff fb47 	bl	8001694 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200a:	f7ff fb43 	bl	8001694 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e03d      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x46a>
 8002028:	e035      	b.n	8002096 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_RCC_OscConfig+0x4cc>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fb30 	bl	8001694 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff fb2c 	bl	8001694 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e026      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x498>
 8002056:	e01e      	b.n	8002096 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e019      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
 8002064:	40021000 	.word	0x40021000
 8002068:	40007000 	.word	0x40007000
 800206c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_RCC_OscConfig+0x500>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	429a      	cmp	r2, r3
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0d0      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d910      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b67      	ldr	r3, [pc, #412]	@ (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4965      	ldr	r1, [pc, #404]	@ (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b63      	ldr	r3, [pc, #396]	@ (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0b8      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002100:	4b59      	ldr	r3, [pc, #356]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a58      	ldr	r2, [pc, #352]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800210a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002118:	4b53      	ldr	r3, [pc, #332]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a52      	ldr	r2, [pc, #328]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002124:	4b50      	ldr	r3, [pc, #320]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	494d      	ldr	r1, [pc, #308]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d040      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b47      	ldr	r3, [pc, #284]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d115      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e07f      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002162:	4b41      	ldr	r3, [pc, #260]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e073      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06b      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002182:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 0203 	bic.w	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4936      	ldr	r1, [pc, #216]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002194:	f7ff fa7e 	bl	8001694 <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f7ff fa7a 	bl	8001694 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e053      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 020c 	and.w	r2, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1eb      	bne.n	800219c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c4:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d210      	bcs.n	80021f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4922      	ldr	r1, [pc, #136]	@ (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b20      	ldr	r3, [pc, #128]	@ (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e032      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4916      	ldr	r1, [pc, #88]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	490e      	ldr	r1, [pc, #56]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002232:	f000 f821 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002236:	4602      	mov	r2, r0
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	490a      	ldr	r1, [pc, #40]	@ (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	5ccb      	ldrb	r3, [r1, r3]
 8002246:	fa22 f303 	lsr.w	r3, r2, r3
 800224a:	4a09      	ldr	r2, [pc, #36]	@ (8002270 <HAL_RCC_ClockConfig+0x1cc>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_RCC_ClockConfig+0x1d0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff f860 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40022000 	.word	0x40022000
 8002268:	40021000 	.word	0x40021000
 800226c:	0800618c 	.word	0x0800618c
 8002270:	20000014 	.word	0x20000014
 8002274:	20000018 	.word	0x20000018

08002278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002292:	4b1e      	ldr	r3, [pc, #120]	@ (800230c <HAL_RCC_GetSysClockFreq+0x94>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x30>
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x36>
 80022a6:	e027      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x98>)
 80022aa:	613b      	str	r3, [r7, #16]
      break;
 80022ac:	e027      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0c9b      	lsrs	r3, r3, #18
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	4a17      	ldr	r2, [pc, #92]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_RCC_GetSysClockFreq+0x94>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c5b      	lsrs	r3, r3, #17
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	4a11      	ldr	r2, [pc, #68]	@ (8002318 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x98>)
 80022da:	fb03 f202 	mul.w	r2, r3, r2
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e004      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <HAL_RCC_GetSysClockFreq+0xa4>)
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	613b      	str	r3, [r7, #16]
      break;
 80022f6:	e002      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fa:	613b      	str	r3, [r7, #16]
      break;
 80022fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fe:	693b      	ldr	r3, [r7, #16]
}
 8002300:	4618      	mov	r0, r3
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	007a1200 	.word	0x007a1200
 8002314:	080061a4 	.word	0x080061a4
 8002318:	080061b4 	.word	0x080061b4
 800231c:	003d0900 	.word	0x003d0900

08002320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b02      	ldr	r3, [pc, #8]	@ (8002330 <HAL_RCC_GetHCLKFreq+0x10>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000014 	.word	0x20000014

08002334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002338:	f7ff fff2 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4903      	ldr	r1, [pc, #12]	@ (8002358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	0800619c 	.word	0x0800619c

0800235c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002360:	f7ff ffde 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b05      	ldr	r3, [pc, #20]	@ (800237c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	0adb      	lsrs	r3, r3, #11
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4903      	ldr	r1, [pc, #12]	@ (8002380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	0800619c 	.word	0x0800619c

08002384 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	220f      	movs	r2, #15
 8002392:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_RCC_GetClockConfig+0x58>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_RCC_GetClockConfig+0x58>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_RCC_GetClockConfig+0x58>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <HAL_RCC_GetClockConfig+0x58>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_RCC_GetClockConfig+0x5c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0207 	and.w	r2, r3, #7
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40022000 	.word	0x40022000

080023e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <RCC_Delay+0x34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <RCC_Delay+0x38>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0a5b      	lsrs	r3, r3, #9
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002400:	bf00      	nop
  }
  while (Delay --);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	60fa      	str	r2, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <RCC_Delay+0x1c>
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	20000014 	.word	0x20000014
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e041      	b.n	80024b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe fe80 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f000 fc18 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d001      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e03a      	b.n	800254e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <HAL_TIM_Base_Start_IT+0x98>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00e      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x58>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002502:	d009      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x58>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <HAL_TIM_Base_Start_IT+0x9c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x58>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a13      	ldr	r2, [pc, #76]	@ (8002560 <HAL_TIM_Base_Start_IT+0xa0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d111      	bne.n	800253c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b06      	cmp	r3, #6
 8002528:	d010      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	e007      	b.n	800254c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800

08002564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e041      	b.n	80025fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f839 	bl	8002602 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 fb76 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_TIM_PWM_Start+0x24>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e022      	b.n	800267e <HAL_TIM_PWM_Start+0x6a>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d109      	bne.n	8002652 <HAL_TIM_PWM_Start+0x3e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	bf14      	ite	ne
 800264a:	2301      	movne	r3, #1
 800264c:	2300      	moveq	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	e015      	b.n	800267e <HAL_TIM_PWM_Start+0x6a>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d109      	bne.n	800266c <HAL_TIM_PWM_Start+0x58>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e008      	b.n	800267e <HAL_TIM_PWM_Start+0x6a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e05e      	b.n	8002744 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <HAL_TIM_PWM_Start+0x82>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002694:	e013      	b.n	80026be <HAL_TIM_PWM_Start+0xaa>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x92>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026a4:	e00b      	b.n	80026be <HAL_TIM_PWM_Start+0xaa>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_PWM_Start+0xa2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026b4:	e003      	b.n	80026be <HAL_TIM_PWM_Start+0xaa>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fd70 	bl	80031ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_TIM_PWM_Start+0x138>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d107      	bne.n	80026e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a18      	ldr	r2, [pc, #96]	@ (800274c <HAL_TIM_PWM_Start+0x138>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00e      	beq.n	800270e <HAL_TIM_PWM_Start+0xfa>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f8:	d009      	beq.n	800270e <HAL_TIM_PWM_Start+0xfa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a14      	ldr	r2, [pc, #80]	@ (8002750 <HAL_TIM_PWM_Start+0x13c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_TIM_PWM_Start+0xfa>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a12      	ldr	r2, [pc, #72]	@ (8002754 <HAL_TIM_PWM_Start+0x140>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d111      	bne.n	8002732 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b06      	cmp	r3, #6
 800271e:	d010      	beq.n	8002742 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002730:	e007      	b.n	8002742 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800

08002758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d020      	beq.n	80027bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01b      	beq.n	80027bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0202 	mvn.w	r2, #2
 800278c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa5a 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fa4d 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fa5c 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0204 	mvn.w	r2, #4
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa34 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa27 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fa36 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0208 	mvn.w	r2, #8
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2204      	movs	r2, #4
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fa0e 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa01 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fa10 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0210 	mvn.w	r2, #16
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2208      	movs	r2, #8
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9e8 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f9db 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f9ea 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0201 	mvn.w	r2, #1
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fbfa 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fced 	bl	80032c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f9ba 	bl	8002c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0220 	mvn.w	r2, #32
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fcc0 	bl	80032b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002952:	2302      	movs	r3, #2
 8002954:	e0ae      	b.n	8002ab4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0c      	cmp	r3, #12
 8002962:	f200 809f 	bhi.w	8002aa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002966:	a201      	add	r2, pc, #4	@ (adr r2, 800296c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	080029a1 	.word	0x080029a1
 8002970:	08002aa5 	.word	0x08002aa5
 8002974:	08002aa5 	.word	0x08002aa5
 8002978:	08002aa5 	.word	0x08002aa5
 800297c:	080029e1 	.word	0x080029e1
 8002980:	08002aa5 	.word	0x08002aa5
 8002984:	08002aa5 	.word	0x08002aa5
 8002988:	08002aa5 	.word	0x08002aa5
 800298c:	08002a23 	.word	0x08002a23
 8002990:	08002aa5 	.word	0x08002aa5
 8002994:	08002aa5 	.word	0x08002aa5
 8002998:	08002aa5 	.word	0x08002aa5
 800299c:	08002a63 	.word	0x08002a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f9e2 	bl	8002d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0208 	orr.w	r2, r2, #8
 80029ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0204 	bic.w	r2, r2, #4
 80029ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6999      	ldr	r1, [r3, #24]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	619a      	str	r2, [r3, #24]
      break;
 80029de:	e064      	b.n	8002aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa28 	bl	8002e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6999      	ldr	r1, [r3, #24]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	021a      	lsls	r2, r3, #8
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	619a      	str	r2, [r3, #24]
      break;
 8002a20:	e043      	b.n	8002aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fa71 	bl	8002f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0208 	orr.w	r2, r2, #8
 8002a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0204 	bic.w	r2, r2, #4
 8002a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69d9      	ldr	r1, [r3, #28]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	61da      	str	r2, [r3, #28]
      break;
 8002a60:	e023      	b.n	8002aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fabb 	bl	8002fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69d9      	ldr	r1, [r3, #28]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	021a      	lsls	r2, r3, #8
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	61da      	str	r2, [r3, #28]
      break;
 8002aa2:	e002      	b.n	8002aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e0b4      	b.n	8002c42 <HAL_TIM_ConfigClockSource+0x186>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b10:	d03e      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0xd4>
 8002b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b16:	f200 8087 	bhi.w	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b1e:	f000 8086 	beq.w	8002c2e <HAL_TIM_ConfigClockSource+0x172>
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b26:	d87f      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b70      	cmp	r3, #112	@ 0x70
 8002b2a:	d01a      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0xa6>
 8002b2c:	2b70      	cmp	r3, #112	@ 0x70
 8002b2e:	d87b      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b60      	cmp	r3, #96	@ 0x60
 8002b32:	d050      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b34:	2b60      	cmp	r3, #96	@ 0x60
 8002b36:	d877      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b50      	cmp	r3, #80	@ 0x50
 8002b3a:	d03c      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8002b3c:	2b50      	cmp	r3, #80	@ 0x50
 8002b3e:	d873      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b40      	cmp	r3, #64	@ 0x40
 8002b42:	d058      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8002b44:	2b40      	cmp	r3, #64	@ 0x40
 8002b46:	d86f      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b48:	2b30      	cmp	r3, #48	@ 0x30
 8002b4a:	d064      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15a>
 8002b4c:	2b30      	cmp	r3, #48	@ 0x30
 8002b4e:	d86b      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d060      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15a>
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d867      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d05c      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15a>
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d05a      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15a>
 8002b60:	e062      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	f000 fafc 	bl	800316e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	609a      	str	r2, [r3, #8]
      break;
 8002b8e:	e04f      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ba0:	f000 fae5 	bl	800316e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bb2:	609a      	str	r2, [r3, #8]
      break;
 8002bb4:	e03c      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f000 fa5c 	bl	8003080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2150      	movs	r1, #80	@ 0x50
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fab3 	bl	800313a <TIM_ITRx_SetConfig>
      break;
 8002bd4:	e02c      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be2:	461a      	mov	r2, r3
 8002be4:	f000 fa7a 	bl	80030dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2160      	movs	r1, #96	@ 0x60
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 faa3 	bl	800313a <TIM_ITRx_SetConfig>
      break;
 8002bf4:	e01c      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c02:	461a      	mov	r2, r3
 8002c04:	f000 fa3c 	bl	8003080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2140      	movs	r1, #64	@ 0x40
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fa93 	bl	800313a <TIM_ITRx_SetConfig>
      break;
 8002c14:	e00c      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4610      	mov	r0, r2
 8002c22:	f000 fa8a 	bl	800313a <TIM_ITRx_SetConfig>
      break;
 8002c26:	e003      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c2c:	e000      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
	...

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a2f      	ldr	r2, [pc, #188]	@ (8002d64 <TIM_Base_SetConfig+0xd0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00b      	beq.n	8002cc4 <TIM_Base_SetConfig+0x30>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb2:	d007      	beq.n	8002cc4 <TIM_Base_SetConfig+0x30>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002d68 <TIM_Base_SetConfig+0xd4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <TIM_Base_SetConfig+0x30>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8002d6c <TIM_Base_SetConfig+0xd8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d108      	bne.n	8002cd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a22      	ldr	r2, [pc, #136]	@ (8002d64 <TIM_Base_SetConfig+0xd0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00b      	beq.n	8002cf6 <TIM_Base_SetConfig+0x62>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce4:	d007      	beq.n	8002cf6 <TIM_Base_SetConfig+0x62>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d68 <TIM_Base_SetConfig+0xd4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d003      	beq.n	8002cf6 <TIM_Base_SetConfig+0x62>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d6c <TIM_Base_SetConfig+0xd8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d108      	bne.n	8002d08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <TIM_Base_SetConfig+0xd0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d103      	bne.n	8002d3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f023 0201 	bic.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800

08002d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f023 0201 	bic.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f023 0302 	bic.w	r3, r3, #2
 8002db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e38 <TIM_OC1_SetConfig+0xc8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10c      	bne.n	8002de6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f023 0308 	bic.w	r3, r3, #8
 8002dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a13      	ldr	r2, [pc, #76]	@ (8002e38 <TIM_OC1_SetConfig+0xc8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d111      	bne.n	8002e12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	621a      	str	r2, [r3, #32]
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00

08002e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f023 0210 	bic.w	r2, r3, #16
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0320 	bic.w	r3, r3, #32
 8002e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <TIM_OC2_SetConfig+0xd0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d10d      	bne.n	8002eb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a14      	ldr	r2, [pc, #80]	@ (8002f0c <TIM_OC2_SetConfig+0xd0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d113      	bne.n	8002ee8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ec6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ece:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	40012c00 	.word	0x40012c00

08002f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <TIM_OC3_SetConfig+0xd0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <TIM_OC3_SetConfig+0xd0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d113      	bne.n	8002fba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	621a      	str	r2, [r3, #32]
}
 8002fd4:	bf00      	nop
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40012c00 	.word	0x40012c00

08002fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800301a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800302e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	031b      	lsls	r3, r3, #12
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a0f      	ldr	r2, [pc, #60]	@ (800307c <TIM_OC4_SetConfig+0x98>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d109      	bne.n	8003058 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800304a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	019b      	lsls	r3, r3, #6
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	621a      	str	r2, [r3, #32]
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	40012c00 	.word	0x40012c00

08003080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f023 0201 	bic.w	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f023 030a 	bic.w	r3, r3, #10
 80030bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f023 0210 	bic.w	r2, r3, #16
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	031b      	lsls	r3, r3, #12
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003118:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	621a      	str	r2, [r3, #32]
}
 8003130:	bf00      	nop
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800313a:	b480      	push	{r7}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	f043 0307 	orr.w	r3, r3, #7
 800315c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800316e:	b480      	push	{r7}
 8003170:	b087      	sub	sp, #28
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003188:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	021a      	lsls	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	431a      	orrs	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	4313      	orrs	r3, r2
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	609a      	str	r2, [r3, #8]
}
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2201      	movs	r2, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1a      	ldr	r2, [r3, #32]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	401a      	ands	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	621a      	str	r2, [r3, #32]
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003208:	2302      	movs	r3, #2
 800320a:	e046      	b.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a16      	ldr	r2, [pc, #88]	@ (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003258:	d009      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a10      	ldr	r2, [pc, #64]	@ (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10c      	bne.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	4313      	orrs	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800

080032b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e042      	b.n	800336c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd ffc0 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	@ 0x24
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fa09 	bl	8003730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800332c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800333c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800334c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	@ 0x28
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b20      	cmp	r3, #32
 8003392:	d175      	bne.n	8003480 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_UART_Transmit+0x2c>
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e06e      	b.n	8003482 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2221      	movs	r2, #33	@ 0x21
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b2:	f7fe f96f 	bl	8001694 <HAL_GetTick>
 80033b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	88fa      	ldrh	r2, [r7, #6]
 80033c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033cc:	d108      	bne.n	80033e0 <HAL_UART_Transmit+0x6c>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e003      	b.n	80033e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033e8:	e02e      	b.n	8003448 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2180      	movs	r1, #128	@ 0x80
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f8df 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e03a      	b.n	8003482 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	3302      	adds	r3, #2
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	e007      	b.n	800343a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	3301      	adds	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1cb      	bne.n	80033ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	2140      	movs	r1, #64	@ 0x40
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f8ab 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e006      	b.n	8003482 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	@ 0x28
 800348e:	af02      	add	r7, sp, #8
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	f040 8081 	bne.w	80035ae <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_UART_Receive+0x2e>
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e079      	b.n	80035b0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2222      	movs	r2, #34	@ 0x22
 80034c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d0:	f7fe f8e0 	bl	8001694 <HAL_GetTick>
 80034d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	88fa      	ldrh	r2, [r7, #6]
 80034da:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ea:	d108      	bne.n	80034fe <HAL_UART_Receive+0x74>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	e003      	b.n	8003506 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003506:	e047      	b.n	8003598 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	2120      	movs	r1, #32
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f850 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e042      	b.n	80035b0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10c      	bne.n	800354a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353c:	b29a      	uxth	r2, r3
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3302      	adds	r3, #2
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e01f      	b.n	800358a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003552:	d007      	beq.n	8003564 <HAL_UART_Receive+0xda>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <HAL_UART_Receive+0xe8>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e008      	b.n	8003584 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800357e:	b2da      	uxtb	r2, r3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	3301      	adds	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1b2      	bne.n	8003508 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
  }
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c8:	e03b      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d037      	beq.n	8003642 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d2:	f7fe f85f 	bl	8001694 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	6a3a      	ldr	r2, [r7, #32]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e03a      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d023      	beq.n	8003642 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b80      	cmp	r3, #128	@ 0x80
 80035fe:	d020      	beq.n	8003642 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d01d      	beq.n	8003642 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d116      	bne.n	8003642 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f81d 	bl	800366a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2208      	movs	r2, #8
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e00f      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4013      	ands	r3, r2
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	429a      	cmp	r2, r3
 800365e:	d0b4      	beq.n	80035ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800366a:	b480      	push	{r7}
 800366c:	b095      	sub	sp, #84	@ 0x54
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	330c      	adds	r3, #12
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003692:	643a      	str	r2, [r7, #64]	@ 0x40
 8003694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003698:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e5      	bne.n	8003672 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3314      	adds	r3, #20
 80036ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3314      	adds	r3, #20
 80036c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e5      	bne.n	80036a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d119      	bne.n	8003716 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	330c      	adds	r3, #12
 80036e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f023 0310 	bic.w	r3, r3, #16
 80036f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	330c      	adds	r3, #12
 8003700:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003702:	61ba      	str	r2, [r7, #24]
 8003704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6979      	ldr	r1, [r7, #20]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	613b      	str	r3, [r7, #16]
   return(result);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003724:	bf00      	nop
 8003726:	3754      	adds	r7, #84	@ 0x54
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
	...

08003730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800376a:	f023 030c 	bic.w	r3, r3, #12
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	430b      	orrs	r3, r1
 8003776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2c      	ldr	r2, [pc, #176]	@ (8003844 <UART_SetConfig+0x114>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d103      	bne.n	80037a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003798:	f7fe fde0 	bl	800235c <HAL_RCC_GetPCLK2Freq>
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	e002      	b.n	80037a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037a0:	f7fe fdc8 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 80037a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009a      	lsls	r2, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	4a22      	ldr	r2, [pc, #136]	@ (8003848 <UART_SetConfig+0x118>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	0119      	lsls	r1, r3, #4
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	009a      	lsls	r2, r3, #2
 80037d0:	441a      	add	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003848 <UART_SetConfig+0x118>)
 80037de:	fba3 0302 	umull	r0, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2064      	movs	r0, #100	@ 0x64
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	3332      	adds	r3, #50	@ 0x32
 80037f0:	4a15      	ldr	r2, [pc, #84]	@ (8003848 <UART_SetConfig+0x118>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037fc:	4419      	add	r1, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	009a      	lsls	r2, r3, #2
 8003808:	441a      	add	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fbb2 f2f3 	udiv	r2, r2, r3
 8003814:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <UART_SetConfig+0x118>)
 8003816:	fba3 0302 	umull	r0, r3, r3, r2
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2064      	movs	r0, #100	@ 0x64
 800381e:	fb00 f303 	mul.w	r3, r0, r3
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	3332      	adds	r3, #50	@ 0x32
 8003828:	4a07      	ldr	r2, [pc, #28]	@ (8003848 <UART_SetConfig+0x118>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	440a      	add	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40013800 	.word	0x40013800
 8003848:	51eb851f 	.word	0x51eb851f

0800384c <__cvt>:
 800384c:	2b00      	cmp	r3, #0
 800384e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003852:	461d      	mov	r5, r3
 8003854:	bfbb      	ittet	lt
 8003856:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800385a:	461d      	movlt	r5, r3
 800385c:	2300      	movge	r3, #0
 800385e:	232d      	movlt	r3, #45	@ 0x2d
 8003860:	b088      	sub	sp, #32
 8003862:	4614      	mov	r4, r2
 8003864:	bfb8      	it	lt
 8003866:	4614      	movlt	r4, r2
 8003868:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800386a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800386c:	7013      	strb	r3, [r2, #0]
 800386e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003870:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003874:	f023 0820 	bic.w	r8, r3, #32
 8003878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800387c:	d005      	beq.n	800388a <__cvt+0x3e>
 800387e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003882:	d100      	bne.n	8003886 <__cvt+0x3a>
 8003884:	3601      	adds	r6, #1
 8003886:	2302      	movs	r3, #2
 8003888:	e000      	b.n	800388c <__cvt+0x40>
 800388a:	2303      	movs	r3, #3
 800388c:	aa07      	add	r2, sp, #28
 800388e:	9204      	str	r2, [sp, #16]
 8003890:	aa06      	add	r2, sp, #24
 8003892:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003896:	e9cd 3600 	strd	r3, r6, [sp]
 800389a:	4622      	mov	r2, r4
 800389c:	462b      	mov	r3, r5
 800389e:	f000 fe4f 	bl	8004540 <_dtoa_r>
 80038a2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80038a6:	4607      	mov	r7, r0
 80038a8:	d119      	bne.n	80038de <__cvt+0x92>
 80038aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80038ac:	07db      	lsls	r3, r3, #31
 80038ae:	d50e      	bpl.n	80038ce <__cvt+0x82>
 80038b0:	eb00 0906 	add.w	r9, r0, r6
 80038b4:	2200      	movs	r2, #0
 80038b6:	2300      	movs	r3, #0
 80038b8:	4620      	mov	r0, r4
 80038ba:	4629      	mov	r1, r5
 80038bc:	f7fd f874 	bl	80009a8 <__aeabi_dcmpeq>
 80038c0:	b108      	cbz	r0, 80038c6 <__cvt+0x7a>
 80038c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80038c6:	2230      	movs	r2, #48	@ 0x30
 80038c8:	9b07      	ldr	r3, [sp, #28]
 80038ca:	454b      	cmp	r3, r9
 80038cc:	d31e      	bcc.n	800390c <__cvt+0xc0>
 80038ce:	4638      	mov	r0, r7
 80038d0:	9b07      	ldr	r3, [sp, #28]
 80038d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80038d4:	1bdb      	subs	r3, r3, r7
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	b008      	add	sp, #32
 80038da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038e2:	eb00 0906 	add.w	r9, r0, r6
 80038e6:	d1e5      	bne.n	80038b4 <__cvt+0x68>
 80038e8:	7803      	ldrb	r3, [r0, #0]
 80038ea:	2b30      	cmp	r3, #48	@ 0x30
 80038ec:	d10a      	bne.n	8003904 <__cvt+0xb8>
 80038ee:	2200      	movs	r2, #0
 80038f0:	2300      	movs	r3, #0
 80038f2:	4620      	mov	r0, r4
 80038f4:	4629      	mov	r1, r5
 80038f6:	f7fd f857 	bl	80009a8 <__aeabi_dcmpeq>
 80038fa:	b918      	cbnz	r0, 8003904 <__cvt+0xb8>
 80038fc:	f1c6 0601 	rsb	r6, r6, #1
 8003900:	f8ca 6000 	str.w	r6, [sl]
 8003904:	f8da 3000 	ldr.w	r3, [sl]
 8003908:	4499      	add	r9, r3
 800390a:	e7d3      	b.n	80038b4 <__cvt+0x68>
 800390c:	1c59      	adds	r1, r3, #1
 800390e:	9107      	str	r1, [sp, #28]
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	e7d9      	b.n	80038c8 <__cvt+0x7c>

08003914 <__exponent>:
 8003914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003916:	2900      	cmp	r1, #0
 8003918:	bfb6      	itet	lt
 800391a:	232d      	movlt	r3, #45	@ 0x2d
 800391c:	232b      	movge	r3, #43	@ 0x2b
 800391e:	4249      	neglt	r1, r1
 8003920:	2909      	cmp	r1, #9
 8003922:	7002      	strb	r2, [r0, #0]
 8003924:	7043      	strb	r3, [r0, #1]
 8003926:	dd29      	ble.n	800397c <__exponent+0x68>
 8003928:	f10d 0307 	add.w	r3, sp, #7
 800392c:	461d      	mov	r5, r3
 800392e:	270a      	movs	r7, #10
 8003930:	fbb1 f6f7 	udiv	r6, r1, r7
 8003934:	461a      	mov	r2, r3
 8003936:	fb07 1416 	mls	r4, r7, r6, r1
 800393a:	3430      	adds	r4, #48	@ 0x30
 800393c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003940:	460c      	mov	r4, r1
 8003942:	2c63      	cmp	r4, #99	@ 0x63
 8003944:	4631      	mov	r1, r6
 8003946:	f103 33ff 	add.w	r3, r3, #4294967295
 800394a:	dcf1      	bgt.n	8003930 <__exponent+0x1c>
 800394c:	3130      	adds	r1, #48	@ 0x30
 800394e:	1e94      	subs	r4, r2, #2
 8003950:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003954:	4623      	mov	r3, r4
 8003956:	1c41      	adds	r1, r0, #1
 8003958:	42ab      	cmp	r3, r5
 800395a:	d30a      	bcc.n	8003972 <__exponent+0x5e>
 800395c:	f10d 0309 	add.w	r3, sp, #9
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	42ac      	cmp	r4, r5
 8003964:	bf88      	it	hi
 8003966:	2300      	movhi	r3, #0
 8003968:	3302      	adds	r3, #2
 800396a:	4403      	add	r3, r0
 800396c:	1a18      	subs	r0, r3, r0
 800396e:	b003      	add	sp, #12
 8003970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003972:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003976:	f801 6f01 	strb.w	r6, [r1, #1]!
 800397a:	e7ed      	b.n	8003958 <__exponent+0x44>
 800397c:	2330      	movs	r3, #48	@ 0x30
 800397e:	3130      	adds	r1, #48	@ 0x30
 8003980:	7083      	strb	r3, [r0, #2]
 8003982:	70c1      	strb	r1, [r0, #3]
 8003984:	1d03      	adds	r3, r0, #4
 8003986:	e7f1      	b.n	800396c <__exponent+0x58>

08003988 <_printf_float>:
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	b091      	sub	sp, #68	@ 0x44
 800398e:	460c      	mov	r4, r1
 8003990:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003994:	4616      	mov	r6, r2
 8003996:	461f      	mov	r7, r3
 8003998:	4605      	mov	r5, r0
 800399a:	f000 fcc1 	bl	8004320 <_localeconv_r>
 800399e:	6803      	ldr	r3, [r0, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	9308      	str	r3, [sp, #32]
 80039a4:	f7fc fbd4 	bl	8000150 <strlen>
 80039a8:	2300      	movs	r3, #0
 80039aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80039ac:	f8d8 3000 	ldr.w	r3, [r8]
 80039b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80039b2:	3307      	adds	r3, #7
 80039b4:	f023 0307 	bic.w	r3, r3, #7
 80039b8:	f103 0208 	add.w	r2, r3, #8
 80039bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80039c0:	f8d4 b000 	ldr.w	fp, [r4]
 80039c4:	f8c8 2000 	str.w	r2, [r8]
 80039c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80039cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80039d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80039d6:	f04f 32ff 	mov.w	r2, #4294967295
 80039da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80039de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80039e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003c54 <_printf_float+0x2cc>)
 80039e4:	f7fd f812 	bl	8000a0c <__aeabi_dcmpun>
 80039e8:	bb70      	cbnz	r0, 8003a48 <_printf_float+0xc0>
 80039ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295
 80039f2:	4b98      	ldr	r3, [pc, #608]	@ (8003c54 <_printf_float+0x2cc>)
 80039f4:	f7fc ffec 	bl	80009d0 <__aeabi_dcmple>
 80039f8:	bb30      	cbnz	r0, 8003a48 <_printf_float+0xc0>
 80039fa:	2200      	movs	r2, #0
 80039fc:	2300      	movs	r3, #0
 80039fe:	4640      	mov	r0, r8
 8003a00:	4649      	mov	r1, r9
 8003a02:	f7fc ffdb 	bl	80009bc <__aeabi_dcmplt>
 8003a06:	b110      	cbz	r0, 8003a0e <_printf_float+0x86>
 8003a08:	232d      	movs	r3, #45	@ 0x2d
 8003a0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a0e:	4a92      	ldr	r2, [pc, #584]	@ (8003c58 <_printf_float+0x2d0>)
 8003a10:	4b92      	ldr	r3, [pc, #584]	@ (8003c5c <_printf_float+0x2d4>)
 8003a12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003a16:	bf94      	ite	ls
 8003a18:	4690      	movls	r8, r2
 8003a1a:	4698      	movhi	r8, r3
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	f04f 0900 	mov.w	r9, #0
 8003a22:	6123      	str	r3, [r4, #16]
 8003a24:	f02b 0304 	bic.w	r3, fp, #4
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	4633      	mov	r3, r6
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	4628      	mov	r0, r5
 8003a30:	9700      	str	r7, [sp, #0]
 8003a32:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003a34:	f000 f9d4 	bl	8003de0 <_printf_common>
 8003a38:	3001      	adds	r0, #1
 8003a3a:	f040 8090 	bne.w	8003b5e <_printf_float+0x1d6>
 8003a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a42:	b011      	add	sp, #68	@ 0x44
 8003a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	4649      	mov	r1, r9
 8003a50:	f7fc ffdc 	bl	8000a0c <__aeabi_dcmpun>
 8003a54:	b148      	cbz	r0, 8003a6a <_printf_float+0xe2>
 8003a56:	464b      	mov	r3, r9
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bfb8      	it	lt
 8003a5c:	232d      	movlt	r3, #45	@ 0x2d
 8003a5e:	4a80      	ldr	r2, [pc, #512]	@ (8003c60 <_printf_float+0x2d8>)
 8003a60:	bfb8      	it	lt
 8003a62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003a66:	4b7f      	ldr	r3, [pc, #508]	@ (8003c64 <_printf_float+0x2dc>)
 8003a68:	e7d3      	b.n	8003a12 <_printf_float+0x8a>
 8003a6a:	6863      	ldr	r3, [r4, #4]
 8003a6c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	d13f      	bne.n	8003af4 <_printf_float+0x16c>
 8003a74:	2306      	movs	r3, #6
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003a7e:	6023      	str	r3, [r4, #0]
 8003a80:	9206      	str	r2, [sp, #24]
 8003a82:	aa0e      	add	r2, sp, #56	@ 0x38
 8003a84:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003a88:	aa0d      	add	r2, sp, #52	@ 0x34
 8003a8a:	9203      	str	r2, [sp, #12]
 8003a8c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003a90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a94:	6863      	ldr	r3, [r4, #4]
 8003a96:	4642      	mov	r2, r8
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003aa0:	f7ff fed4 	bl	800384c <__cvt>
 8003aa4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003aa6:	4680      	mov	r8, r0
 8003aa8:	2947      	cmp	r1, #71	@ 0x47
 8003aaa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003aac:	d128      	bne.n	8003b00 <_printf_float+0x178>
 8003aae:	1cc8      	adds	r0, r1, #3
 8003ab0:	db02      	blt.n	8003ab8 <_printf_float+0x130>
 8003ab2:	6863      	ldr	r3, [r4, #4]
 8003ab4:	4299      	cmp	r1, r3
 8003ab6:	dd40      	ble.n	8003b3a <_printf_float+0x1b2>
 8003ab8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003abc:	fa5f fa8a 	uxtb.w	sl, sl
 8003ac0:	4652      	mov	r2, sl
 8003ac2:	3901      	subs	r1, #1
 8003ac4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ac8:	910d      	str	r1, [sp, #52]	@ 0x34
 8003aca:	f7ff ff23 	bl	8003914 <__exponent>
 8003ace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003ad0:	4681      	mov	r9, r0
 8003ad2:	1813      	adds	r3, r2, r0
 8003ad4:	2a01      	cmp	r2, #1
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	dc02      	bgt.n	8003ae0 <_printf_float+0x158>
 8003ada:	6822      	ldr	r2, [r4, #0]
 8003adc:	07d2      	lsls	r2, r2, #31
 8003ade:	d501      	bpl.n	8003ae4 <_printf_float+0x15c>
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	6123      	str	r3, [r4, #16]
 8003ae4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d09e      	beq.n	8003a2a <_printf_float+0xa2>
 8003aec:	232d      	movs	r3, #45	@ 0x2d
 8003aee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003af2:	e79a      	b.n	8003a2a <_printf_float+0xa2>
 8003af4:	2947      	cmp	r1, #71	@ 0x47
 8003af6:	d1bf      	bne.n	8003a78 <_printf_float+0xf0>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1bd      	bne.n	8003a78 <_printf_float+0xf0>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e7ba      	b.n	8003a76 <_printf_float+0xee>
 8003b00:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b04:	d9dc      	bls.n	8003ac0 <_printf_float+0x138>
 8003b06:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003b0a:	d118      	bne.n	8003b3e <_printf_float+0x1b6>
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	6863      	ldr	r3, [r4, #4]
 8003b10:	dd0b      	ble.n	8003b2a <_printf_float+0x1a2>
 8003b12:	6121      	str	r1, [r4, #16]
 8003b14:	b913      	cbnz	r3, 8003b1c <_printf_float+0x194>
 8003b16:	6822      	ldr	r2, [r4, #0]
 8003b18:	07d0      	lsls	r0, r2, #31
 8003b1a:	d502      	bpl.n	8003b22 <_printf_float+0x19a>
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	440b      	add	r3, r1
 8003b20:	6123      	str	r3, [r4, #16]
 8003b22:	f04f 0900 	mov.w	r9, #0
 8003b26:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003b28:	e7dc      	b.n	8003ae4 <_printf_float+0x15c>
 8003b2a:	b913      	cbnz	r3, 8003b32 <_printf_float+0x1aa>
 8003b2c:	6822      	ldr	r2, [r4, #0]
 8003b2e:	07d2      	lsls	r2, r2, #31
 8003b30:	d501      	bpl.n	8003b36 <_printf_float+0x1ae>
 8003b32:	3302      	adds	r3, #2
 8003b34:	e7f4      	b.n	8003b20 <_printf_float+0x198>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e7f2      	b.n	8003b20 <_printf_float+0x198>
 8003b3a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b40:	4299      	cmp	r1, r3
 8003b42:	db05      	blt.n	8003b50 <_printf_float+0x1c8>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	6121      	str	r1, [r4, #16]
 8003b48:	07d8      	lsls	r0, r3, #31
 8003b4a:	d5ea      	bpl.n	8003b22 <_printf_float+0x19a>
 8003b4c:	1c4b      	adds	r3, r1, #1
 8003b4e:	e7e7      	b.n	8003b20 <_printf_float+0x198>
 8003b50:	2900      	cmp	r1, #0
 8003b52:	bfcc      	ite	gt
 8003b54:	2201      	movgt	r2, #1
 8003b56:	f1c1 0202 	rsble	r2, r1, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	e7e0      	b.n	8003b20 <_printf_float+0x198>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	055a      	lsls	r2, r3, #21
 8003b62:	d407      	bmi.n	8003b74 <_printf_float+0x1ec>
 8003b64:	6923      	ldr	r3, [r4, #16]
 8003b66:	4642      	mov	r2, r8
 8003b68:	4631      	mov	r1, r6
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	47b8      	blx	r7
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d12b      	bne.n	8003bca <_printf_float+0x242>
 8003b72:	e764      	b.n	8003a3e <_printf_float+0xb6>
 8003b74:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b78:	f240 80dc 	bls.w	8003d34 <_printf_float+0x3ac>
 8003b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b80:	2200      	movs	r2, #0
 8003b82:	2300      	movs	r3, #0
 8003b84:	f7fc ff10 	bl	80009a8 <__aeabi_dcmpeq>
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d033      	beq.n	8003bf4 <_printf_float+0x26c>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4628      	mov	r0, r5
 8003b92:	4a35      	ldr	r2, [pc, #212]	@ (8003c68 <_printf_float+0x2e0>)
 8003b94:	47b8      	blx	r7
 8003b96:	3001      	adds	r0, #1
 8003b98:	f43f af51 	beq.w	8003a3e <_printf_float+0xb6>
 8003b9c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003ba0:	4543      	cmp	r3, r8
 8003ba2:	db02      	blt.n	8003baa <_printf_float+0x222>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	07d8      	lsls	r0, r3, #31
 8003ba8:	d50f      	bpl.n	8003bca <_printf_float+0x242>
 8003baa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bae:	4631      	mov	r1, r6
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	47b8      	blx	r7
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	f43f af42 	beq.w	8003a3e <_printf_float+0xb6>
 8003bba:	f04f 0900 	mov.w	r9, #0
 8003bbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8003bc2:	f104 0a1a 	add.w	sl, r4, #26
 8003bc6:	45c8      	cmp	r8, r9
 8003bc8:	dc09      	bgt.n	8003bde <_printf_float+0x256>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	079b      	lsls	r3, r3, #30
 8003bce:	f100 8102 	bmi.w	8003dd6 <_printf_float+0x44e>
 8003bd2:	68e0      	ldr	r0, [r4, #12]
 8003bd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003bd6:	4298      	cmp	r0, r3
 8003bd8:	bfb8      	it	lt
 8003bda:	4618      	movlt	r0, r3
 8003bdc:	e731      	b.n	8003a42 <_printf_float+0xba>
 8003bde:	2301      	movs	r3, #1
 8003be0:	4652      	mov	r2, sl
 8003be2:	4631      	mov	r1, r6
 8003be4:	4628      	mov	r0, r5
 8003be6:	47b8      	blx	r7
 8003be8:	3001      	adds	r0, #1
 8003bea:	f43f af28 	beq.w	8003a3e <_printf_float+0xb6>
 8003bee:	f109 0901 	add.w	r9, r9, #1
 8003bf2:	e7e8      	b.n	8003bc6 <_printf_float+0x23e>
 8003bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	dc38      	bgt.n	8003c6c <_printf_float+0x2e4>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	4631      	mov	r1, r6
 8003bfe:	4628      	mov	r0, r5
 8003c00:	4a19      	ldr	r2, [pc, #100]	@ (8003c68 <_printf_float+0x2e0>)
 8003c02:	47b8      	blx	r7
 8003c04:	3001      	adds	r0, #1
 8003c06:	f43f af1a 	beq.w	8003a3e <_printf_float+0xb6>
 8003c0a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003c0e:	ea59 0303 	orrs.w	r3, r9, r3
 8003c12:	d102      	bne.n	8003c1a <_printf_float+0x292>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	07d9      	lsls	r1, r3, #31
 8003c18:	d5d7      	bpl.n	8003bca <_printf_float+0x242>
 8003c1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b8      	blx	r7
 8003c24:	3001      	adds	r0, #1
 8003c26:	f43f af0a 	beq.w	8003a3e <_printf_float+0xb6>
 8003c2a:	f04f 0a00 	mov.w	sl, #0
 8003c2e:	f104 0b1a 	add.w	fp, r4, #26
 8003c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c34:	425b      	negs	r3, r3
 8003c36:	4553      	cmp	r3, sl
 8003c38:	dc01      	bgt.n	8003c3e <_printf_float+0x2b6>
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	e793      	b.n	8003b66 <_printf_float+0x1de>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	465a      	mov	r2, fp
 8003c42:	4631      	mov	r1, r6
 8003c44:	4628      	mov	r0, r5
 8003c46:	47b8      	blx	r7
 8003c48:	3001      	adds	r0, #1
 8003c4a:	f43f aef8 	beq.w	8003a3e <_printf_float+0xb6>
 8003c4e:	f10a 0a01 	add.w	sl, sl, #1
 8003c52:	e7ee      	b.n	8003c32 <_printf_float+0x2aa>
 8003c54:	7fefffff 	.word	0x7fefffff
 8003c58:	080061b6 	.word	0x080061b6
 8003c5c:	080061ba 	.word	0x080061ba
 8003c60:	080061be 	.word	0x080061be
 8003c64:	080061c2 	.word	0x080061c2
 8003c68:	080061c6 	.word	0x080061c6
 8003c6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c6e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c72:	4553      	cmp	r3, sl
 8003c74:	bfa8      	it	ge
 8003c76:	4653      	movge	r3, sl
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	4699      	mov	r9, r3
 8003c7c:	dc36      	bgt.n	8003cec <_printf_float+0x364>
 8003c7e:	f04f 0b00 	mov.w	fp, #0
 8003c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c86:	f104 021a 	add.w	r2, r4, #26
 8003c8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c8e:	eba3 0309 	sub.w	r3, r3, r9
 8003c92:	455b      	cmp	r3, fp
 8003c94:	dc31      	bgt.n	8003cfa <_printf_float+0x372>
 8003c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c98:	459a      	cmp	sl, r3
 8003c9a:	dc3a      	bgt.n	8003d12 <_printf_float+0x38a>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	07da      	lsls	r2, r3, #31
 8003ca0:	d437      	bmi.n	8003d12 <_printf_float+0x38a>
 8003ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ca4:	ebaa 0903 	sub.w	r9, sl, r3
 8003ca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003caa:	ebaa 0303 	sub.w	r3, sl, r3
 8003cae:	4599      	cmp	r9, r3
 8003cb0:	bfa8      	it	ge
 8003cb2:	4699      	movge	r9, r3
 8003cb4:	f1b9 0f00 	cmp.w	r9, #0
 8003cb8:	dc33      	bgt.n	8003d22 <_printf_float+0x39a>
 8003cba:	f04f 0800 	mov.w	r8, #0
 8003cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cc2:	f104 0b1a 	add.w	fp, r4, #26
 8003cc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003cc8:	ebaa 0303 	sub.w	r3, sl, r3
 8003ccc:	eba3 0309 	sub.w	r3, r3, r9
 8003cd0:	4543      	cmp	r3, r8
 8003cd2:	f77f af7a 	ble.w	8003bca <_printf_float+0x242>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	465a      	mov	r2, fp
 8003cda:	4631      	mov	r1, r6
 8003cdc:	4628      	mov	r0, r5
 8003cde:	47b8      	blx	r7
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	f43f aeac 	beq.w	8003a3e <_printf_float+0xb6>
 8003ce6:	f108 0801 	add.w	r8, r8, #1
 8003cea:	e7ec      	b.n	8003cc6 <_printf_float+0x33e>
 8003cec:	4642      	mov	r2, r8
 8003cee:	4631      	mov	r1, r6
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	47b8      	blx	r7
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d1c2      	bne.n	8003c7e <_printf_float+0x2f6>
 8003cf8:	e6a1      	b.n	8003a3e <_printf_float+0xb6>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	4628      	mov	r0, r5
 8003d00:	920a      	str	r2, [sp, #40]	@ 0x28
 8003d02:	47b8      	blx	r7
 8003d04:	3001      	adds	r0, #1
 8003d06:	f43f ae9a 	beq.w	8003a3e <_printf_float+0xb6>
 8003d0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d0c:	f10b 0b01 	add.w	fp, fp, #1
 8003d10:	e7bb      	b.n	8003c8a <_printf_float+0x302>
 8003d12:	4631      	mov	r1, r6
 8003d14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b8      	blx	r7
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d1c0      	bne.n	8003ca2 <_printf_float+0x31a>
 8003d20:	e68d      	b.n	8003a3e <_printf_float+0xb6>
 8003d22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d24:	464b      	mov	r3, r9
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	4442      	add	r2, r8
 8003d2c:	47b8      	blx	r7
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d1c3      	bne.n	8003cba <_printf_float+0x332>
 8003d32:	e684      	b.n	8003a3e <_printf_float+0xb6>
 8003d34:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003d38:	f1ba 0f01 	cmp.w	sl, #1
 8003d3c:	dc01      	bgt.n	8003d42 <_printf_float+0x3ba>
 8003d3e:	07db      	lsls	r3, r3, #31
 8003d40:	d536      	bpl.n	8003db0 <_printf_float+0x428>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4642      	mov	r2, r8
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b8      	blx	r7
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	f43f ae76 	beq.w	8003a3e <_printf_float+0xb6>
 8003d52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d56:	4631      	mov	r1, r6
 8003d58:	4628      	mov	r0, r5
 8003d5a:	47b8      	blx	r7
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	f43f ae6e 	beq.w	8003a3e <_printf_float+0xb6>
 8003d62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d66:	2200      	movs	r2, #0
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d6e:	f7fc fe1b 	bl	80009a8 <__aeabi_dcmpeq>
 8003d72:	b9c0      	cbnz	r0, 8003da6 <_printf_float+0x41e>
 8003d74:	4653      	mov	r3, sl
 8003d76:	f108 0201 	add.w	r2, r8, #1
 8003d7a:	4631      	mov	r1, r6
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	47b8      	blx	r7
 8003d80:	3001      	adds	r0, #1
 8003d82:	d10c      	bne.n	8003d9e <_printf_float+0x416>
 8003d84:	e65b      	b.n	8003a3e <_printf_float+0xb6>
 8003d86:	2301      	movs	r3, #1
 8003d88:	465a      	mov	r2, fp
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	47b8      	blx	r7
 8003d90:	3001      	adds	r0, #1
 8003d92:	f43f ae54 	beq.w	8003a3e <_printf_float+0xb6>
 8003d96:	f108 0801 	add.w	r8, r8, #1
 8003d9a:	45d0      	cmp	r8, sl
 8003d9c:	dbf3      	blt.n	8003d86 <_printf_float+0x3fe>
 8003d9e:	464b      	mov	r3, r9
 8003da0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003da4:	e6e0      	b.n	8003b68 <_printf_float+0x1e0>
 8003da6:	f04f 0800 	mov.w	r8, #0
 8003daa:	f104 0b1a 	add.w	fp, r4, #26
 8003dae:	e7f4      	b.n	8003d9a <_printf_float+0x412>
 8003db0:	2301      	movs	r3, #1
 8003db2:	4642      	mov	r2, r8
 8003db4:	e7e1      	b.n	8003d7a <_printf_float+0x3f2>
 8003db6:	2301      	movs	r3, #1
 8003db8:	464a      	mov	r2, r9
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	47b8      	blx	r7
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	f43f ae3c 	beq.w	8003a3e <_printf_float+0xb6>
 8003dc6:	f108 0801 	add.w	r8, r8, #1
 8003dca:	68e3      	ldr	r3, [r4, #12]
 8003dcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003dce:	1a5b      	subs	r3, r3, r1
 8003dd0:	4543      	cmp	r3, r8
 8003dd2:	dcf0      	bgt.n	8003db6 <_printf_float+0x42e>
 8003dd4:	e6fd      	b.n	8003bd2 <_printf_float+0x24a>
 8003dd6:	f04f 0800 	mov.w	r8, #0
 8003dda:	f104 0919 	add.w	r9, r4, #25
 8003dde:	e7f4      	b.n	8003dca <_printf_float+0x442>

08003de0 <_printf_common>:
 8003de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de4:	4616      	mov	r6, r2
 8003de6:	4698      	mov	r8, r3
 8003de8:	688a      	ldr	r2, [r1, #8]
 8003dea:	690b      	ldr	r3, [r1, #16]
 8003dec:	4607      	mov	r7, r0
 8003dee:	4293      	cmp	r3, r2
 8003df0:	bfb8      	it	lt
 8003df2:	4613      	movlt	r3, r2
 8003df4:	6033      	str	r3, [r6, #0]
 8003df6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e00:	b10a      	cbz	r2, 8003e06 <_printf_common+0x26>
 8003e02:	3301      	adds	r3, #1
 8003e04:	6033      	str	r3, [r6, #0]
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	0699      	lsls	r1, r3, #26
 8003e0a:	bf42      	ittt	mi
 8003e0c:	6833      	ldrmi	r3, [r6, #0]
 8003e0e:	3302      	addmi	r3, #2
 8003e10:	6033      	strmi	r3, [r6, #0]
 8003e12:	6825      	ldr	r5, [r4, #0]
 8003e14:	f015 0506 	ands.w	r5, r5, #6
 8003e18:	d106      	bne.n	8003e28 <_printf_common+0x48>
 8003e1a:	f104 0a19 	add.w	sl, r4, #25
 8003e1e:	68e3      	ldr	r3, [r4, #12]
 8003e20:	6832      	ldr	r2, [r6, #0]
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	42ab      	cmp	r3, r5
 8003e26:	dc2b      	bgt.n	8003e80 <_printf_common+0xa0>
 8003e28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	3b00      	subs	r3, #0
 8003e30:	bf18      	it	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	0692      	lsls	r2, r2, #26
 8003e36:	d430      	bmi.n	8003e9a <_printf_common+0xba>
 8003e38:	4641      	mov	r1, r8
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e40:	47c8      	blx	r9
 8003e42:	3001      	adds	r0, #1
 8003e44:	d023      	beq.n	8003e8e <_printf_common+0xae>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	6922      	ldr	r2, [r4, #16]
 8003e4a:	f003 0306 	and.w	r3, r3, #6
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	bf14      	ite	ne
 8003e52:	2500      	movne	r5, #0
 8003e54:	6833      	ldreq	r3, [r6, #0]
 8003e56:	f04f 0600 	mov.w	r6, #0
 8003e5a:	bf08      	it	eq
 8003e5c:	68e5      	ldreq	r5, [r4, #12]
 8003e5e:	f104 041a 	add.w	r4, r4, #26
 8003e62:	bf08      	it	eq
 8003e64:	1aed      	subeq	r5, r5, r3
 8003e66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e6a:	bf08      	it	eq
 8003e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e70:	4293      	cmp	r3, r2
 8003e72:	bfc4      	itt	gt
 8003e74:	1a9b      	subgt	r3, r3, r2
 8003e76:	18ed      	addgt	r5, r5, r3
 8003e78:	42b5      	cmp	r5, r6
 8003e7a:	d11a      	bne.n	8003eb2 <_printf_common+0xd2>
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	e008      	b.n	8003e92 <_printf_common+0xb2>
 8003e80:	2301      	movs	r3, #1
 8003e82:	4652      	mov	r2, sl
 8003e84:	4641      	mov	r1, r8
 8003e86:	4638      	mov	r0, r7
 8003e88:	47c8      	blx	r9
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d103      	bne.n	8003e96 <_printf_common+0xb6>
 8003e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e96:	3501      	adds	r5, #1
 8003e98:	e7c1      	b.n	8003e1e <_printf_common+0x3e>
 8003e9a:	2030      	movs	r0, #48	@ 0x30
 8003e9c:	18e1      	adds	r1, r4, r3
 8003e9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ea8:	4422      	add	r2, r4
 8003eaa:	3302      	adds	r3, #2
 8003eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003eb0:	e7c2      	b.n	8003e38 <_printf_common+0x58>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	4638      	mov	r0, r7
 8003eba:	47c8      	blx	r9
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d0e6      	beq.n	8003e8e <_printf_common+0xae>
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7d9      	b.n	8003e78 <_printf_common+0x98>

08003ec4 <_printf_i>:
 8003ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec8:	7e0f      	ldrb	r7, [r1, #24]
 8003eca:	4691      	mov	r9, r2
 8003ecc:	2f78      	cmp	r7, #120	@ 0x78
 8003ece:	4680      	mov	r8, r0
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	469a      	mov	sl, r3
 8003ed4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ed6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eda:	d807      	bhi.n	8003eec <_printf_i+0x28>
 8003edc:	2f62      	cmp	r7, #98	@ 0x62
 8003ede:	d80a      	bhi.n	8003ef6 <_printf_i+0x32>
 8003ee0:	2f00      	cmp	r7, #0
 8003ee2:	f000 80d3 	beq.w	800408c <_printf_i+0x1c8>
 8003ee6:	2f58      	cmp	r7, #88	@ 0x58
 8003ee8:	f000 80ba 	beq.w	8004060 <_printf_i+0x19c>
 8003eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ef0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ef4:	e03a      	b.n	8003f6c <_printf_i+0xa8>
 8003ef6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003efa:	2b15      	cmp	r3, #21
 8003efc:	d8f6      	bhi.n	8003eec <_printf_i+0x28>
 8003efe:	a101      	add	r1, pc, #4	@ (adr r1, 8003f04 <_printf_i+0x40>)
 8003f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f04:	08003f5d 	.word	0x08003f5d
 8003f08:	08003f71 	.word	0x08003f71
 8003f0c:	08003eed 	.word	0x08003eed
 8003f10:	08003eed 	.word	0x08003eed
 8003f14:	08003eed 	.word	0x08003eed
 8003f18:	08003eed 	.word	0x08003eed
 8003f1c:	08003f71 	.word	0x08003f71
 8003f20:	08003eed 	.word	0x08003eed
 8003f24:	08003eed 	.word	0x08003eed
 8003f28:	08003eed 	.word	0x08003eed
 8003f2c:	08003eed 	.word	0x08003eed
 8003f30:	08004073 	.word	0x08004073
 8003f34:	08003f9b 	.word	0x08003f9b
 8003f38:	0800402d 	.word	0x0800402d
 8003f3c:	08003eed 	.word	0x08003eed
 8003f40:	08003eed 	.word	0x08003eed
 8003f44:	08004095 	.word	0x08004095
 8003f48:	08003eed 	.word	0x08003eed
 8003f4c:	08003f9b 	.word	0x08003f9b
 8003f50:	08003eed 	.word	0x08003eed
 8003f54:	08003eed 	.word	0x08003eed
 8003f58:	08004035 	.word	0x08004035
 8003f5c:	6833      	ldr	r3, [r6, #0]
 8003f5e:	1d1a      	adds	r2, r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6032      	str	r2, [r6, #0]
 8003f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e09e      	b.n	80040ae <_printf_i+0x1ea>
 8003f70:	6833      	ldr	r3, [r6, #0]
 8003f72:	6820      	ldr	r0, [r4, #0]
 8003f74:	1d19      	adds	r1, r3, #4
 8003f76:	6031      	str	r1, [r6, #0]
 8003f78:	0606      	lsls	r6, r0, #24
 8003f7a:	d501      	bpl.n	8003f80 <_printf_i+0xbc>
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	e003      	b.n	8003f88 <_printf_i+0xc4>
 8003f80:	0645      	lsls	r5, r0, #25
 8003f82:	d5fb      	bpl.n	8003f7c <_printf_i+0xb8>
 8003f84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	da03      	bge.n	8003f94 <_printf_i+0xd0>
 8003f8c:	232d      	movs	r3, #45	@ 0x2d
 8003f8e:	426d      	negs	r5, r5
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f94:	230a      	movs	r3, #10
 8003f96:	4859      	ldr	r0, [pc, #356]	@ (80040fc <_printf_i+0x238>)
 8003f98:	e011      	b.n	8003fbe <_printf_i+0xfa>
 8003f9a:	6821      	ldr	r1, [r4, #0]
 8003f9c:	6833      	ldr	r3, [r6, #0]
 8003f9e:	0608      	lsls	r0, r1, #24
 8003fa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fa4:	d402      	bmi.n	8003fac <_printf_i+0xe8>
 8003fa6:	0649      	lsls	r1, r1, #25
 8003fa8:	bf48      	it	mi
 8003faa:	b2ad      	uxthmi	r5, r5
 8003fac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fae:	6033      	str	r3, [r6, #0]
 8003fb0:	bf14      	ite	ne
 8003fb2:	230a      	movne	r3, #10
 8003fb4:	2308      	moveq	r3, #8
 8003fb6:	4851      	ldr	r0, [pc, #324]	@ (80040fc <_printf_i+0x238>)
 8003fb8:	2100      	movs	r1, #0
 8003fba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fbe:	6866      	ldr	r6, [r4, #4]
 8003fc0:	2e00      	cmp	r6, #0
 8003fc2:	bfa8      	it	ge
 8003fc4:	6821      	ldrge	r1, [r4, #0]
 8003fc6:	60a6      	str	r6, [r4, #8]
 8003fc8:	bfa4      	itt	ge
 8003fca:	f021 0104 	bicge.w	r1, r1, #4
 8003fce:	6021      	strge	r1, [r4, #0]
 8003fd0:	b90d      	cbnz	r5, 8003fd6 <_printf_i+0x112>
 8003fd2:	2e00      	cmp	r6, #0
 8003fd4:	d04b      	beq.n	800406e <_printf_i+0x1aa>
 8003fd6:	4616      	mov	r6, r2
 8003fd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fdc:	fb03 5711 	mls	r7, r3, r1, r5
 8003fe0:	5dc7      	ldrb	r7, [r0, r7]
 8003fe2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fe6:	462f      	mov	r7, r5
 8003fe8:	42bb      	cmp	r3, r7
 8003fea:	460d      	mov	r5, r1
 8003fec:	d9f4      	bls.n	8003fd8 <_printf_i+0x114>
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d10b      	bne.n	800400a <_printf_i+0x146>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	07df      	lsls	r7, r3, #31
 8003ff6:	d508      	bpl.n	800400a <_printf_i+0x146>
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	6861      	ldr	r1, [r4, #4]
 8003ffc:	4299      	cmp	r1, r3
 8003ffe:	bfde      	ittt	le
 8004000:	2330      	movle	r3, #48	@ 0x30
 8004002:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004006:	f106 36ff 	addle.w	r6, r6, #4294967295
 800400a:	1b92      	subs	r2, r2, r6
 800400c:	6122      	str	r2, [r4, #16]
 800400e:	464b      	mov	r3, r9
 8004010:	4621      	mov	r1, r4
 8004012:	4640      	mov	r0, r8
 8004014:	f8cd a000 	str.w	sl, [sp]
 8004018:	aa03      	add	r2, sp, #12
 800401a:	f7ff fee1 	bl	8003de0 <_printf_common>
 800401e:	3001      	adds	r0, #1
 8004020:	d14a      	bne.n	80040b8 <_printf_i+0x1f4>
 8004022:	f04f 30ff 	mov.w	r0, #4294967295
 8004026:	b004      	add	sp, #16
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	f043 0320 	orr.w	r3, r3, #32
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	2778      	movs	r7, #120	@ 0x78
 8004036:	4832      	ldr	r0, [pc, #200]	@ (8004100 <_printf_i+0x23c>)
 8004038:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	6831      	ldr	r1, [r6, #0]
 8004040:	061f      	lsls	r7, r3, #24
 8004042:	f851 5b04 	ldr.w	r5, [r1], #4
 8004046:	d402      	bmi.n	800404e <_printf_i+0x18a>
 8004048:	065f      	lsls	r7, r3, #25
 800404a:	bf48      	it	mi
 800404c:	b2ad      	uxthmi	r5, r5
 800404e:	6031      	str	r1, [r6, #0]
 8004050:	07d9      	lsls	r1, r3, #31
 8004052:	bf44      	itt	mi
 8004054:	f043 0320 	orrmi.w	r3, r3, #32
 8004058:	6023      	strmi	r3, [r4, #0]
 800405a:	b11d      	cbz	r5, 8004064 <_printf_i+0x1a0>
 800405c:	2310      	movs	r3, #16
 800405e:	e7ab      	b.n	8003fb8 <_printf_i+0xf4>
 8004060:	4826      	ldr	r0, [pc, #152]	@ (80040fc <_printf_i+0x238>)
 8004062:	e7e9      	b.n	8004038 <_printf_i+0x174>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	f023 0320 	bic.w	r3, r3, #32
 800406a:	6023      	str	r3, [r4, #0]
 800406c:	e7f6      	b.n	800405c <_printf_i+0x198>
 800406e:	4616      	mov	r6, r2
 8004070:	e7bd      	b.n	8003fee <_printf_i+0x12a>
 8004072:	6833      	ldr	r3, [r6, #0]
 8004074:	6825      	ldr	r5, [r4, #0]
 8004076:	1d18      	adds	r0, r3, #4
 8004078:	6961      	ldr	r1, [r4, #20]
 800407a:	6030      	str	r0, [r6, #0]
 800407c:	062e      	lsls	r6, r5, #24
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	d501      	bpl.n	8004086 <_printf_i+0x1c2>
 8004082:	6019      	str	r1, [r3, #0]
 8004084:	e002      	b.n	800408c <_printf_i+0x1c8>
 8004086:	0668      	lsls	r0, r5, #25
 8004088:	d5fb      	bpl.n	8004082 <_printf_i+0x1be>
 800408a:	8019      	strh	r1, [r3, #0]
 800408c:	2300      	movs	r3, #0
 800408e:	4616      	mov	r6, r2
 8004090:	6123      	str	r3, [r4, #16]
 8004092:	e7bc      	b.n	800400e <_printf_i+0x14a>
 8004094:	6833      	ldr	r3, [r6, #0]
 8004096:	2100      	movs	r1, #0
 8004098:	1d1a      	adds	r2, r3, #4
 800409a:	6032      	str	r2, [r6, #0]
 800409c:	681e      	ldr	r6, [r3, #0]
 800409e:	6862      	ldr	r2, [r4, #4]
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 f9b4 	bl	800440e <memchr>
 80040a6:	b108      	cbz	r0, 80040ac <_printf_i+0x1e8>
 80040a8:	1b80      	subs	r0, r0, r6
 80040aa:	6060      	str	r0, [r4, #4]
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	6123      	str	r3, [r4, #16]
 80040b0:	2300      	movs	r3, #0
 80040b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040b6:	e7aa      	b.n	800400e <_printf_i+0x14a>
 80040b8:	4632      	mov	r2, r6
 80040ba:	4649      	mov	r1, r9
 80040bc:	4640      	mov	r0, r8
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	47d0      	blx	sl
 80040c2:	3001      	adds	r0, #1
 80040c4:	d0ad      	beq.n	8004022 <_printf_i+0x15e>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	079b      	lsls	r3, r3, #30
 80040ca:	d413      	bmi.n	80040f4 <_printf_i+0x230>
 80040cc:	68e0      	ldr	r0, [r4, #12]
 80040ce:	9b03      	ldr	r3, [sp, #12]
 80040d0:	4298      	cmp	r0, r3
 80040d2:	bfb8      	it	lt
 80040d4:	4618      	movlt	r0, r3
 80040d6:	e7a6      	b.n	8004026 <_printf_i+0x162>
 80040d8:	2301      	movs	r3, #1
 80040da:	4632      	mov	r2, r6
 80040dc:	4649      	mov	r1, r9
 80040de:	4640      	mov	r0, r8
 80040e0:	47d0      	blx	sl
 80040e2:	3001      	adds	r0, #1
 80040e4:	d09d      	beq.n	8004022 <_printf_i+0x15e>
 80040e6:	3501      	adds	r5, #1
 80040e8:	68e3      	ldr	r3, [r4, #12]
 80040ea:	9903      	ldr	r1, [sp, #12]
 80040ec:	1a5b      	subs	r3, r3, r1
 80040ee:	42ab      	cmp	r3, r5
 80040f0:	dcf2      	bgt.n	80040d8 <_printf_i+0x214>
 80040f2:	e7eb      	b.n	80040cc <_printf_i+0x208>
 80040f4:	2500      	movs	r5, #0
 80040f6:	f104 0619 	add.w	r6, r4, #25
 80040fa:	e7f5      	b.n	80040e8 <_printf_i+0x224>
 80040fc:	080061c8 	.word	0x080061c8
 8004100:	080061d9 	.word	0x080061d9

08004104 <std>:
 8004104:	2300      	movs	r3, #0
 8004106:	b510      	push	{r4, lr}
 8004108:	4604      	mov	r4, r0
 800410a:	e9c0 3300 	strd	r3, r3, [r0]
 800410e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004112:	6083      	str	r3, [r0, #8]
 8004114:	8181      	strh	r1, [r0, #12]
 8004116:	6643      	str	r3, [r0, #100]	@ 0x64
 8004118:	81c2      	strh	r2, [r0, #14]
 800411a:	6183      	str	r3, [r0, #24]
 800411c:	4619      	mov	r1, r3
 800411e:	2208      	movs	r2, #8
 8004120:	305c      	adds	r0, #92	@ 0x5c
 8004122:	f000 f8f4 	bl	800430e <memset>
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <std+0x58>)
 8004128:	6224      	str	r4, [r4, #32]
 800412a:	6263      	str	r3, [r4, #36]	@ 0x24
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <std+0x5c>)
 800412e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004130:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <std+0x60>)
 8004132:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004134:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <std+0x64>)
 8004136:	6323      	str	r3, [r4, #48]	@ 0x30
 8004138:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <std+0x68>)
 800413a:	429c      	cmp	r4, r3
 800413c:	d006      	beq.n	800414c <std+0x48>
 800413e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004142:	4294      	cmp	r4, r2
 8004144:	d002      	beq.n	800414c <std+0x48>
 8004146:	33d0      	adds	r3, #208	@ 0xd0
 8004148:	429c      	cmp	r4, r3
 800414a:	d105      	bne.n	8004158 <std+0x54>
 800414c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004154:	f000 b958 	b.w	8004408 <__retarget_lock_init_recursive>
 8004158:	bd10      	pop	{r4, pc}
 800415a:	bf00      	nop
 800415c:	08004289 	.word	0x08004289
 8004160:	080042ab 	.word	0x080042ab
 8004164:	080042e3 	.word	0x080042e3
 8004168:	08004307 	.word	0x08004307
 800416c:	2000033c 	.word	0x2000033c

08004170 <stdio_exit_handler>:
 8004170:	4a02      	ldr	r2, [pc, #8]	@ (800417c <stdio_exit_handler+0xc>)
 8004172:	4903      	ldr	r1, [pc, #12]	@ (8004180 <stdio_exit_handler+0x10>)
 8004174:	4803      	ldr	r0, [pc, #12]	@ (8004184 <stdio_exit_handler+0x14>)
 8004176:	f000 b869 	b.w	800424c <_fwalk_sglue>
 800417a:	bf00      	nop
 800417c:	20000020 	.word	0x20000020
 8004180:	08005acd 	.word	0x08005acd
 8004184:	20000030 	.word	0x20000030

08004188 <cleanup_stdio>:
 8004188:	6841      	ldr	r1, [r0, #4]
 800418a:	4b0c      	ldr	r3, [pc, #48]	@ (80041bc <cleanup_stdio+0x34>)
 800418c:	b510      	push	{r4, lr}
 800418e:	4299      	cmp	r1, r3
 8004190:	4604      	mov	r4, r0
 8004192:	d001      	beq.n	8004198 <cleanup_stdio+0x10>
 8004194:	f001 fc9a 	bl	8005acc <_fflush_r>
 8004198:	68a1      	ldr	r1, [r4, #8]
 800419a:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <cleanup_stdio+0x38>)
 800419c:	4299      	cmp	r1, r3
 800419e:	d002      	beq.n	80041a6 <cleanup_stdio+0x1e>
 80041a0:	4620      	mov	r0, r4
 80041a2:	f001 fc93 	bl	8005acc <_fflush_r>
 80041a6:	68e1      	ldr	r1, [r4, #12]
 80041a8:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <cleanup_stdio+0x3c>)
 80041aa:	4299      	cmp	r1, r3
 80041ac:	d004      	beq.n	80041b8 <cleanup_stdio+0x30>
 80041ae:	4620      	mov	r0, r4
 80041b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b4:	f001 bc8a 	b.w	8005acc <_fflush_r>
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	bf00      	nop
 80041bc:	2000033c 	.word	0x2000033c
 80041c0:	200003a4 	.word	0x200003a4
 80041c4:	2000040c 	.word	0x2000040c

080041c8 <global_stdio_init.part.0>:
 80041c8:	b510      	push	{r4, lr}
 80041ca:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <global_stdio_init.part.0+0x30>)
 80041cc:	4c0b      	ldr	r4, [pc, #44]	@ (80041fc <global_stdio_init.part.0+0x34>)
 80041ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004200 <global_stdio_init.part.0+0x38>)
 80041d0:	4620      	mov	r0, r4
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	2104      	movs	r1, #4
 80041d6:	2200      	movs	r2, #0
 80041d8:	f7ff ff94 	bl	8004104 <std>
 80041dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041e0:	2201      	movs	r2, #1
 80041e2:	2109      	movs	r1, #9
 80041e4:	f7ff ff8e 	bl	8004104 <std>
 80041e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041ec:	2202      	movs	r2, #2
 80041ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f2:	2112      	movs	r1, #18
 80041f4:	f7ff bf86 	b.w	8004104 <std>
 80041f8:	20000474 	.word	0x20000474
 80041fc:	2000033c 	.word	0x2000033c
 8004200:	08004171 	.word	0x08004171

08004204 <__sfp_lock_acquire>:
 8004204:	4801      	ldr	r0, [pc, #4]	@ (800420c <__sfp_lock_acquire+0x8>)
 8004206:	f000 b900 	b.w	800440a <__retarget_lock_acquire_recursive>
 800420a:	bf00      	nop
 800420c:	2000047d 	.word	0x2000047d

08004210 <__sfp_lock_release>:
 8004210:	4801      	ldr	r0, [pc, #4]	@ (8004218 <__sfp_lock_release+0x8>)
 8004212:	f000 b8fb 	b.w	800440c <__retarget_lock_release_recursive>
 8004216:	bf00      	nop
 8004218:	2000047d 	.word	0x2000047d

0800421c <__sinit>:
 800421c:	b510      	push	{r4, lr}
 800421e:	4604      	mov	r4, r0
 8004220:	f7ff fff0 	bl	8004204 <__sfp_lock_acquire>
 8004224:	6a23      	ldr	r3, [r4, #32]
 8004226:	b11b      	cbz	r3, 8004230 <__sinit+0x14>
 8004228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422c:	f7ff bff0 	b.w	8004210 <__sfp_lock_release>
 8004230:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <__sinit+0x28>)
 8004232:	6223      	str	r3, [r4, #32]
 8004234:	4b04      	ldr	r3, [pc, #16]	@ (8004248 <__sinit+0x2c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f5      	bne.n	8004228 <__sinit+0xc>
 800423c:	f7ff ffc4 	bl	80041c8 <global_stdio_init.part.0>
 8004240:	e7f2      	b.n	8004228 <__sinit+0xc>
 8004242:	bf00      	nop
 8004244:	08004189 	.word	0x08004189
 8004248:	20000474 	.word	0x20000474

0800424c <_fwalk_sglue>:
 800424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004250:	4607      	mov	r7, r0
 8004252:	4688      	mov	r8, r1
 8004254:	4614      	mov	r4, r2
 8004256:	2600      	movs	r6, #0
 8004258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800425c:	f1b9 0901 	subs.w	r9, r9, #1
 8004260:	d505      	bpl.n	800426e <_fwalk_sglue+0x22>
 8004262:	6824      	ldr	r4, [r4, #0]
 8004264:	2c00      	cmp	r4, #0
 8004266:	d1f7      	bne.n	8004258 <_fwalk_sglue+0xc>
 8004268:	4630      	mov	r0, r6
 800426a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800426e:	89ab      	ldrh	r3, [r5, #12]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d907      	bls.n	8004284 <_fwalk_sglue+0x38>
 8004274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004278:	3301      	adds	r3, #1
 800427a:	d003      	beq.n	8004284 <_fwalk_sglue+0x38>
 800427c:	4629      	mov	r1, r5
 800427e:	4638      	mov	r0, r7
 8004280:	47c0      	blx	r8
 8004282:	4306      	orrs	r6, r0
 8004284:	3568      	adds	r5, #104	@ 0x68
 8004286:	e7e9      	b.n	800425c <_fwalk_sglue+0x10>

08004288 <__sread>:
 8004288:	b510      	push	{r4, lr}
 800428a:	460c      	mov	r4, r1
 800428c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004290:	f000 f86c 	bl	800436c <_read_r>
 8004294:	2800      	cmp	r0, #0
 8004296:	bfab      	itete	ge
 8004298:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800429a:	89a3      	ldrhlt	r3, [r4, #12]
 800429c:	181b      	addge	r3, r3, r0
 800429e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042a2:	bfac      	ite	ge
 80042a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042a6:	81a3      	strhlt	r3, [r4, #12]
 80042a8:	bd10      	pop	{r4, pc}

080042aa <__swrite>:
 80042aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ae:	461f      	mov	r7, r3
 80042b0:	898b      	ldrh	r3, [r1, #12]
 80042b2:	4605      	mov	r5, r0
 80042b4:	05db      	lsls	r3, r3, #23
 80042b6:	460c      	mov	r4, r1
 80042b8:	4616      	mov	r6, r2
 80042ba:	d505      	bpl.n	80042c8 <__swrite+0x1e>
 80042bc:	2302      	movs	r3, #2
 80042be:	2200      	movs	r2, #0
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	f000 f840 	bl	8004348 <_lseek_r>
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	4632      	mov	r2, r6
 80042cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	4628      	mov	r0, r5
 80042d4:	463b      	mov	r3, r7
 80042d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042de:	f000 b857 	b.w	8004390 <_write_r>

080042e2 <__sseek>:
 80042e2:	b510      	push	{r4, lr}
 80042e4:	460c      	mov	r4, r1
 80042e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ea:	f000 f82d 	bl	8004348 <_lseek_r>
 80042ee:	1c43      	adds	r3, r0, #1
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	bf15      	itete	ne
 80042f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80042f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80042fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80042fe:	81a3      	strheq	r3, [r4, #12]
 8004300:	bf18      	it	ne
 8004302:	81a3      	strhne	r3, [r4, #12]
 8004304:	bd10      	pop	{r4, pc}

08004306 <__sclose>:
 8004306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800430a:	f000 b80d 	b.w	8004328 <_close_r>

0800430e <memset>:
 800430e:	4603      	mov	r3, r0
 8004310:	4402      	add	r2, r0
 8004312:	4293      	cmp	r3, r2
 8004314:	d100      	bne.n	8004318 <memset+0xa>
 8004316:	4770      	bx	lr
 8004318:	f803 1b01 	strb.w	r1, [r3], #1
 800431c:	e7f9      	b.n	8004312 <memset+0x4>
	...

08004320 <_localeconv_r>:
 8004320:	4800      	ldr	r0, [pc, #0]	@ (8004324 <_localeconv_r+0x4>)
 8004322:	4770      	bx	lr
 8004324:	2000016c 	.word	0x2000016c

08004328 <_close_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	2300      	movs	r3, #0
 800432c:	4d05      	ldr	r5, [pc, #20]	@ (8004344 <_close_r+0x1c>)
 800432e:	4604      	mov	r4, r0
 8004330:	4608      	mov	r0, r1
 8004332:	602b      	str	r3, [r5, #0]
 8004334:	f7fd f8f3 	bl	800151e <_close>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	d102      	bne.n	8004342 <_close_r+0x1a>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	b103      	cbz	r3, 8004342 <_close_r+0x1a>
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	bd38      	pop	{r3, r4, r5, pc}
 8004344:	20000478 	.word	0x20000478

08004348 <_lseek_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4604      	mov	r4, r0
 800434c:	4608      	mov	r0, r1
 800434e:	4611      	mov	r1, r2
 8004350:	2200      	movs	r2, #0
 8004352:	4d05      	ldr	r5, [pc, #20]	@ (8004368 <_lseek_r+0x20>)
 8004354:	602a      	str	r2, [r5, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	f7fd f905 	bl	8001566 <_lseek>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d102      	bne.n	8004366 <_lseek_r+0x1e>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	b103      	cbz	r3, 8004366 <_lseek_r+0x1e>
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	20000478 	.word	0x20000478

0800436c <_read_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4604      	mov	r4, r0
 8004370:	4608      	mov	r0, r1
 8004372:	4611      	mov	r1, r2
 8004374:	2200      	movs	r2, #0
 8004376:	4d05      	ldr	r5, [pc, #20]	@ (800438c <_read_r+0x20>)
 8004378:	602a      	str	r2, [r5, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	f7fd f896 	bl	80014ac <_read>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d102      	bne.n	800438a <_read_r+0x1e>
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	b103      	cbz	r3, 800438a <_read_r+0x1e>
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	bd38      	pop	{r3, r4, r5, pc}
 800438c:	20000478 	.word	0x20000478

08004390 <_write_r>:
 8004390:	b538      	push	{r3, r4, r5, lr}
 8004392:	4604      	mov	r4, r0
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	2200      	movs	r2, #0
 800439a:	4d05      	ldr	r5, [pc, #20]	@ (80043b0 <_write_r+0x20>)
 800439c:	602a      	str	r2, [r5, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	f7fd f8a1 	bl	80014e6 <_write>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_write_r+0x1e>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_write_r+0x1e>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000478 	.word	0x20000478

080043b4 <__errno>:
 80043b4:	4b01      	ldr	r3, [pc, #4]	@ (80043bc <__errno+0x8>)
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	2000002c 	.word	0x2000002c

080043c0 <__libc_init_array>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	2600      	movs	r6, #0
 80043c4:	4d0c      	ldr	r5, [pc, #48]	@ (80043f8 <__libc_init_array+0x38>)
 80043c6:	4c0d      	ldr	r4, [pc, #52]	@ (80043fc <__libc_init_array+0x3c>)
 80043c8:	1b64      	subs	r4, r4, r5
 80043ca:	10a4      	asrs	r4, r4, #2
 80043cc:	42a6      	cmp	r6, r4
 80043ce:	d109      	bne.n	80043e4 <__libc_init_array+0x24>
 80043d0:	f001 fec8 	bl	8006164 <_init>
 80043d4:	2600      	movs	r6, #0
 80043d6:	4d0a      	ldr	r5, [pc, #40]	@ (8004400 <__libc_init_array+0x40>)
 80043d8:	4c0a      	ldr	r4, [pc, #40]	@ (8004404 <__libc_init_array+0x44>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	42a6      	cmp	r6, r4
 80043e0:	d105      	bne.n	80043ee <__libc_init_array+0x2e>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e8:	4798      	blx	r3
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7ee      	b.n	80043cc <__libc_init_array+0xc>
 80043ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f2:	4798      	blx	r3
 80043f4:	3601      	adds	r6, #1
 80043f6:	e7f2      	b.n	80043de <__libc_init_array+0x1e>
 80043f8:	08006530 	.word	0x08006530
 80043fc:	08006530 	.word	0x08006530
 8004400:	08006530 	.word	0x08006530
 8004404:	08006534 	.word	0x08006534

08004408 <__retarget_lock_init_recursive>:
 8004408:	4770      	bx	lr

0800440a <__retarget_lock_acquire_recursive>:
 800440a:	4770      	bx	lr

0800440c <__retarget_lock_release_recursive>:
 800440c:	4770      	bx	lr

0800440e <memchr>:
 800440e:	4603      	mov	r3, r0
 8004410:	b510      	push	{r4, lr}
 8004412:	b2c9      	uxtb	r1, r1
 8004414:	4402      	add	r2, r0
 8004416:	4293      	cmp	r3, r2
 8004418:	4618      	mov	r0, r3
 800441a:	d101      	bne.n	8004420 <memchr+0x12>
 800441c:	2000      	movs	r0, #0
 800441e:	e003      	b.n	8004428 <memchr+0x1a>
 8004420:	7804      	ldrb	r4, [r0, #0]
 8004422:	3301      	adds	r3, #1
 8004424:	428c      	cmp	r4, r1
 8004426:	d1f6      	bne.n	8004416 <memchr+0x8>
 8004428:	bd10      	pop	{r4, pc}

0800442a <quorem>:
 800442a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442e:	6903      	ldr	r3, [r0, #16]
 8004430:	690c      	ldr	r4, [r1, #16]
 8004432:	4607      	mov	r7, r0
 8004434:	42a3      	cmp	r3, r4
 8004436:	db7e      	blt.n	8004536 <quorem+0x10c>
 8004438:	3c01      	subs	r4, #1
 800443a:	00a3      	lsls	r3, r4, #2
 800443c:	f100 0514 	add.w	r5, r0, #20
 8004440:	f101 0814 	add.w	r8, r1, #20
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004450:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004454:	3301      	adds	r3, #1
 8004456:	429a      	cmp	r2, r3
 8004458:	fbb2 f6f3 	udiv	r6, r2, r3
 800445c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004460:	d32e      	bcc.n	80044c0 <quorem+0x96>
 8004462:	f04f 0a00 	mov.w	sl, #0
 8004466:	46c4      	mov	ip, r8
 8004468:	46ae      	mov	lr, r5
 800446a:	46d3      	mov	fp, sl
 800446c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004470:	b298      	uxth	r0, r3
 8004472:	fb06 a000 	mla	r0, r6, r0, sl
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	0c02      	lsrs	r2, r0, #16
 800447a:	fb06 2303 	mla	r3, r6, r3, r2
 800447e:	f8de 2000 	ldr.w	r2, [lr]
 8004482:	b280      	uxth	r0, r0
 8004484:	b292      	uxth	r2, r2
 8004486:	1a12      	subs	r2, r2, r0
 8004488:	445a      	add	r2, fp
 800448a:	f8de 0000 	ldr.w	r0, [lr]
 800448e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004492:	b29b      	uxth	r3, r3
 8004494:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004498:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800449c:	b292      	uxth	r2, r2
 800449e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80044a2:	45e1      	cmp	r9, ip
 80044a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80044a8:	f84e 2b04 	str.w	r2, [lr], #4
 80044ac:	d2de      	bcs.n	800446c <quorem+0x42>
 80044ae:	9b00      	ldr	r3, [sp, #0]
 80044b0:	58eb      	ldr	r3, [r5, r3]
 80044b2:	b92b      	cbnz	r3, 80044c0 <quorem+0x96>
 80044b4:	9b01      	ldr	r3, [sp, #4]
 80044b6:	3b04      	subs	r3, #4
 80044b8:	429d      	cmp	r5, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	d32f      	bcc.n	800451e <quorem+0xf4>
 80044be:	613c      	str	r4, [r7, #16]
 80044c0:	4638      	mov	r0, r7
 80044c2:	f001 f97b 	bl	80057bc <__mcmp>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	db25      	blt.n	8004516 <quorem+0xec>
 80044ca:	4629      	mov	r1, r5
 80044cc:	2000      	movs	r0, #0
 80044ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80044d2:	f8d1 c000 	ldr.w	ip, [r1]
 80044d6:	fa1f fe82 	uxth.w	lr, r2
 80044da:	fa1f f38c 	uxth.w	r3, ip
 80044de:	eba3 030e 	sub.w	r3, r3, lr
 80044e2:	4403      	add	r3, r0
 80044e4:	0c12      	lsrs	r2, r2, #16
 80044e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80044ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044f4:	45c1      	cmp	r9, r8
 80044f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80044fa:	f841 3b04 	str.w	r3, [r1], #4
 80044fe:	d2e6      	bcs.n	80044ce <quorem+0xa4>
 8004500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004504:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004508:	b922      	cbnz	r2, 8004514 <quorem+0xea>
 800450a:	3b04      	subs	r3, #4
 800450c:	429d      	cmp	r5, r3
 800450e:	461a      	mov	r2, r3
 8004510:	d30b      	bcc.n	800452a <quorem+0x100>
 8004512:	613c      	str	r4, [r7, #16]
 8004514:	3601      	adds	r6, #1
 8004516:	4630      	mov	r0, r6
 8004518:	b003      	add	sp, #12
 800451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	3b04      	subs	r3, #4
 8004522:	2a00      	cmp	r2, #0
 8004524:	d1cb      	bne.n	80044be <quorem+0x94>
 8004526:	3c01      	subs	r4, #1
 8004528:	e7c6      	b.n	80044b8 <quorem+0x8e>
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	3b04      	subs	r3, #4
 800452e:	2a00      	cmp	r2, #0
 8004530:	d1ef      	bne.n	8004512 <quorem+0xe8>
 8004532:	3c01      	subs	r4, #1
 8004534:	e7ea      	b.n	800450c <quorem+0xe2>
 8004536:	2000      	movs	r0, #0
 8004538:	e7ee      	b.n	8004518 <quorem+0xee>
 800453a:	0000      	movs	r0, r0
 800453c:	0000      	movs	r0, r0
	...

08004540 <_dtoa_r>:
 8004540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	4614      	mov	r4, r2
 8004546:	461d      	mov	r5, r3
 8004548:	69c7      	ldr	r7, [r0, #28]
 800454a:	b097      	sub	sp, #92	@ 0x5c
 800454c:	4683      	mov	fp, r0
 800454e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004552:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004554:	b97f      	cbnz	r7, 8004576 <_dtoa_r+0x36>
 8004556:	2010      	movs	r0, #16
 8004558:	f000 fe02 	bl	8005160 <malloc>
 800455c:	4602      	mov	r2, r0
 800455e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004562:	b920      	cbnz	r0, 800456e <_dtoa_r+0x2e>
 8004564:	21ef      	movs	r1, #239	@ 0xef
 8004566:	4ba8      	ldr	r3, [pc, #672]	@ (8004808 <_dtoa_r+0x2c8>)
 8004568:	48a8      	ldr	r0, [pc, #672]	@ (800480c <_dtoa_r+0x2cc>)
 800456a:	f001 faf5 	bl	8005b58 <__assert_func>
 800456e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004572:	6007      	str	r7, [r0, #0]
 8004574:	60c7      	str	r7, [r0, #12]
 8004576:	f8db 301c 	ldr.w	r3, [fp, #28]
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	b159      	cbz	r1, 8004596 <_dtoa_r+0x56>
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	2301      	movs	r3, #1
 8004582:	4093      	lsls	r3, r2
 8004584:	604a      	str	r2, [r1, #4]
 8004586:	608b      	str	r3, [r1, #8]
 8004588:	4658      	mov	r0, fp
 800458a:	f000 fedf 	bl	800534c <_Bfree>
 800458e:	2200      	movs	r2, #0
 8004590:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	1e2b      	subs	r3, r5, #0
 8004598:	bfaf      	iteee	ge
 800459a:	2300      	movge	r3, #0
 800459c:	2201      	movlt	r2, #1
 800459e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80045a2:	9303      	strlt	r3, [sp, #12]
 80045a4:	bfa8      	it	ge
 80045a6:	6033      	strge	r3, [r6, #0]
 80045a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80045ac:	4b98      	ldr	r3, [pc, #608]	@ (8004810 <_dtoa_r+0x2d0>)
 80045ae:	bfb8      	it	lt
 80045b0:	6032      	strlt	r2, [r6, #0]
 80045b2:	ea33 0308 	bics.w	r3, r3, r8
 80045b6:	d112      	bne.n	80045de <_dtoa_r+0x9e>
 80045b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80045bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80045c4:	4323      	orrs	r3, r4
 80045c6:	f000 8550 	beq.w	800506a <_dtoa_r+0xb2a>
 80045ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80045cc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004814 <_dtoa_r+0x2d4>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8552 	beq.w	800507a <_dtoa_r+0xb3a>
 80045d6:	f10a 0303 	add.w	r3, sl, #3
 80045da:	f000 bd4c 	b.w	8005076 <_dtoa_r+0xb36>
 80045de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80045e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045ea:	2200      	movs	r2, #0
 80045ec:	2300      	movs	r3, #0
 80045ee:	f7fc f9db 	bl	80009a8 <__aeabi_dcmpeq>
 80045f2:	4607      	mov	r7, r0
 80045f4:	b158      	cbz	r0, 800460e <_dtoa_r+0xce>
 80045f6:	2301      	movs	r3, #1
 80045f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80045fe:	b113      	cbz	r3, 8004606 <_dtoa_r+0xc6>
 8004600:	4b85      	ldr	r3, [pc, #532]	@ (8004818 <_dtoa_r+0x2d8>)
 8004602:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800481c <_dtoa_r+0x2dc>
 800460a:	f000 bd36 	b.w	800507a <_dtoa_r+0xb3a>
 800460e:	ab14      	add	r3, sp, #80	@ 0x50
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	ab15      	add	r3, sp, #84	@ 0x54
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	4658      	mov	r0, fp
 8004618:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800461c:	f001 f97e 	bl	800591c <__d2b>
 8004620:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004624:	4681      	mov	r9, r0
 8004626:	2e00      	cmp	r6, #0
 8004628:	d077      	beq.n	800471a <_dtoa_r+0x1da>
 800462a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800462e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004630:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004638:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800463c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004640:	9712      	str	r7, [sp, #72]	@ 0x48
 8004642:	4619      	mov	r1, r3
 8004644:	2200      	movs	r2, #0
 8004646:	4b76      	ldr	r3, [pc, #472]	@ (8004820 <_dtoa_r+0x2e0>)
 8004648:	f7fb fd8e 	bl	8000168 <__aeabi_dsub>
 800464c:	a368      	add	r3, pc, #416	@ (adr r3, 80047f0 <_dtoa_r+0x2b0>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f7fb ff41 	bl	80004d8 <__aeabi_dmul>
 8004656:	a368      	add	r3, pc, #416	@ (adr r3, 80047f8 <_dtoa_r+0x2b8>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f7fb fd86 	bl	800016c <__adddf3>
 8004660:	4604      	mov	r4, r0
 8004662:	4630      	mov	r0, r6
 8004664:	460d      	mov	r5, r1
 8004666:	f7fb fecd 	bl	8000404 <__aeabi_i2d>
 800466a:	a365      	add	r3, pc, #404	@ (adr r3, 8004800 <_dtoa_r+0x2c0>)
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f7fb ff32 	bl	80004d8 <__aeabi_dmul>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4620      	mov	r0, r4
 800467a:	4629      	mov	r1, r5
 800467c:	f7fb fd76 	bl	800016c <__adddf3>
 8004680:	4604      	mov	r4, r0
 8004682:	460d      	mov	r5, r1
 8004684:	f7fc f9d8 	bl	8000a38 <__aeabi_d2iz>
 8004688:	2200      	movs	r2, #0
 800468a:	4607      	mov	r7, r0
 800468c:	2300      	movs	r3, #0
 800468e:	4620      	mov	r0, r4
 8004690:	4629      	mov	r1, r5
 8004692:	f7fc f993 	bl	80009bc <__aeabi_dcmplt>
 8004696:	b140      	cbz	r0, 80046aa <_dtoa_r+0x16a>
 8004698:	4638      	mov	r0, r7
 800469a:	f7fb feb3 	bl	8000404 <__aeabi_i2d>
 800469e:	4622      	mov	r2, r4
 80046a0:	462b      	mov	r3, r5
 80046a2:	f7fc f981 	bl	80009a8 <__aeabi_dcmpeq>
 80046a6:	b900      	cbnz	r0, 80046aa <_dtoa_r+0x16a>
 80046a8:	3f01      	subs	r7, #1
 80046aa:	2f16      	cmp	r7, #22
 80046ac:	d853      	bhi.n	8004756 <_dtoa_r+0x216>
 80046ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004824 <_dtoa_r+0x2e4>)
 80046b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f7fc f97e 	bl	80009bc <__aeabi_dcmplt>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d04a      	beq.n	800475a <_dtoa_r+0x21a>
 80046c4:	2300      	movs	r3, #0
 80046c6:	3f01      	subs	r7, #1
 80046c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80046ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80046cc:	1b9b      	subs	r3, r3, r6
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	bf46      	itte	mi
 80046d2:	f1c3 0801 	rsbmi	r8, r3, #1
 80046d6:	2300      	movmi	r3, #0
 80046d8:	f04f 0800 	movpl.w	r8, #0
 80046dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80046de:	bf48      	it	mi
 80046e0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80046e2:	2f00      	cmp	r7, #0
 80046e4:	db3b      	blt.n	800475e <_dtoa_r+0x21e>
 80046e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046e8:	970e      	str	r7, [sp, #56]	@ 0x38
 80046ea:	443b      	add	r3, r7
 80046ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ee:	2300      	movs	r3, #0
 80046f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80046f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80046f4:	2b09      	cmp	r3, #9
 80046f6:	d866      	bhi.n	80047c6 <_dtoa_r+0x286>
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	bfc4      	itt	gt
 80046fc:	3b04      	subgt	r3, #4
 80046fe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004700:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004702:	bfc8      	it	gt
 8004704:	2400      	movgt	r4, #0
 8004706:	f1a3 0302 	sub.w	r3, r3, #2
 800470a:	bfd8      	it	le
 800470c:	2401      	movle	r4, #1
 800470e:	2b03      	cmp	r3, #3
 8004710:	d864      	bhi.n	80047dc <_dtoa_r+0x29c>
 8004712:	e8df f003 	tbb	[pc, r3]
 8004716:	382b      	.short	0x382b
 8004718:	5636      	.short	0x5636
 800471a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800471e:	441e      	add	r6, r3
 8004720:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004724:	2b20      	cmp	r3, #32
 8004726:	bfc1      	itttt	gt
 8004728:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800472c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004730:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004734:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004738:	bfd6      	itet	le
 800473a:	f1c3 0320 	rsble	r3, r3, #32
 800473e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004742:	fa04 f003 	lslle.w	r0, r4, r3
 8004746:	f7fb fe4d 	bl	80003e4 <__aeabi_ui2d>
 800474a:	2201      	movs	r2, #1
 800474c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004750:	3e01      	subs	r6, #1
 8004752:	9212      	str	r2, [sp, #72]	@ 0x48
 8004754:	e775      	b.n	8004642 <_dtoa_r+0x102>
 8004756:	2301      	movs	r3, #1
 8004758:	e7b6      	b.n	80046c8 <_dtoa_r+0x188>
 800475a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800475c:	e7b5      	b.n	80046ca <_dtoa_r+0x18a>
 800475e:	427b      	negs	r3, r7
 8004760:	930a      	str	r3, [sp, #40]	@ 0x28
 8004762:	2300      	movs	r3, #0
 8004764:	eba8 0807 	sub.w	r8, r8, r7
 8004768:	930e      	str	r3, [sp, #56]	@ 0x38
 800476a:	e7c2      	b.n	80046f2 <_dtoa_r+0x1b2>
 800476c:	2300      	movs	r3, #0
 800476e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004770:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004772:	2b00      	cmp	r3, #0
 8004774:	dc35      	bgt.n	80047e2 <_dtoa_r+0x2a2>
 8004776:	2301      	movs	r3, #1
 8004778:	461a      	mov	r2, r3
 800477a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800477e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004780:	e00b      	b.n	800479a <_dtoa_r+0x25a>
 8004782:	2301      	movs	r3, #1
 8004784:	e7f3      	b.n	800476e <_dtoa_r+0x22e>
 8004786:	2300      	movs	r3, #0
 8004788:	930b      	str	r3, [sp, #44]	@ 0x2c
 800478a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	9308      	str	r3, [sp, #32]
 8004790:	3301      	adds	r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	9307      	str	r3, [sp, #28]
 8004796:	bfb8      	it	lt
 8004798:	2301      	movlt	r3, #1
 800479a:	2100      	movs	r1, #0
 800479c:	2204      	movs	r2, #4
 800479e:	f8db 001c 	ldr.w	r0, [fp, #28]
 80047a2:	f102 0514 	add.w	r5, r2, #20
 80047a6:	429d      	cmp	r5, r3
 80047a8:	d91f      	bls.n	80047ea <_dtoa_r+0x2aa>
 80047aa:	6041      	str	r1, [r0, #4]
 80047ac:	4658      	mov	r0, fp
 80047ae:	f000 fd8d 	bl	80052cc <_Balloc>
 80047b2:	4682      	mov	sl, r0
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d139      	bne.n	800482c <_dtoa_r+0x2ec>
 80047b8:	4602      	mov	r2, r0
 80047ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80047be:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <_dtoa_r+0x2e8>)
 80047c0:	e6d2      	b.n	8004568 <_dtoa_r+0x28>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e7e0      	b.n	8004788 <_dtoa_r+0x248>
 80047c6:	2401      	movs	r4, #1
 80047c8:	2300      	movs	r3, #0
 80047ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80047cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295
 80047d2:	2200      	movs	r2, #0
 80047d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80047d8:	2312      	movs	r3, #18
 80047da:	e7d0      	b.n	800477e <_dtoa_r+0x23e>
 80047dc:	2301      	movs	r3, #1
 80047de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047e0:	e7f5      	b.n	80047ce <_dtoa_r+0x28e>
 80047e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80047e8:	e7d7      	b.n	800479a <_dtoa_r+0x25a>
 80047ea:	3101      	adds	r1, #1
 80047ec:	0052      	lsls	r2, r2, #1
 80047ee:	e7d8      	b.n	80047a2 <_dtoa_r+0x262>
 80047f0:	636f4361 	.word	0x636f4361
 80047f4:	3fd287a7 	.word	0x3fd287a7
 80047f8:	8b60c8b3 	.word	0x8b60c8b3
 80047fc:	3fc68a28 	.word	0x3fc68a28
 8004800:	509f79fb 	.word	0x509f79fb
 8004804:	3fd34413 	.word	0x3fd34413
 8004808:	080061f7 	.word	0x080061f7
 800480c:	0800620e 	.word	0x0800620e
 8004810:	7ff00000 	.word	0x7ff00000
 8004814:	080061f3 	.word	0x080061f3
 8004818:	080061c7 	.word	0x080061c7
 800481c:	080061c6 	.word	0x080061c6
 8004820:	3ff80000 	.word	0x3ff80000
 8004824:	08006308 	.word	0x08006308
 8004828:	08006266 	.word	0x08006266
 800482c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004830:	6018      	str	r0, [r3, #0]
 8004832:	9b07      	ldr	r3, [sp, #28]
 8004834:	2b0e      	cmp	r3, #14
 8004836:	f200 80a4 	bhi.w	8004982 <_dtoa_r+0x442>
 800483a:	2c00      	cmp	r4, #0
 800483c:	f000 80a1 	beq.w	8004982 <_dtoa_r+0x442>
 8004840:	2f00      	cmp	r7, #0
 8004842:	dd33      	ble.n	80048ac <_dtoa_r+0x36c>
 8004844:	4b86      	ldr	r3, [pc, #536]	@ (8004a60 <_dtoa_r+0x520>)
 8004846:	f007 020f 	and.w	r2, r7, #15
 800484a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800484e:	05f8      	lsls	r0, r7, #23
 8004850:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004854:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004858:	ea4f 1427 	mov.w	r4, r7, asr #4
 800485c:	d516      	bpl.n	800488c <_dtoa_r+0x34c>
 800485e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004862:	4b80      	ldr	r3, [pc, #512]	@ (8004a64 <_dtoa_r+0x524>)
 8004864:	2603      	movs	r6, #3
 8004866:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800486a:	f7fb ff5f 	bl	800072c <__aeabi_ddiv>
 800486e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004872:	f004 040f 	and.w	r4, r4, #15
 8004876:	4d7b      	ldr	r5, [pc, #492]	@ (8004a64 <_dtoa_r+0x524>)
 8004878:	b954      	cbnz	r4, 8004890 <_dtoa_r+0x350>
 800487a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800487e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004882:	f7fb ff53 	bl	800072c <__aeabi_ddiv>
 8004886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800488a:	e028      	b.n	80048de <_dtoa_r+0x39e>
 800488c:	2602      	movs	r6, #2
 800488e:	e7f2      	b.n	8004876 <_dtoa_r+0x336>
 8004890:	07e1      	lsls	r1, r4, #31
 8004892:	d508      	bpl.n	80048a6 <_dtoa_r+0x366>
 8004894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800489c:	f7fb fe1c 	bl	80004d8 <__aeabi_dmul>
 80048a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048a4:	3601      	adds	r6, #1
 80048a6:	1064      	asrs	r4, r4, #1
 80048a8:	3508      	adds	r5, #8
 80048aa:	e7e5      	b.n	8004878 <_dtoa_r+0x338>
 80048ac:	f000 80d2 	beq.w	8004a54 <_dtoa_r+0x514>
 80048b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048b4:	427c      	negs	r4, r7
 80048b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a60 <_dtoa_r+0x520>)
 80048b8:	f004 020f 	and.w	r2, r4, #15
 80048bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f7fb fe08 	bl	80004d8 <__aeabi_dmul>
 80048c8:	2602      	movs	r6, #2
 80048ca:	2300      	movs	r3, #0
 80048cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048d0:	4d64      	ldr	r5, [pc, #400]	@ (8004a64 <_dtoa_r+0x524>)
 80048d2:	1124      	asrs	r4, r4, #4
 80048d4:	2c00      	cmp	r4, #0
 80048d6:	f040 80b2 	bne.w	8004a3e <_dtoa_r+0x4fe>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1d3      	bne.n	8004886 <_dtoa_r+0x346>
 80048de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80048e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80b7 	beq.w	8004a58 <_dtoa_r+0x518>
 80048ea:	2200      	movs	r2, #0
 80048ec:	4620      	mov	r0, r4
 80048ee:	4629      	mov	r1, r5
 80048f0:	4b5d      	ldr	r3, [pc, #372]	@ (8004a68 <_dtoa_r+0x528>)
 80048f2:	f7fc f863 	bl	80009bc <__aeabi_dcmplt>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f000 80ae 	beq.w	8004a58 <_dtoa_r+0x518>
 80048fc:	9b07      	ldr	r3, [sp, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80aa 	beq.w	8004a58 <_dtoa_r+0x518>
 8004904:	9b08      	ldr	r3, [sp, #32]
 8004906:	2b00      	cmp	r3, #0
 8004908:	dd37      	ble.n	800497a <_dtoa_r+0x43a>
 800490a:	1e7b      	subs	r3, r7, #1
 800490c:	4620      	mov	r0, r4
 800490e:	9304      	str	r3, [sp, #16]
 8004910:	2200      	movs	r2, #0
 8004912:	4629      	mov	r1, r5
 8004914:	4b55      	ldr	r3, [pc, #340]	@ (8004a6c <_dtoa_r+0x52c>)
 8004916:	f7fb fddf 	bl	80004d8 <__aeabi_dmul>
 800491a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800491e:	9c08      	ldr	r4, [sp, #32]
 8004920:	3601      	adds	r6, #1
 8004922:	4630      	mov	r0, r6
 8004924:	f7fb fd6e 	bl	8000404 <__aeabi_i2d>
 8004928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800492c:	f7fb fdd4 	bl	80004d8 <__aeabi_dmul>
 8004930:	2200      	movs	r2, #0
 8004932:	4b4f      	ldr	r3, [pc, #316]	@ (8004a70 <_dtoa_r+0x530>)
 8004934:	f7fb fc1a 	bl	800016c <__adddf3>
 8004938:	4605      	mov	r5, r0
 800493a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800493e:	2c00      	cmp	r4, #0
 8004940:	f040 809a 	bne.w	8004a78 <_dtoa_r+0x538>
 8004944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004948:	2200      	movs	r2, #0
 800494a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a74 <_dtoa_r+0x534>)
 800494c:	f7fb fc0c 	bl	8000168 <__aeabi_dsub>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004958:	462a      	mov	r2, r5
 800495a:	4633      	mov	r3, r6
 800495c:	f7fc f84c 	bl	80009f8 <__aeabi_dcmpgt>
 8004960:	2800      	cmp	r0, #0
 8004962:	f040 828e 	bne.w	8004e82 <_dtoa_r+0x942>
 8004966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800496a:	462a      	mov	r2, r5
 800496c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004970:	f7fc f824 	bl	80009bc <__aeabi_dcmplt>
 8004974:	2800      	cmp	r0, #0
 8004976:	f040 8127 	bne.w	8004bc8 <_dtoa_r+0x688>
 800497a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800497e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004982:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004984:	2b00      	cmp	r3, #0
 8004986:	f2c0 8163 	blt.w	8004c50 <_dtoa_r+0x710>
 800498a:	2f0e      	cmp	r7, #14
 800498c:	f300 8160 	bgt.w	8004c50 <_dtoa_r+0x710>
 8004990:	4b33      	ldr	r3, [pc, #204]	@ (8004a60 <_dtoa_r+0x520>)
 8004992:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004996:	e9d3 3400 	ldrd	r3, r4, [r3]
 800499a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800499e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	da03      	bge.n	80049ac <_dtoa_r+0x46c>
 80049a4:	9b07      	ldr	r3, [sp, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f340 8100 	ble.w	8004bac <_dtoa_r+0x66c>
 80049ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049b0:	4656      	mov	r6, sl
 80049b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	f7fb feb7 	bl	800072c <__aeabi_ddiv>
 80049be:	f7fc f83b 	bl	8000a38 <__aeabi_d2iz>
 80049c2:	4680      	mov	r8, r0
 80049c4:	f7fb fd1e 	bl	8000404 <__aeabi_i2d>
 80049c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049cc:	f7fb fd84 	bl	80004d8 <__aeabi_dmul>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4620      	mov	r0, r4
 80049d6:	4629      	mov	r1, r5
 80049d8:	f7fb fbc6 	bl	8000168 <__aeabi_dsub>
 80049dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80049e0:	9d07      	ldr	r5, [sp, #28]
 80049e2:	f806 4b01 	strb.w	r4, [r6], #1
 80049e6:	eba6 040a 	sub.w	r4, r6, sl
 80049ea:	42a5      	cmp	r5, r4
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	f040 8116 	bne.w	8004c20 <_dtoa_r+0x6e0>
 80049f4:	f7fb fbba 	bl	800016c <__adddf3>
 80049f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049fc:	4604      	mov	r4, r0
 80049fe:	460d      	mov	r5, r1
 8004a00:	f7fb fffa 	bl	80009f8 <__aeabi_dcmpgt>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	f040 80f8 	bne.w	8004bfa <_dtoa_r+0x6ba>
 8004a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a0e:	4620      	mov	r0, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	f7fb ffc9 	bl	80009a8 <__aeabi_dcmpeq>
 8004a16:	b118      	cbz	r0, 8004a20 <_dtoa_r+0x4e0>
 8004a18:	f018 0f01 	tst.w	r8, #1
 8004a1c:	f040 80ed 	bne.w	8004bfa <_dtoa_r+0x6ba>
 8004a20:	4649      	mov	r1, r9
 8004a22:	4658      	mov	r0, fp
 8004a24:	f000 fc92 	bl	800534c <_Bfree>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	7033      	strb	r3, [r6, #0]
 8004a2c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004a2e:	3701      	adds	r7, #1
 8004a30:	601f      	str	r7, [r3, #0]
 8004a32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8320 	beq.w	800507a <_dtoa_r+0xb3a>
 8004a3a:	601e      	str	r6, [r3, #0]
 8004a3c:	e31d      	b.n	800507a <_dtoa_r+0xb3a>
 8004a3e:	07e2      	lsls	r2, r4, #31
 8004a40:	d505      	bpl.n	8004a4e <_dtoa_r+0x50e>
 8004a42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a46:	f7fb fd47 	bl	80004d8 <__aeabi_dmul>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	1064      	asrs	r4, r4, #1
 8004a50:	3508      	adds	r5, #8
 8004a52:	e73f      	b.n	80048d4 <_dtoa_r+0x394>
 8004a54:	2602      	movs	r6, #2
 8004a56:	e742      	b.n	80048de <_dtoa_r+0x39e>
 8004a58:	9c07      	ldr	r4, [sp, #28]
 8004a5a:	9704      	str	r7, [sp, #16]
 8004a5c:	e761      	b.n	8004922 <_dtoa_r+0x3e2>
 8004a5e:	bf00      	nop
 8004a60:	08006308 	.word	0x08006308
 8004a64:	080062e0 	.word	0x080062e0
 8004a68:	3ff00000 	.word	0x3ff00000
 8004a6c:	40240000 	.word	0x40240000
 8004a70:	401c0000 	.word	0x401c0000
 8004a74:	40140000 	.word	0x40140000
 8004a78:	4b70      	ldr	r3, [pc, #448]	@ (8004c3c <_dtoa_r+0x6fc>)
 8004a7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a84:	4454      	add	r4, sl
 8004a86:	2900      	cmp	r1, #0
 8004a88:	d045      	beq.n	8004b16 <_dtoa_r+0x5d6>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	496c      	ldr	r1, [pc, #432]	@ (8004c40 <_dtoa_r+0x700>)
 8004a8e:	f7fb fe4d 	bl	800072c <__aeabi_ddiv>
 8004a92:	4633      	mov	r3, r6
 8004a94:	462a      	mov	r2, r5
 8004a96:	f7fb fb67 	bl	8000168 <__aeabi_dsub>
 8004a9a:	4656      	mov	r6, sl
 8004a9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aa4:	f7fb ffc8 	bl	8000a38 <__aeabi_d2iz>
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	f7fb fcab 	bl	8000404 <__aeabi_i2d>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ab6:	f7fb fb57 	bl	8000168 <__aeabi_dsub>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	3530      	adds	r5, #48	@ 0x30
 8004ac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ac4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ac8:	f806 5b01 	strb.w	r5, [r6], #1
 8004acc:	f7fb ff76 	bl	80009bc <__aeabi_dcmplt>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d163      	bne.n	8004b9c <_dtoa_r+0x65c>
 8004ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ad8:	2000      	movs	r0, #0
 8004ada:	495a      	ldr	r1, [pc, #360]	@ (8004c44 <_dtoa_r+0x704>)
 8004adc:	f7fb fb44 	bl	8000168 <__aeabi_dsub>
 8004ae0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ae4:	f7fb ff6a 	bl	80009bc <__aeabi_dcmplt>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	f040 8087 	bne.w	8004bfc <_dtoa_r+0x6bc>
 8004aee:	42a6      	cmp	r6, r4
 8004af0:	f43f af43 	beq.w	800497a <_dtoa_r+0x43a>
 8004af4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004af8:	2200      	movs	r2, #0
 8004afa:	4b53      	ldr	r3, [pc, #332]	@ (8004c48 <_dtoa_r+0x708>)
 8004afc:	f7fb fcec 	bl	80004d8 <__aeabi_dmul>
 8004b00:	2200      	movs	r2, #0
 8004b02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c48 <_dtoa_r+0x708>)
 8004b0c:	f7fb fce4 	bl	80004d8 <__aeabi_dmul>
 8004b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b14:	e7c4      	b.n	8004aa0 <_dtoa_r+0x560>
 8004b16:	4631      	mov	r1, r6
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f7fb fcdd 	bl	80004d8 <__aeabi_dmul>
 8004b1e:	4656      	mov	r6, sl
 8004b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b24:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b2a:	f7fb ff85 	bl	8000a38 <__aeabi_d2iz>
 8004b2e:	4605      	mov	r5, r0
 8004b30:	f7fb fc68 	bl	8000404 <__aeabi_i2d>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b3c:	f7fb fb14 	bl	8000168 <__aeabi_dsub>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	3530      	adds	r5, #48	@ 0x30
 8004b46:	f806 5b01 	strb.w	r5, [r6], #1
 8004b4a:	42a6      	cmp	r6, r4
 8004b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	d124      	bne.n	8004ba0 <_dtoa_r+0x660>
 8004b56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b5a:	4b39      	ldr	r3, [pc, #228]	@ (8004c40 <_dtoa_r+0x700>)
 8004b5c:	f7fb fb06 	bl	800016c <__adddf3>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b68:	f7fb ff46 	bl	80009f8 <__aeabi_dcmpgt>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d145      	bne.n	8004bfc <_dtoa_r+0x6bc>
 8004b70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b74:	2000      	movs	r0, #0
 8004b76:	4932      	ldr	r1, [pc, #200]	@ (8004c40 <_dtoa_r+0x700>)
 8004b78:	f7fb faf6 	bl	8000168 <__aeabi_dsub>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b84:	f7fb ff1a 	bl	80009bc <__aeabi_dcmplt>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	f43f aef6 	beq.w	800497a <_dtoa_r+0x43a>
 8004b8e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004b90:	1e73      	subs	r3, r6, #1
 8004b92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b98:	2b30      	cmp	r3, #48	@ 0x30
 8004b9a:	d0f8      	beq.n	8004b8e <_dtoa_r+0x64e>
 8004b9c:	9f04      	ldr	r7, [sp, #16]
 8004b9e:	e73f      	b.n	8004a20 <_dtoa_r+0x4e0>
 8004ba0:	4b29      	ldr	r3, [pc, #164]	@ (8004c48 <_dtoa_r+0x708>)
 8004ba2:	f7fb fc99 	bl	80004d8 <__aeabi_dmul>
 8004ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004baa:	e7bc      	b.n	8004b26 <_dtoa_r+0x5e6>
 8004bac:	d10c      	bne.n	8004bc8 <_dtoa_r+0x688>
 8004bae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4b25      	ldr	r3, [pc, #148]	@ (8004c4c <_dtoa_r+0x70c>)
 8004bb6:	f7fb fc8f 	bl	80004d8 <__aeabi_dmul>
 8004bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bbe:	f7fb ff11 	bl	80009e4 <__aeabi_dcmpge>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	f000 815b 	beq.w	8004e7e <_dtoa_r+0x93e>
 8004bc8:	2400      	movs	r4, #0
 8004bca:	4625      	mov	r5, r4
 8004bcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004bce:	4656      	mov	r6, sl
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	9304      	str	r3, [sp, #16]
 8004bd4:	2700      	movs	r7, #0
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4658      	mov	r0, fp
 8004bda:	f000 fbb7 	bl	800534c <_Bfree>
 8004bde:	2d00      	cmp	r5, #0
 8004be0:	d0dc      	beq.n	8004b9c <_dtoa_r+0x65c>
 8004be2:	b12f      	cbz	r7, 8004bf0 <_dtoa_r+0x6b0>
 8004be4:	42af      	cmp	r7, r5
 8004be6:	d003      	beq.n	8004bf0 <_dtoa_r+0x6b0>
 8004be8:	4639      	mov	r1, r7
 8004bea:	4658      	mov	r0, fp
 8004bec:	f000 fbae 	bl	800534c <_Bfree>
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4658      	mov	r0, fp
 8004bf4:	f000 fbaa 	bl	800534c <_Bfree>
 8004bf8:	e7d0      	b.n	8004b9c <_dtoa_r+0x65c>
 8004bfa:	9704      	str	r7, [sp, #16]
 8004bfc:	4633      	mov	r3, r6
 8004bfe:	461e      	mov	r6, r3
 8004c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c04:	2a39      	cmp	r2, #57	@ 0x39
 8004c06:	d107      	bne.n	8004c18 <_dtoa_r+0x6d8>
 8004c08:	459a      	cmp	sl, r3
 8004c0a:	d1f8      	bne.n	8004bfe <_dtoa_r+0x6be>
 8004c0c:	9a04      	ldr	r2, [sp, #16]
 8004c0e:	3201      	adds	r2, #1
 8004c10:	9204      	str	r2, [sp, #16]
 8004c12:	2230      	movs	r2, #48	@ 0x30
 8004c14:	f88a 2000 	strb.w	r2, [sl]
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	3201      	adds	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e7bd      	b.n	8004b9c <_dtoa_r+0x65c>
 8004c20:	2200      	movs	r2, #0
 8004c22:	4b09      	ldr	r3, [pc, #36]	@ (8004c48 <_dtoa_r+0x708>)
 8004c24:	f7fb fc58 	bl	80004d8 <__aeabi_dmul>
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	460d      	mov	r5, r1
 8004c30:	f7fb feba 	bl	80009a8 <__aeabi_dcmpeq>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f43f aebc 	beq.w	80049b2 <_dtoa_r+0x472>
 8004c3a:	e6f1      	b.n	8004a20 <_dtoa_r+0x4e0>
 8004c3c:	08006308 	.word	0x08006308
 8004c40:	3fe00000 	.word	0x3fe00000
 8004c44:	3ff00000 	.word	0x3ff00000
 8004c48:	40240000 	.word	0x40240000
 8004c4c:	40140000 	.word	0x40140000
 8004c50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004c52:	2a00      	cmp	r2, #0
 8004c54:	f000 80db 	beq.w	8004e0e <_dtoa_r+0x8ce>
 8004c58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c5a:	2a01      	cmp	r2, #1
 8004c5c:	f300 80bf 	bgt.w	8004dde <_dtoa_r+0x89e>
 8004c60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	f000 80b7 	beq.w	8004dd6 <_dtoa_r+0x896>
 8004c68:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004c6c:	4646      	mov	r6, r8
 8004c6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c72:	2101      	movs	r1, #1
 8004c74:	441a      	add	r2, r3
 8004c76:	4658      	mov	r0, fp
 8004c78:	4498      	add	r8, r3
 8004c7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c7c:	f000 fc1a 	bl	80054b4 <__i2b>
 8004c80:	4605      	mov	r5, r0
 8004c82:	b15e      	cbz	r6, 8004c9c <_dtoa_r+0x75c>
 8004c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	dd08      	ble.n	8004c9c <_dtoa_r+0x75c>
 8004c8a:	42b3      	cmp	r3, r6
 8004c8c:	bfa8      	it	ge
 8004c8e:	4633      	movge	r3, r6
 8004c90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c92:	eba8 0803 	sub.w	r8, r8, r3
 8004c96:	1af6      	subs	r6, r6, r3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c9e:	b1f3      	cbz	r3, 8004cde <_dtoa_r+0x79e>
 8004ca0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80b7 	beq.w	8004e16 <_dtoa_r+0x8d6>
 8004ca8:	b18c      	cbz	r4, 8004cce <_dtoa_r+0x78e>
 8004caa:	4629      	mov	r1, r5
 8004cac:	4622      	mov	r2, r4
 8004cae:	4658      	mov	r0, fp
 8004cb0:	f000 fcbe 	bl	8005630 <__pow5mult>
 8004cb4:	464a      	mov	r2, r9
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	4605      	mov	r5, r0
 8004cba:	4658      	mov	r0, fp
 8004cbc:	f000 fc10 	bl	80054e0 <__multiply>
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	9004      	str	r0, [sp, #16]
 8004cc4:	4658      	mov	r0, fp
 8004cc6:	f000 fb41 	bl	800534c <_Bfree>
 8004cca:	9b04      	ldr	r3, [sp, #16]
 8004ccc:	4699      	mov	r9, r3
 8004cce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cd0:	1b1a      	subs	r2, r3, r4
 8004cd2:	d004      	beq.n	8004cde <_dtoa_r+0x79e>
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4658      	mov	r0, fp
 8004cd8:	f000 fcaa 	bl	8005630 <__pow5mult>
 8004cdc:	4681      	mov	r9, r0
 8004cde:	2101      	movs	r1, #1
 8004ce0:	4658      	mov	r0, fp
 8004ce2:	f000 fbe7 	bl	80054b4 <__i2b>
 8004ce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ce8:	4604      	mov	r4, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 81c9 	beq.w	8005082 <_dtoa_r+0xb42>
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4601      	mov	r1, r0
 8004cf4:	4658      	mov	r0, fp
 8004cf6:	f000 fc9b 	bl	8005630 <__pow5mult>
 8004cfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	f300 808f 	bgt.w	8004e22 <_dtoa_r+0x8e2>
 8004d04:	9b02      	ldr	r3, [sp, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f040 8087 	bne.w	8004e1a <_dtoa_r+0x8da>
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 8083 	bne.w	8004e1e <_dtoa_r+0x8de>
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d1e:	0d1b      	lsrs	r3, r3, #20
 8004d20:	051b      	lsls	r3, r3, #20
 8004d22:	b12b      	cbz	r3, 8004d30 <_dtoa_r+0x7f0>
 8004d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d26:	f108 0801 	add.w	r8, r8, #1
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d2e:	2301      	movs	r3, #1
 8004d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 81aa 	beq.w	800508e <_dtoa_r+0xb4e>
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d40:	6918      	ldr	r0, [r3, #16]
 8004d42:	f000 fb6b 	bl	800541c <__hi0bits>
 8004d46:	f1c0 0020 	rsb	r0, r0, #32
 8004d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d4c:	4418      	add	r0, r3
 8004d4e:	f010 001f 	ands.w	r0, r0, #31
 8004d52:	d071      	beq.n	8004e38 <_dtoa_r+0x8f8>
 8004d54:	f1c0 0320 	rsb	r3, r0, #32
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	dd65      	ble.n	8004e28 <_dtoa_r+0x8e8>
 8004d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d5e:	f1c0 001c 	rsb	r0, r0, #28
 8004d62:	4403      	add	r3, r0
 8004d64:	4480      	add	r8, r0
 8004d66:	4406      	add	r6, r0
 8004d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d6a:	f1b8 0f00 	cmp.w	r8, #0
 8004d6e:	dd05      	ble.n	8004d7c <_dtoa_r+0x83c>
 8004d70:	4649      	mov	r1, r9
 8004d72:	4642      	mov	r2, r8
 8004d74:	4658      	mov	r0, fp
 8004d76:	f000 fcb5 	bl	80056e4 <__lshift>
 8004d7a:	4681      	mov	r9, r0
 8004d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	dd05      	ble.n	8004d8e <_dtoa_r+0x84e>
 8004d82:	4621      	mov	r1, r4
 8004d84:	461a      	mov	r2, r3
 8004d86:	4658      	mov	r0, fp
 8004d88:	f000 fcac 	bl	80056e4 <__lshift>
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d053      	beq.n	8004e3c <_dtoa_r+0x8fc>
 8004d94:	4621      	mov	r1, r4
 8004d96:	4648      	mov	r0, r9
 8004d98:	f000 fd10 	bl	80057bc <__mcmp>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	da4d      	bge.n	8004e3c <_dtoa_r+0x8fc>
 8004da0:	1e7b      	subs	r3, r7, #1
 8004da2:	4649      	mov	r1, r9
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	220a      	movs	r2, #10
 8004da8:	2300      	movs	r3, #0
 8004daa:	4658      	mov	r0, fp
 8004dac:	f000 faf0 	bl	8005390 <__multadd>
 8004db0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004db2:	4681      	mov	r9, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 816c 	beq.w	8005092 <_dtoa_r+0xb52>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	220a      	movs	r2, #10
 8004dc0:	4658      	mov	r0, fp
 8004dc2:	f000 fae5 	bl	8005390 <__multadd>
 8004dc6:	9b08      	ldr	r3, [sp, #32]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dc61      	bgt.n	8004e92 <_dtoa_r+0x952>
 8004dce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	dc3b      	bgt.n	8004e4c <_dtoa_r+0x90c>
 8004dd4:	e05d      	b.n	8004e92 <_dtoa_r+0x952>
 8004dd6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004dd8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004ddc:	e746      	b.n	8004c6c <_dtoa_r+0x72c>
 8004dde:	9b07      	ldr	r3, [sp, #28]
 8004de0:	1e5c      	subs	r4, r3, #1
 8004de2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	bfbf      	itttt	lt
 8004de8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004dea:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004dec:	1ae3      	sublt	r3, r4, r3
 8004dee:	18d2      	addlt	r2, r2, r3
 8004df0:	bfa8      	it	ge
 8004df2:	1b1c      	subge	r4, r3, r4
 8004df4:	9b07      	ldr	r3, [sp, #28]
 8004df6:	bfbe      	ittt	lt
 8004df8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004dfa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004dfc:	2400      	movlt	r4, #0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfb5      	itete	lt
 8004e02:	eba8 0603 	sublt.w	r6, r8, r3
 8004e06:	4646      	movge	r6, r8
 8004e08:	2300      	movlt	r3, #0
 8004e0a:	9b07      	ldrge	r3, [sp, #28]
 8004e0c:	e730      	b.n	8004c70 <_dtoa_r+0x730>
 8004e0e:	4646      	mov	r6, r8
 8004e10:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004e14:	e735      	b.n	8004c82 <_dtoa_r+0x742>
 8004e16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e18:	e75c      	b.n	8004cd4 <_dtoa_r+0x794>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e788      	b.n	8004d30 <_dtoa_r+0x7f0>
 8004e1e:	9b02      	ldr	r3, [sp, #8]
 8004e20:	e786      	b.n	8004d30 <_dtoa_r+0x7f0>
 8004e22:	2300      	movs	r3, #0
 8004e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e26:	e788      	b.n	8004d3a <_dtoa_r+0x7fa>
 8004e28:	d09f      	beq.n	8004d6a <_dtoa_r+0x82a>
 8004e2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e2c:	331c      	adds	r3, #28
 8004e2e:	441a      	add	r2, r3
 8004e30:	4498      	add	r8, r3
 8004e32:	441e      	add	r6, r3
 8004e34:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e36:	e798      	b.n	8004d6a <_dtoa_r+0x82a>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	e7f6      	b.n	8004e2a <_dtoa_r+0x8ea>
 8004e3c:	9b07      	ldr	r3, [sp, #28]
 8004e3e:	9704      	str	r7, [sp, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	dc20      	bgt.n	8004e86 <_dtoa_r+0x946>
 8004e44:	9308      	str	r3, [sp, #32]
 8004e46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	dd1e      	ble.n	8004e8a <_dtoa_r+0x94a>
 8004e4c:	9b08      	ldr	r3, [sp, #32]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f47f aebc 	bne.w	8004bcc <_dtoa_r+0x68c>
 8004e54:	4621      	mov	r1, r4
 8004e56:	2205      	movs	r2, #5
 8004e58:	4658      	mov	r0, fp
 8004e5a:	f000 fa99 	bl	8005390 <__multadd>
 8004e5e:	4601      	mov	r1, r0
 8004e60:	4604      	mov	r4, r0
 8004e62:	4648      	mov	r0, r9
 8004e64:	f000 fcaa 	bl	80057bc <__mcmp>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	f77f aeaf 	ble.w	8004bcc <_dtoa_r+0x68c>
 8004e6e:	2331      	movs	r3, #49	@ 0x31
 8004e70:	4656      	mov	r6, sl
 8004e72:	f806 3b01 	strb.w	r3, [r6], #1
 8004e76:	9b04      	ldr	r3, [sp, #16]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	9304      	str	r3, [sp, #16]
 8004e7c:	e6aa      	b.n	8004bd4 <_dtoa_r+0x694>
 8004e7e:	9c07      	ldr	r4, [sp, #28]
 8004e80:	9704      	str	r7, [sp, #16]
 8004e82:	4625      	mov	r5, r4
 8004e84:	e7f3      	b.n	8004e6e <_dtoa_r+0x92e>
 8004e86:	9b07      	ldr	r3, [sp, #28]
 8004e88:	9308      	str	r3, [sp, #32]
 8004e8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8104 	beq.w	800509a <_dtoa_r+0xb5a>
 8004e92:	2e00      	cmp	r6, #0
 8004e94:	dd05      	ble.n	8004ea2 <_dtoa_r+0x962>
 8004e96:	4629      	mov	r1, r5
 8004e98:	4632      	mov	r2, r6
 8004e9a:	4658      	mov	r0, fp
 8004e9c:	f000 fc22 	bl	80056e4 <__lshift>
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05a      	beq.n	8004f5e <_dtoa_r+0xa1e>
 8004ea8:	4658      	mov	r0, fp
 8004eaa:	6869      	ldr	r1, [r5, #4]
 8004eac:	f000 fa0e 	bl	80052cc <_Balloc>
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	b928      	cbnz	r0, 8004ec0 <_dtoa_r+0x980>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004eba:	4b83      	ldr	r3, [pc, #524]	@ (80050c8 <_dtoa_r+0xb88>)
 8004ebc:	f7ff bb54 	b.w	8004568 <_dtoa_r+0x28>
 8004ec0:	692a      	ldr	r2, [r5, #16]
 8004ec2:	f105 010c 	add.w	r1, r5, #12
 8004ec6:	3202      	adds	r2, #2
 8004ec8:	0092      	lsls	r2, r2, #2
 8004eca:	300c      	adds	r0, #12
 8004ecc:	f000 fe36 	bl	8005b3c <memcpy>
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4658      	mov	r0, fp
 8004ed6:	f000 fc05 	bl	80056e4 <__lshift>
 8004eda:	462f      	mov	r7, r5
 8004edc:	4605      	mov	r5, r0
 8004ede:	f10a 0301 	add.w	r3, sl, #1
 8004ee2:	9307      	str	r3, [sp, #28]
 8004ee4:	9b08      	ldr	r3, [sp, #32]
 8004ee6:	4453      	add	r3, sl
 8004ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eea:	9b02      	ldr	r3, [sp, #8]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef2:	9b07      	ldr	r3, [sp, #28]
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	4648      	mov	r0, r9
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	f7ff fa95 	bl	800442a <quorem>
 8004f00:	4639      	mov	r1, r7
 8004f02:	9008      	str	r0, [sp, #32]
 8004f04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004f08:	4648      	mov	r0, r9
 8004f0a:	f000 fc57 	bl	80057bc <__mcmp>
 8004f0e:	462a      	mov	r2, r5
 8004f10:	9009      	str	r0, [sp, #36]	@ 0x24
 8004f12:	4621      	mov	r1, r4
 8004f14:	4658      	mov	r0, fp
 8004f16:	f000 fc6d 	bl	80057f4 <__mdiff>
 8004f1a:	68c2      	ldr	r2, [r0, #12]
 8004f1c:	4606      	mov	r6, r0
 8004f1e:	bb02      	cbnz	r2, 8004f62 <_dtoa_r+0xa22>
 8004f20:	4601      	mov	r1, r0
 8004f22:	4648      	mov	r0, r9
 8004f24:	f000 fc4a 	bl	80057bc <__mcmp>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4658      	mov	r0, fp
 8004f2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004f30:	f000 fa0c 	bl	800534c <_Bfree>
 8004f34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004f38:	9e07      	ldr	r6, [sp, #28]
 8004f3a:	ea43 0102 	orr.w	r1, r3, r2
 8004f3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f40:	4319      	orrs	r1, r3
 8004f42:	d110      	bne.n	8004f66 <_dtoa_r+0xa26>
 8004f44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f48:	d029      	beq.n	8004f9e <_dtoa_r+0xa5e>
 8004f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	dd02      	ble.n	8004f56 <_dtoa_r+0xa16>
 8004f50:	9b08      	ldr	r3, [sp, #32]
 8004f52:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004f56:	9b02      	ldr	r3, [sp, #8]
 8004f58:	f883 8000 	strb.w	r8, [r3]
 8004f5c:	e63b      	b.n	8004bd6 <_dtoa_r+0x696>
 8004f5e:	4628      	mov	r0, r5
 8004f60:	e7bb      	b.n	8004eda <_dtoa_r+0x99a>
 8004f62:	2201      	movs	r2, #1
 8004f64:	e7e1      	b.n	8004f2a <_dtoa_r+0x9ea>
 8004f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db04      	blt.n	8004f76 <_dtoa_r+0xa36>
 8004f6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f72:	430b      	orrs	r3, r1
 8004f74:	d120      	bne.n	8004fb8 <_dtoa_r+0xa78>
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	dded      	ble.n	8004f56 <_dtoa_r+0xa16>
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	4658      	mov	r0, fp
 8004f80:	f000 fbb0 	bl	80056e4 <__lshift>
 8004f84:	4621      	mov	r1, r4
 8004f86:	4681      	mov	r9, r0
 8004f88:	f000 fc18 	bl	80057bc <__mcmp>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	dc03      	bgt.n	8004f98 <_dtoa_r+0xa58>
 8004f90:	d1e1      	bne.n	8004f56 <_dtoa_r+0xa16>
 8004f92:	f018 0f01 	tst.w	r8, #1
 8004f96:	d0de      	beq.n	8004f56 <_dtoa_r+0xa16>
 8004f98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f9c:	d1d8      	bne.n	8004f50 <_dtoa_r+0xa10>
 8004f9e:	2339      	movs	r3, #57	@ 0x39
 8004fa0:	9a02      	ldr	r2, [sp, #8]
 8004fa2:	7013      	strb	r3, [r2, #0]
 8004fa4:	4633      	mov	r3, r6
 8004fa6:	461e      	mov	r6, r3
 8004fa8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	2a39      	cmp	r2, #57	@ 0x39
 8004fb0:	d052      	beq.n	8005058 <_dtoa_r+0xb18>
 8004fb2:	3201      	adds	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	e60e      	b.n	8004bd6 <_dtoa_r+0x696>
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	dd07      	ble.n	8004fcc <_dtoa_r+0xa8c>
 8004fbc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004fc0:	d0ed      	beq.n	8004f9e <_dtoa_r+0xa5e>
 8004fc2:	9a02      	ldr	r2, [sp, #8]
 8004fc4:	f108 0301 	add.w	r3, r8, #1
 8004fc8:	7013      	strb	r3, [r2, #0]
 8004fca:	e604      	b.n	8004bd6 <_dtoa_r+0x696>
 8004fcc:	9b07      	ldr	r3, [sp, #28]
 8004fce:	9a07      	ldr	r2, [sp, #28]
 8004fd0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004fd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d028      	beq.n	800502c <_dtoa_r+0xaec>
 8004fda:	4649      	mov	r1, r9
 8004fdc:	2300      	movs	r3, #0
 8004fde:	220a      	movs	r2, #10
 8004fe0:	4658      	mov	r0, fp
 8004fe2:	f000 f9d5 	bl	8005390 <__multadd>
 8004fe6:	42af      	cmp	r7, r5
 8004fe8:	4681      	mov	r9, r0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	f04f 020a 	mov.w	r2, #10
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	4658      	mov	r0, fp
 8004ff6:	d107      	bne.n	8005008 <_dtoa_r+0xac8>
 8004ff8:	f000 f9ca 	bl	8005390 <__multadd>
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	4605      	mov	r5, r0
 8005000:	9b07      	ldr	r3, [sp, #28]
 8005002:	3301      	adds	r3, #1
 8005004:	9307      	str	r3, [sp, #28]
 8005006:	e774      	b.n	8004ef2 <_dtoa_r+0x9b2>
 8005008:	f000 f9c2 	bl	8005390 <__multadd>
 800500c:	4629      	mov	r1, r5
 800500e:	4607      	mov	r7, r0
 8005010:	2300      	movs	r3, #0
 8005012:	220a      	movs	r2, #10
 8005014:	4658      	mov	r0, fp
 8005016:	f000 f9bb 	bl	8005390 <__multadd>
 800501a:	4605      	mov	r5, r0
 800501c:	e7f0      	b.n	8005000 <_dtoa_r+0xac0>
 800501e:	9b08      	ldr	r3, [sp, #32]
 8005020:	2700      	movs	r7, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	bfcc      	ite	gt
 8005026:	461e      	movgt	r6, r3
 8005028:	2601      	movle	r6, #1
 800502a:	4456      	add	r6, sl
 800502c:	4649      	mov	r1, r9
 800502e:	2201      	movs	r2, #1
 8005030:	4658      	mov	r0, fp
 8005032:	f000 fb57 	bl	80056e4 <__lshift>
 8005036:	4621      	mov	r1, r4
 8005038:	4681      	mov	r9, r0
 800503a:	f000 fbbf 	bl	80057bc <__mcmp>
 800503e:	2800      	cmp	r0, #0
 8005040:	dcb0      	bgt.n	8004fa4 <_dtoa_r+0xa64>
 8005042:	d102      	bne.n	800504a <_dtoa_r+0xb0a>
 8005044:	f018 0f01 	tst.w	r8, #1
 8005048:	d1ac      	bne.n	8004fa4 <_dtoa_r+0xa64>
 800504a:	4633      	mov	r3, r6
 800504c:	461e      	mov	r6, r3
 800504e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005052:	2a30      	cmp	r2, #48	@ 0x30
 8005054:	d0fa      	beq.n	800504c <_dtoa_r+0xb0c>
 8005056:	e5be      	b.n	8004bd6 <_dtoa_r+0x696>
 8005058:	459a      	cmp	sl, r3
 800505a:	d1a4      	bne.n	8004fa6 <_dtoa_r+0xa66>
 800505c:	9b04      	ldr	r3, [sp, #16]
 800505e:	3301      	adds	r3, #1
 8005060:	9304      	str	r3, [sp, #16]
 8005062:	2331      	movs	r3, #49	@ 0x31
 8005064:	f88a 3000 	strb.w	r3, [sl]
 8005068:	e5b5      	b.n	8004bd6 <_dtoa_r+0x696>
 800506a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800506c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80050cc <_dtoa_r+0xb8c>
 8005070:	b11b      	cbz	r3, 800507a <_dtoa_r+0xb3a>
 8005072:	f10a 0308 	add.w	r3, sl, #8
 8005076:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4650      	mov	r0, sl
 800507c:	b017      	add	sp, #92	@ 0x5c
 800507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005082:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005084:	2b01      	cmp	r3, #1
 8005086:	f77f ae3d 	ble.w	8004d04 <_dtoa_r+0x7c4>
 800508a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800508c:	930a      	str	r3, [sp, #40]	@ 0x28
 800508e:	2001      	movs	r0, #1
 8005090:	e65b      	b.n	8004d4a <_dtoa_r+0x80a>
 8005092:	9b08      	ldr	r3, [sp, #32]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f77f aed6 	ble.w	8004e46 <_dtoa_r+0x906>
 800509a:	4656      	mov	r6, sl
 800509c:	4621      	mov	r1, r4
 800509e:	4648      	mov	r0, r9
 80050a0:	f7ff f9c3 	bl	800442a <quorem>
 80050a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80050a8:	9b08      	ldr	r3, [sp, #32]
 80050aa:	f806 8b01 	strb.w	r8, [r6], #1
 80050ae:	eba6 020a 	sub.w	r2, r6, sl
 80050b2:	4293      	cmp	r3, r2
 80050b4:	ddb3      	ble.n	800501e <_dtoa_r+0xade>
 80050b6:	4649      	mov	r1, r9
 80050b8:	2300      	movs	r3, #0
 80050ba:	220a      	movs	r2, #10
 80050bc:	4658      	mov	r0, fp
 80050be:	f000 f967 	bl	8005390 <__multadd>
 80050c2:	4681      	mov	r9, r0
 80050c4:	e7ea      	b.n	800509c <_dtoa_r+0xb5c>
 80050c6:	bf00      	nop
 80050c8:	08006266 	.word	0x08006266
 80050cc:	080061ea 	.word	0x080061ea

080050d0 <_free_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4605      	mov	r5, r0
 80050d4:	2900      	cmp	r1, #0
 80050d6:	d040      	beq.n	800515a <_free_r+0x8a>
 80050d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050dc:	1f0c      	subs	r4, r1, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bfb8      	it	lt
 80050e2:	18e4      	addlt	r4, r4, r3
 80050e4:	f000 f8e6 	bl	80052b4 <__malloc_lock>
 80050e8:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <_free_r+0x8c>)
 80050ea:	6813      	ldr	r3, [r2, #0]
 80050ec:	b933      	cbnz	r3, 80050fc <_free_r+0x2c>
 80050ee:	6063      	str	r3, [r4, #4]
 80050f0:	6014      	str	r4, [r2, #0]
 80050f2:	4628      	mov	r0, r5
 80050f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050f8:	f000 b8e2 	b.w	80052c0 <__malloc_unlock>
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d908      	bls.n	8005112 <_free_r+0x42>
 8005100:	6820      	ldr	r0, [r4, #0]
 8005102:	1821      	adds	r1, r4, r0
 8005104:	428b      	cmp	r3, r1
 8005106:	bf01      	itttt	eq
 8005108:	6819      	ldreq	r1, [r3, #0]
 800510a:	685b      	ldreq	r3, [r3, #4]
 800510c:	1809      	addeq	r1, r1, r0
 800510e:	6021      	streq	r1, [r4, #0]
 8005110:	e7ed      	b.n	80050ee <_free_r+0x1e>
 8005112:	461a      	mov	r2, r3
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	b10b      	cbz	r3, 800511c <_free_r+0x4c>
 8005118:	42a3      	cmp	r3, r4
 800511a:	d9fa      	bls.n	8005112 <_free_r+0x42>
 800511c:	6811      	ldr	r1, [r2, #0]
 800511e:	1850      	adds	r0, r2, r1
 8005120:	42a0      	cmp	r0, r4
 8005122:	d10b      	bne.n	800513c <_free_r+0x6c>
 8005124:	6820      	ldr	r0, [r4, #0]
 8005126:	4401      	add	r1, r0
 8005128:	1850      	adds	r0, r2, r1
 800512a:	4283      	cmp	r3, r0
 800512c:	6011      	str	r1, [r2, #0]
 800512e:	d1e0      	bne.n	80050f2 <_free_r+0x22>
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4408      	add	r0, r1
 8005136:	6010      	str	r0, [r2, #0]
 8005138:	6053      	str	r3, [r2, #4]
 800513a:	e7da      	b.n	80050f2 <_free_r+0x22>
 800513c:	d902      	bls.n	8005144 <_free_r+0x74>
 800513e:	230c      	movs	r3, #12
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	e7d6      	b.n	80050f2 <_free_r+0x22>
 8005144:	6820      	ldr	r0, [r4, #0]
 8005146:	1821      	adds	r1, r4, r0
 8005148:	428b      	cmp	r3, r1
 800514a:	bf01      	itttt	eq
 800514c:	6819      	ldreq	r1, [r3, #0]
 800514e:	685b      	ldreq	r3, [r3, #4]
 8005150:	1809      	addeq	r1, r1, r0
 8005152:	6021      	streq	r1, [r4, #0]
 8005154:	6063      	str	r3, [r4, #4]
 8005156:	6054      	str	r4, [r2, #4]
 8005158:	e7cb      	b.n	80050f2 <_free_r+0x22>
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20000484 	.word	0x20000484

08005160 <malloc>:
 8005160:	4b02      	ldr	r3, [pc, #8]	@ (800516c <malloc+0xc>)
 8005162:	4601      	mov	r1, r0
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	f000 b825 	b.w	80051b4 <_malloc_r>
 800516a:	bf00      	nop
 800516c:	2000002c 	.word	0x2000002c

08005170 <sbrk_aligned>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	4e0f      	ldr	r6, [pc, #60]	@ (80051b0 <sbrk_aligned+0x40>)
 8005174:	460c      	mov	r4, r1
 8005176:	6831      	ldr	r1, [r6, #0]
 8005178:	4605      	mov	r5, r0
 800517a:	b911      	cbnz	r1, 8005182 <sbrk_aligned+0x12>
 800517c:	f000 fcce 	bl	8005b1c <_sbrk_r>
 8005180:	6030      	str	r0, [r6, #0]
 8005182:	4621      	mov	r1, r4
 8005184:	4628      	mov	r0, r5
 8005186:	f000 fcc9 	bl	8005b1c <_sbrk_r>
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	d103      	bne.n	8005196 <sbrk_aligned+0x26>
 800518e:	f04f 34ff 	mov.w	r4, #4294967295
 8005192:	4620      	mov	r0, r4
 8005194:	bd70      	pop	{r4, r5, r6, pc}
 8005196:	1cc4      	adds	r4, r0, #3
 8005198:	f024 0403 	bic.w	r4, r4, #3
 800519c:	42a0      	cmp	r0, r4
 800519e:	d0f8      	beq.n	8005192 <sbrk_aligned+0x22>
 80051a0:	1a21      	subs	r1, r4, r0
 80051a2:	4628      	mov	r0, r5
 80051a4:	f000 fcba 	bl	8005b1c <_sbrk_r>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d1f2      	bne.n	8005192 <sbrk_aligned+0x22>
 80051ac:	e7ef      	b.n	800518e <sbrk_aligned+0x1e>
 80051ae:	bf00      	nop
 80051b0:	20000480 	.word	0x20000480

080051b4 <_malloc_r>:
 80051b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051b8:	1ccd      	adds	r5, r1, #3
 80051ba:	f025 0503 	bic.w	r5, r5, #3
 80051be:	3508      	adds	r5, #8
 80051c0:	2d0c      	cmp	r5, #12
 80051c2:	bf38      	it	cc
 80051c4:	250c      	movcc	r5, #12
 80051c6:	2d00      	cmp	r5, #0
 80051c8:	4606      	mov	r6, r0
 80051ca:	db01      	blt.n	80051d0 <_malloc_r+0x1c>
 80051cc:	42a9      	cmp	r1, r5
 80051ce:	d904      	bls.n	80051da <_malloc_r+0x26>
 80051d0:	230c      	movs	r3, #12
 80051d2:	6033      	str	r3, [r6, #0]
 80051d4:	2000      	movs	r0, #0
 80051d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052b0 <_malloc_r+0xfc>
 80051de:	f000 f869 	bl	80052b4 <__malloc_lock>
 80051e2:	f8d8 3000 	ldr.w	r3, [r8]
 80051e6:	461c      	mov	r4, r3
 80051e8:	bb44      	cbnz	r4, 800523c <_malloc_r+0x88>
 80051ea:	4629      	mov	r1, r5
 80051ec:	4630      	mov	r0, r6
 80051ee:	f7ff ffbf 	bl	8005170 <sbrk_aligned>
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	4604      	mov	r4, r0
 80051f6:	d158      	bne.n	80052aa <_malloc_r+0xf6>
 80051f8:	f8d8 4000 	ldr.w	r4, [r8]
 80051fc:	4627      	mov	r7, r4
 80051fe:	2f00      	cmp	r7, #0
 8005200:	d143      	bne.n	800528a <_malloc_r+0xd6>
 8005202:	2c00      	cmp	r4, #0
 8005204:	d04b      	beq.n	800529e <_malloc_r+0xea>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	4639      	mov	r1, r7
 800520a:	4630      	mov	r0, r6
 800520c:	eb04 0903 	add.w	r9, r4, r3
 8005210:	f000 fc84 	bl	8005b1c <_sbrk_r>
 8005214:	4581      	cmp	r9, r0
 8005216:	d142      	bne.n	800529e <_malloc_r+0xea>
 8005218:	6821      	ldr	r1, [r4, #0]
 800521a:	4630      	mov	r0, r6
 800521c:	1a6d      	subs	r5, r5, r1
 800521e:	4629      	mov	r1, r5
 8005220:	f7ff ffa6 	bl	8005170 <sbrk_aligned>
 8005224:	3001      	adds	r0, #1
 8005226:	d03a      	beq.n	800529e <_malloc_r+0xea>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	442b      	add	r3, r5
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	f8d8 3000 	ldr.w	r3, [r8]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	bb62      	cbnz	r2, 8005290 <_malloc_r+0xdc>
 8005236:	f8c8 7000 	str.w	r7, [r8]
 800523a:	e00f      	b.n	800525c <_malloc_r+0xa8>
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	1b52      	subs	r2, r2, r5
 8005240:	d420      	bmi.n	8005284 <_malloc_r+0xd0>
 8005242:	2a0b      	cmp	r2, #11
 8005244:	d917      	bls.n	8005276 <_malloc_r+0xc2>
 8005246:	1961      	adds	r1, r4, r5
 8005248:	42a3      	cmp	r3, r4
 800524a:	6025      	str	r5, [r4, #0]
 800524c:	bf18      	it	ne
 800524e:	6059      	strne	r1, [r3, #4]
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	bf08      	it	eq
 8005254:	f8c8 1000 	streq.w	r1, [r8]
 8005258:	5162      	str	r2, [r4, r5]
 800525a:	604b      	str	r3, [r1, #4]
 800525c:	4630      	mov	r0, r6
 800525e:	f000 f82f 	bl	80052c0 <__malloc_unlock>
 8005262:	f104 000b 	add.w	r0, r4, #11
 8005266:	1d23      	adds	r3, r4, #4
 8005268:	f020 0007 	bic.w	r0, r0, #7
 800526c:	1ac2      	subs	r2, r0, r3
 800526e:	bf1c      	itt	ne
 8005270:	1a1b      	subne	r3, r3, r0
 8005272:	50a3      	strne	r3, [r4, r2]
 8005274:	e7af      	b.n	80051d6 <_malloc_r+0x22>
 8005276:	6862      	ldr	r2, [r4, #4]
 8005278:	42a3      	cmp	r3, r4
 800527a:	bf0c      	ite	eq
 800527c:	f8c8 2000 	streq.w	r2, [r8]
 8005280:	605a      	strne	r2, [r3, #4]
 8005282:	e7eb      	b.n	800525c <_malloc_r+0xa8>
 8005284:	4623      	mov	r3, r4
 8005286:	6864      	ldr	r4, [r4, #4]
 8005288:	e7ae      	b.n	80051e8 <_malloc_r+0x34>
 800528a:	463c      	mov	r4, r7
 800528c:	687f      	ldr	r7, [r7, #4]
 800528e:	e7b6      	b.n	80051fe <_malloc_r+0x4a>
 8005290:	461a      	mov	r2, r3
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	42a3      	cmp	r3, r4
 8005296:	d1fb      	bne.n	8005290 <_malloc_r+0xdc>
 8005298:	2300      	movs	r3, #0
 800529a:	6053      	str	r3, [r2, #4]
 800529c:	e7de      	b.n	800525c <_malloc_r+0xa8>
 800529e:	230c      	movs	r3, #12
 80052a0:	4630      	mov	r0, r6
 80052a2:	6033      	str	r3, [r6, #0]
 80052a4:	f000 f80c 	bl	80052c0 <__malloc_unlock>
 80052a8:	e794      	b.n	80051d4 <_malloc_r+0x20>
 80052aa:	6005      	str	r5, [r0, #0]
 80052ac:	e7d6      	b.n	800525c <_malloc_r+0xa8>
 80052ae:	bf00      	nop
 80052b0:	20000484 	.word	0x20000484

080052b4 <__malloc_lock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	@ (80052bc <__malloc_lock+0x8>)
 80052b6:	f7ff b8a8 	b.w	800440a <__retarget_lock_acquire_recursive>
 80052ba:	bf00      	nop
 80052bc:	2000047c 	.word	0x2000047c

080052c0 <__malloc_unlock>:
 80052c0:	4801      	ldr	r0, [pc, #4]	@ (80052c8 <__malloc_unlock+0x8>)
 80052c2:	f7ff b8a3 	b.w	800440c <__retarget_lock_release_recursive>
 80052c6:	bf00      	nop
 80052c8:	2000047c 	.word	0x2000047c

080052cc <_Balloc>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	69c6      	ldr	r6, [r0, #28]
 80052d0:	4604      	mov	r4, r0
 80052d2:	460d      	mov	r5, r1
 80052d4:	b976      	cbnz	r6, 80052f4 <_Balloc+0x28>
 80052d6:	2010      	movs	r0, #16
 80052d8:	f7ff ff42 	bl	8005160 <malloc>
 80052dc:	4602      	mov	r2, r0
 80052de:	61e0      	str	r0, [r4, #28]
 80052e0:	b920      	cbnz	r0, 80052ec <_Balloc+0x20>
 80052e2:	216b      	movs	r1, #107	@ 0x6b
 80052e4:	4b17      	ldr	r3, [pc, #92]	@ (8005344 <_Balloc+0x78>)
 80052e6:	4818      	ldr	r0, [pc, #96]	@ (8005348 <_Balloc+0x7c>)
 80052e8:	f000 fc36 	bl	8005b58 <__assert_func>
 80052ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052f0:	6006      	str	r6, [r0, #0]
 80052f2:	60c6      	str	r6, [r0, #12]
 80052f4:	69e6      	ldr	r6, [r4, #28]
 80052f6:	68f3      	ldr	r3, [r6, #12]
 80052f8:	b183      	cbz	r3, 800531c <_Balloc+0x50>
 80052fa:	69e3      	ldr	r3, [r4, #28]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005302:	b9b8      	cbnz	r0, 8005334 <_Balloc+0x68>
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f605 	lsl.w	r6, r1, r5
 800530a:	1d72      	adds	r2, r6, #5
 800530c:	4620      	mov	r0, r4
 800530e:	0092      	lsls	r2, r2, #2
 8005310:	f000 fc40 	bl	8005b94 <_calloc_r>
 8005314:	b160      	cbz	r0, 8005330 <_Balloc+0x64>
 8005316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800531a:	e00e      	b.n	800533a <_Balloc+0x6e>
 800531c:	2221      	movs	r2, #33	@ 0x21
 800531e:	2104      	movs	r1, #4
 8005320:	4620      	mov	r0, r4
 8005322:	f000 fc37 	bl	8005b94 <_calloc_r>
 8005326:	69e3      	ldr	r3, [r4, #28]
 8005328:	60f0      	str	r0, [r6, #12]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e4      	bne.n	80052fa <_Balloc+0x2e>
 8005330:	2000      	movs	r0, #0
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	6802      	ldr	r2, [r0, #0]
 8005336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800533a:	2300      	movs	r3, #0
 800533c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005340:	e7f7      	b.n	8005332 <_Balloc+0x66>
 8005342:	bf00      	nop
 8005344:	080061f7 	.word	0x080061f7
 8005348:	08006277 	.word	0x08006277

0800534c <_Bfree>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	69c6      	ldr	r6, [r0, #28]
 8005350:	4605      	mov	r5, r0
 8005352:	460c      	mov	r4, r1
 8005354:	b976      	cbnz	r6, 8005374 <_Bfree+0x28>
 8005356:	2010      	movs	r0, #16
 8005358:	f7ff ff02 	bl	8005160 <malloc>
 800535c:	4602      	mov	r2, r0
 800535e:	61e8      	str	r0, [r5, #28]
 8005360:	b920      	cbnz	r0, 800536c <_Bfree+0x20>
 8005362:	218f      	movs	r1, #143	@ 0x8f
 8005364:	4b08      	ldr	r3, [pc, #32]	@ (8005388 <_Bfree+0x3c>)
 8005366:	4809      	ldr	r0, [pc, #36]	@ (800538c <_Bfree+0x40>)
 8005368:	f000 fbf6 	bl	8005b58 <__assert_func>
 800536c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005370:	6006      	str	r6, [r0, #0]
 8005372:	60c6      	str	r6, [r0, #12]
 8005374:	b13c      	cbz	r4, 8005386 <_Bfree+0x3a>
 8005376:	69eb      	ldr	r3, [r5, #28]
 8005378:	6862      	ldr	r2, [r4, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005380:	6021      	str	r1, [r4, #0]
 8005382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	080061f7 	.word	0x080061f7
 800538c:	08006277 	.word	0x08006277

08005390 <__multadd>:
 8005390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005394:	4607      	mov	r7, r0
 8005396:	460c      	mov	r4, r1
 8005398:	461e      	mov	r6, r3
 800539a:	2000      	movs	r0, #0
 800539c:	690d      	ldr	r5, [r1, #16]
 800539e:	f101 0c14 	add.w	ip, r1, #20
 80053a2:	f8dc 3000 	ldr.w	r3, [ip]
 80053a6:	3001      	adds	r0, #1
 80053a8:	b299      	uxth	r1, r3
 80053aa:	fb02 6101 	mla	r1, r2, r1, r6
 80053ae:	0c1e      	lsrs	r6, r3, #16
 80053b0:	0c0b      	lsrs	r3, r1, #16
 80053b2:	fb02 3306 	mla	r3, r2, r6, r3
 80053b6:	b289      	uxth	r1, r1
 80053b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80053bc:	4285      	cmp	r5, r0
 80053be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80053c2:	f84c 1b04 	str.w	r1, [ip], #4
 80053c6:	dcec      	bgt.n	80053a2 <__multadd+0x12>
 80053c8:	b30e      	cbz	r6, 800540e <__multadd+0x7e>
 80053ca:	68a3      	ldr	r3, [r4, #8]
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	dc19      	bgt.n	8005404 <__multadd+0x74>
 80053d0:	6861      	ldr	r1, [r4, #4]
 80053d2:	4638      	mov	r0, r7
 80053d4:	3101      	adds	r1, #1
 80053d6:	f7ff ff79 	bl	80052cc <_Balloc>
 80053da:	4680      	mov	r8, r0
 80053dc:	b928      	cbnz	r0, 80053ea <__multadd+0x5a>
 80053de:	4602      	mov	r2, r0
 80053e0:	21ba      	movs	r1, #186	@ 0xba
 80053e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <__multadd+0x84>)
 80053e4:	480c      	ldr	r0, [pc, #48]	@ (8005418 <__multadd+0x88>)
 80053e6:	f000 fbb7 	bl	8005b58 <__assert_func>
 80053ea:	6922      	ldr	r2, [r4, #16]
 80053ec:	f104 010c 	add.w	r1, r4, #12
 80053f0:	3202      	adds	r2, #2
 80053f2:	0092      	lsls	r2, r2, #2
 80053f4:	300c      	adds	r0, #12
 80053f6:	f000 fba1 	bl	8005b3c <memcpy>
 80053fa:	4621      	mov	r1, r4
 80053fc:	4638      	mov	r0, r7
 80053fe:	f7ff ffa5 	bl	800534c <_Bfree>
 8005402:	4644      	mov	r4, r8
 8005404:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005408:	3501      	adds	r5, #1
 800540a:	615e      	str	r6, [r3, #20]
 800540c:	6125      	str	r5, [r4, #16]
 800540e:	4620      	mov	r0, r4
 8005410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005414:	08006266 	.word	0x08006266
 8005418:	08006277 	.word	0x08006277

0800541c <__hi0bits>:
 800541c:	4603      	mov	r3, r0
 800541e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005422:	bf3a      	itte	cc
 8005424:	0403      	lslcc	r3, r0, #16
 8005426:	2010      	movcc	r0, #16
 8005428:	2000      	movcs	r0, #0
 800542a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800542e:	bf3c      	itt	cc
 8005430:	021b      	lslcc	r3, r3, #8
 8005432:	3008      	addcc	r0, #8
 8005434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005438:	bf3c      	itt	cc
 800543a:	011b      	lslcc	r3, r3, #4
 800543c:	3004      	addcc	r0, #4
 800543e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005442:	bf3c      	itt	cc
 8005444:	009b      	lslcc	r3, r3, #2
 8005446:	3002      	addcc	r0, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	db05      	blt.n	8005458 <__hi0bits+0x3c>
 800544c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005450:	f100 0001 	add.w	r0, r0, #1
 8005454:	bf08      	it	eq
 8005456:	2020      	moveq	r0, #32
 8005458:	4770      	bx	lr

0800545a <__lo0bits>:
 800545a:	6803      	ldr	r3, [r0, #0]
 800545c:	4602      	mov	r2, r0
 800545e:	f013 0007 	ands.w	r0, r3, #7
 8005462:	d00b      	beq.n	800547c <__lo0bits+0x22>
 8005464:	07d9      	lsls	r1, r3, #31
 8005466:	d421      	bmi.n	80054ac <__lo0bits+0x52>
 8005468:	0798      	lsls	r0, r3, #30
 800546a:	bf49      	itett	mi
 800546c:	085b      	lsrmi	r3, r3, #1
 800546e:	089b      	lsrpl	r3, r3, #2
 8005470:	2001      	movmi	r0, #1
 8005472:	6013      	strmi	r3, [r2, #0]
 8005474:	bf5c      	itt	pl
 8005476:	2002      	movpl	r0, #2
 8005478:	6013      	strpl	r3, [r2, #0]
 800547a:	4770      	bx	lr
 800547c:	b299      	uxth	r1, r3
 800547e:	b909      	cbnz	r1, 8005484 <__lo0bits+0x2a>
 8005480:	2010      	movs	r0, #16
 8005482:	0c1b      	lsrs	r3, r3, #16
 8005484:	b2d9      	uxtb	r1, r3
 8005486:	b909      	cbnz	r1, 800548c <__lo0bits+0x32>
 8005488:	3008      	adds	r0, #8
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	0719      	lsls	r1, r3, #28
 800548e:	bf04      	itt	eq
 8005490:	091b      	lsreq	r3, r3, #4
 8005492:	3004      	addeq	r0, #4
 8005494:	0799      	lsls	r1, r3, #30
 8005496:	bf04      	itt	eq
 8005498:	089b      	lsreq	r3, r3, #2
 800549a:	3002      	addeq	r0, #2
 800549c:	07d9      	lsls	r1, r3, #31
 800549e:	d403      	bmi.n	80054a8 <__lo0bits+0x4e>
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	f100 0001 	add.w	r0, r0, #1
 80054a6:	d003      	beq.n	80054b0 <__lo0bits+0x56>
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	4770      	bx	lr
 80054ac:	2000      	movs	r0, #0
 80054ae:	4770      	bx	lr
 80054b0:	2020      	movs	r0, #32
 80054b2:	4770      	bx	lr

080054b4 <__i2b>:
 80054b4:	b510      	push	{r4, lr}
 80054b6:	460c      	mov	r4, r1
 80054b8:	2101      	movs	r1, #1
 80054ba:	f7ff ff07 	bl	80052cc <_Balloc>
 80054be:	4602      	mov	r2, r0
 80054c0:	b928      	cbnz	r0, 80054ce <__i2b+0x1a>
 80054c2:	f240 1145 	movw	r1, #325	@ 0x145
 80054c6:	4b04      	ldr	r3, [pc, #16]	@ (80054d8 <__i2b+0x24>)
 80054c8:	4804      	ldr	r0, [pc, #16]	@ (80054dc <__i2b+0x28>)
 80054ca:	f000 fb45 	bl	8005b58 <__assert_func>
 80054ce:	2301      	movs	r3, #1
 80054d0:	6144      	str	r4, [r0, #20]
 80054d2:	6103      	str	r3, [r0, #16]
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	bf00      	nop
 80054d8:	08006266 	.word	0x08006266
 80054dc:	08006277 	.word	0x08006277

080054e0 <__multiply>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	4614      	mov	r4, r2
 80054e6:	690a      	ldr	r2, [r1, #16]
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	460f      	mov	r7, r1
 80054ec:	429a      	cmp	r2, r3
 80054ee:	bfa2      	ittt	ge
 80054f0:	4623      	movge	r3, r4
 80054f2:	460c      	movge	r4, r1
 80054f4:	461f      	movge	r7, r3
 80054f6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80054fa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80054fe:	68a3      	ldr	r3, [r4, #8]
 8005500:	6861      	ldr	r1, [r4, #4]
 8005502:	eb0a 0609 	add.w	r6, sl, r9
 8005506:	42b3      	cmp	r3, r6
 8005508:	b085      	sub	sp, #20
 800550a:	bfb8      	it	lt
 800550c:	3101      	addlt	r1, #1
 800550e:	f7ff fedd 	bl	80052cc <_Balloc>
 8005512:	b930      	cbnz	r0, 8005522 <__multiply+0x42>
 8005514:	4602      	mov	r2, r0
 8005516:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800551a:	4b43      	ldr	r3, [pc, #268]	@ (8005628 <__multiply+0x148>)
 800551c:	4843      	ldr	r0, [pc, #268]	@ (800562c <__multiply+0x14c>)
 800551e:	f000 fb1b 	bl	8005b58 <__assert_func>
 8005522:	f100 0514 	add.w	r5, r0, #20
 8005526:	462b      	mov	r3, r5
 8005528:	2200      	movs	r2, #0
 800552a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800552e:	4543      	cmp	r3, r8
 8005530:	d321      	bcc.n	8005576 <__multiply+0x96>
 8005532:	f107 0114 	add.w	r1, r7, #20
 8005536:	f104 0214 	add.w	r2, r4, #20
 800553a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800553e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005542:	9302      	str	r3, [sp, #8]
 8005544:	1b13      	subs	r3, r2, r4
 8005546:	3b15      	subs	r3, #21
 8005548:	f023 0303 	bic.w	r3, r3, #3
 800554c:	3304      	adds	r3, #4
 800554e:	f104 0715 	add.w	r7, r4, #21
 8005552:	42ba      	cmp	r2, r7
 8005554:	bf38      	it	cc
 8005556:	2304      	movcc	r3, #4
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	9b02      	ldr	r3, [sp, #8]
 800555c:	9103      	str	r1, [sp, #12]
 800555e:	428b      	cmp	r3, r1
 8005560:	d80c      	bhi.n	800557c <__multiply+0x9c>
 8005562:	2e00      	cmp	r6, #0
 8005564:	dd03      	ble.n	800556e <__multiply+0x8e>
 8005566:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800556a:	2b00      	cmp	r3, #0
 800556c:	d05a      	beq.n	8005624 <__multiply+0x144>
 800556e:	6106      	str	r6, [r0, #16]
 8005570:	b005      	add	sp, #20
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	f843 2b04 	str.w	r2, [r3], #4
 800557a:	e7d8      	b.n	800552e <__multiply+0x4e>
 800557c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005580:	f1ba 0f00 	cmp.w	sl, #0
 8005584:	d023      	beq.n	80055ce <__multiply+0xee>
 8005586:	46a9      	mov	r9, r5
 8005588:	f04f 0c00 	mov.w	ip, #0
 800558c:	f104 0e14 	add.w	lr, r4, #20
 8005590:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005594:	f8d9 3000 	ldr.w	r3, [r9]
 8005598:	fa1f fb87 	uxth.w	fp, r7
 800559c:	b29b      	uxth	r3, r3
 800559e:	fb0a 330b 	mla	r3, sl, fp, r3
 80055a2:	4463      	add	r3, ip
 80055a4:	f8d9 c000 	ldr.w	ip, [r9]
 80055a8:	0c3f      	lsrs	r7, r7, #16
 80055aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80055ae:	fb0a c707 	mla	r7, sl, r7, ip
 80055b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80055bc:	4572      	cmp	r2, lr
 80055be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80055c2:	f849 3b04 	str.w	r3, [r9], #4
 80055c6:	d8e3      	bhi.n	8005590 <__multiply+0xb0>
 80055c8:	9b01      	ldr	r3, [sp, #4]
 80055ca:	f845 c003 	str.w	ip, [r5, r3]
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	3104      	adds	r1, #4
 80055d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80055d6:	f1b9 0f00 	cmp.w	r9, #0
 80055da:	d021      	beq.n	8005620 <__multiply+0x140>
 80055dc:	46ae      	mov	lr, r5
 80055de:	f04f 0a00 	mov.w	sl, #0
 80055e2:	682b      	ldr	r3, [r5, #0]
 80055e4:	f104 0c14 	add.w	ip, r4, #20
 80055e8:	f8bc b000 	ldrh.w	fp, [ip]
 80055ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	fb09 770b 	mla	r7, r9, fp, r7
 80055f6:	4457      	add	r7, sl
 80055f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80055fc:	f84e 3b04 	str.w	r3, [lr], #4
 8005600:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005604:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005608:	f8be 3000 	ldrh.w	r3, [lr]
 800560c:	4562      	cmp	r2, ip
 800560e:	fb09 330a 	mla	r3, r9, sl, r3
 8005612:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005616:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800561a:	d8e5      	bhi.n	80055e8 <__multiply+0x108>
 800561c:	9f01      	ldr	r7, [sp, #4]
 800561e:	51eb      	str	r3, [r5, r7]
 8005620:	3504      	adds	r5, #4
 8005622:	e79a      	b.n	800555a <__multiply+0x7a>
 8005624:	3e01      	subs	r6, #1
 8005626:	e79c      	b.n	8005562 <__multiply+0x82>
 8005628:	08006266 	.word	0x08006266
 800562c:	08006277 	.word	0x08006277

08005630 <__pow5mult>:
 8005630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005634:	4615      	mov	r5, r2
 8005636:	f012 0203 	ands.w	r2, r2, #3
 800563a:	4607      	mov	r7, r0
 800563c:	460e      	mov	r6, r1
 800563e:	d007      	beq.n	8005650 <__pow5mult+0x20>
 8005640:	4c25      	ldr	r4, [pc, #148]	@ (80056d8 <__pow5mult+0xa8>)
 8005642:	3a01      	subs	r2, #1
 8005644:	2300      	movs	r3, #0
 8005646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800564a:	f7ff fea1 	bl	8005390 <__multadd>
 800564e:	4606      	mov	r6, r0
 8005650:	10ad      	asrs	r5, r5, #2
 8005652:	d03d      	beq.n	80056d0 <__pow5mult+0xa0>
 8005654:	69fc      	ldr	r4, [r7, #28]
 8005656:	b97c      	cbnz	r4, 8005678 <__pow5mult+0x48>
 8005658:	2010      	movs	r0, #16
 800565a:	f7ff fd81 	bl	8005160 <malloc>
 800565e:	4602      	mov	r2, r0
 8005660:	61f8      	str	r0, [r7, #28]
 8005662:	b928      	cbnz	r0, 8005670 <__pow5mult+0x40>
 8005664:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005668:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <__pow5mult+0xac>)
 800566a:	481d      	ldr	r0, [pc, #116]	@ (80056e0 <__pow5mult+0xb0>)
 800566c:	f000 fa74 	bl	8005b58 <__assert_func>
 8005670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005674:	6004      	str	r4, [r0, #0]
 8005676:	60c4      	str	r4, [r0, #12]
 8005678:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800567c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005680:	b94c      	cbnz	r4, 8005696 <__pow5mult+0x66>
 8005682:	f240 2171 	movw	r1, #625	@ 0x271
 8005686:	4638      	mov	r0, r7
 8005688:	f7ff ff14 	bl	80054b4 <__i2b>
 800568c:	2300      	movs	r3, #0
 800568e:	4604      	mov	r4, r0
 8005690:	f8c8 0008 	str.w	r0, [r8, #8]
 8005694:	6003      	str	r3, [r0, #0]
 8005696:	f04f 0900 	mov.w	r9, #0
 800569a:	07eb      	lsls	r3, r5, #31
 800569c:	d50a      	bpl.n	80056b4 <__pow5mult+0x84>
 800569e:	4631      	mov	r1, r6
 80056a0:	4622      	mov	r2, r4
 80056a2:	4638      	mov	r0, r7
 80056a4:	f7ff ff1c 	bl	80054e0 <__multiply>
 80056a8:	4680      	mov	r8, r0
 80056aa:	4631      	mov	r1, r6
 80056ac:	4638      	mov	r0, r7
 80056ae:	f7ff fe4d 	bl	800534c <_Bfree>
 80056b2:	4646      	mov	r6, r8
 80056b4:	106d      	asrs	r5, r5, #1
 80056b6:	d00b      	beq.n	80056d0 <__pow5mult+0xa0>
 80056b8:	6820      	ldr	r0, [r4, #0]
 80056ba:	b938      	cbnz	r0, 80056cc <__pow5mult+0x9c>
 80056bc:	4622      	mov	r2, r4
 80056be:	4621      	mov	r1, r4
 80056c0:	4638      	mov	r0, r7
 80056c2:	f7ff ff0d 	bl	80054e0 <__multiply>
 80056c6:	6020      	str	r0, [r4, #0]
 80056c8:	f8c0 9000 	str.w	r9, [r0]
 80056cc:	4604      	mov	r4, r0
 80056ce:	e7e4      	b.n	800569a <__pow5mult+0x6a>
 80056d0:	4630      	mov	r0, r6
 80056d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d6:	bf00      	nop
 80056d8:	080062d0 	.word	0x080062d0
 80056dc:	080061f7 	.word	0x080061f7
 80056e0:	08006277 	.word	0x08006277

080056e4 <__lshift>:
 80056e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e8:	460c      	mov	r4, r1
 80056ea:	4607      	mov	r7, r0
 80056ec:	4691      	mov	r9, r2
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	6849      	ldr	r1, [r1, #4]
 80056f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056f6:	68a3      	ldr	r3, [r4, #8]
 80056f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056fc:	f108 0601 	add.w	r6, r8, #1
 8005700:	42b3      	cmp	r3, r6
 8005702:	db0b      	blt.n	800571c <__lshift+0x38>
 8005704:	4638      	mov	r0, r7
 8005706:	f7ff fde1 	bl	80052cc <_Balloc>
 800570a:	4605      	mov	r5, r0
 800570c:	b948      	cbnz	r0, 8005722 <__lshift+0x3e>
 800570e:	4602      	mov	r2, r0
 8005710:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005714:	4b27      	ldr	r3, [pc, #156]	@ (80057b4 <__lshift+0xd0>)
 8005716:	4828      	ldr	r0, [pc, #160]	@ (80057b8 <__lshift+0xd4>)
 8005718:	f000 fa1e 	bl	8005b58 <__assert_func>
 800571c:	3101      	adds	r1, #1
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	e7ee      	b.n	8005700 <__lshift+0x1c>
 8005722:	2300      	movs	r3, #0
 8005724:	f100 0114 	add.w	r1, r0, #20
 8005728:	f100 0210 	add.w	r2, r0, #16
 800572c:	4618      	mov	r0, r3
 800572e:	4553      	cmp	r3, sl
 8005730:	db33      	blt.n	800579a <__lshift+0xb6>
 8005732:	6920      	ldr	r0, [r4, #16]
 8005734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005738:	f104 0314 	add.w	r3, r4, #20
 800573c:	f019 091f 	ands.w	r9, r9, #31
 8005740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005748:	d02b      	beq.n	80057a2 <__lshift+0xbe>
 800574a:	468a      	mov	sl, r1
 800574c:	2200      	movs	r2, #0
 800574e:	f1c9 0e20 	rsb	lr, r9, #32
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	fa00 f009 	lsl.w	r0, r0, r9
 8005758:	4310      	orrs	r0, r2
 800575a:	f84a 0b04 	str.w	r0, [sl], #4
 800575e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005762:	459c      	cmp	ip, r3
 8005764:	fa22 f20e 	lsr.w	r2, r2, lr
 8005768:	d8f3      	bhi.n	8005752 <__lshift+0x6e>
 800576a:	ebac 0304 	sub.w	r3, ip, r4
 800576e:	3b15      	subs	r3, #21
 8005770:	f023 0303 	bic.w	r3, r3, #3
 8005774:	3304      	adds	r3, #4
 8005776:	f104 0015 	add.w	r0, r4, #21
 800577a:	4584      	cmp	ip, r0
 800577c:	bf38      	it	cc
 800577e:	2304      	movcc	r3, #4
 8005780:	50ca      	str	r2, [r1, r3]
 8005782:	b10a      	cbz	r2, 8005788 <__lshift+0xa4>
 8005784:	f108 0602 	add.w	r6, r8, #2
 8005788:	3e01      	subs	r6, #1
 800578a:	4638      	mov	r0, r7
 800578c:	4621      	mov	r1, r4
 800578e:	612e      	str	r6, [r5, #16]
 8005790:	f7ff fddc 	bl	800534c <_Bfree>
 8005794:	4628      	mov	r0, r5
 8005796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579a:	f842 0f04 	str.w	r0, [r2, #4]!
 800579e:	3301      	adds	r3, #1
 80057a0:	e7c5      	b.n	800572e <__lshift+0x4a>
 80057a2:	3904      	subs	r1, #4
 80057a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a8:	459c      	cmp	ip, r3
 80057aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80057ae:	d8f9      	bhi.n	80057a4 <__lshift+0xc0>
 80057b0:	e7ea      	b.n	8005788 <__lshift+0xa4>
 80057b2:	bf00      	nop
 80057b4:	08006266 	.word	0x08006266
 80057b8:	08006277 	.word	0x08006277

080057bc <__mcmp>:
 80057bc:	4603      	mov	r3, r0
 80057be:	690a      	ldr	r2, [r1, #16]
 80057c0:	6900      	ldr	r0, [r0, #16]
 80057c2:	b530      	push	{r4, r5, lr}
 80057c4:	1a80      	subs	r0, r0, r2
 80057c6:	d10e      	bne.n	80057e6 <__mcmp+0x2a>
 80057c8:	3314      	adds	r3, #20
 80057ca:	3114      	adds	r1, #20
 80057cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80057d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80057d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80057d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80057dc:	4295      	cmp	r5, r2
 80057de:	d003      	beq.n	80057e8 <__mcmp+0x2c>
 80057e0:	d205      	bcs.n	80057ee <__mcmp+0x32>
 80057e2:	f04f 30ff 	mov.w	r0, #4294967295
 80057e6:	bd30      	pop	{r4, r5, pc}
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d3f3      	bcc.n	80057d4 <__mcmp+0x18>
 80057ec:	e7fb      	b.n	80057e6 <__mcmp+0x2a>
 80057ee:	2001      	movs	r0, #1
 80057f0:	e7f9      	b.n	80057e6 <__mcmp+0x2a>
	...

080057f4 <__mdiff>:
 80057f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	4689      	mov	r9, r1
 80057fa:	4606      	mov	r6, r0
 80057fc:	4611      	mov	r1, r2
 80057fe:	4648      	mov	r0, r9
 8005800:	4614      	mov	r4, r2
 8005802:	f7ff ffdb 	bl	80057bc <__mcmp>
 8005806:	1e05      	subs	r5, r0, #0
 8005808:	d112      	bne.n	8005830 <__mdiff+0x3c>
 800580a:	4629      	mov	r1, r5
 800580c:	4630      	mov	r0, r6
 800580e:	f7ff fd5d 	bl	80052cc <_Balloc>
 8005812:	4602      	mov	r2, r0
 8005814:	b928      	cbnz	r0, 8005822 <__mdiff+0x2e>
 8005816:	f240 2137 	movw	r1, #567	@ 0x237
 800581a:	4b3e      	ldr	r3, [pc, #248]	@ (8005914 <__mdiff+0x120>)
 800581c:	483e      	ldr	r0, [pc, #248]	@ (8005918 <__mdiff+0x124>)
 800581e:	f000 f99b 	bl	8005b58 <__assert_func>
 8005822:	2301      	movs	r3, #1
 8005824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005828:	4610      	mov	r0, r2
 800582a:	b003      	add	sp, #12
 800582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005830:	bfbc      	itt	lt
 8005832:	464b      	movlt	r3, r9
 8005834:	46a1      	movlt	r9, r4
 8005836:	4630      	mov	r0, r6
 8005838:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800583c:	bfba      	itte	lt
 800583e:	461c      	movlt	r4, r3
 8005840:	2501      	movlt	r5, #1
 8005842:	2500      	movge	r5, #0
 8005844:	f7ff fd42 	bl	80052cc <_Balloc>
 8005848:	4602      	mov	r2, r0
 800584a:	b918      	cbnz	r0, 8005854 <__mdiff+0x60>
 800584c:	f240 2145 	movw	r1, #581	@ 0x245
 8005850:	4b30      	ldr	r3, [pc, #192]	@ (8005914 <__mdiff+0x120>)
 8005852:	e7e3      	b.n	800581c <__mdiff+0x28>
 8005854:	f100 0b14 	add.w	fp, r0, #20
 8005858:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800585c:	f109 0310 	add.w	r3, r9, #16
 8005860:	60c5      	str	r5, [r0, #12]
 8005862:	f04f 0c00 	mov.w	ip, #0
 8005866:	f109 0514 	add.w	r5, r9, #20
 800586a:	46d9      	mov	r9, fp
 800586c:	6926      	ldr	r6, [r4, #16]
 800586e:	f104 0e14 	add.w	lr, r4, #20
 8005872:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005876:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	9b01      	ldr	r3, [sp, #4]
 800587e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005882:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005886:	b281      	uxth	r1, r0
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	fa1f f38a 	uxth.w	r3, sl
 800588e:	1a5b      	subs	r3, r3, r1
 8005890:	0c00      	lsrs	r0, r0, #16
 8005892:	4463      	add	r3, ip
 8005894:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005898:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800589c:	b29b      	uxth	r3, r3
 800589e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80058a2:	4576      	cmp	r6, lr
 80058a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058a8:	f849 3b04 	str.w	r3, [r9], #4
 80058ac:	d8e6      	bhi.n	800587c <__mdiff+0x88>
 80058ae:	1b33      	subs	r3, r6, r4
 80058b0:	3b15      	subs	r3, #21
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	3415      	adds	r4, #21
 80058b8:	3304      	adds	r3, #4
 80058ba:	42a6      	cmp	r6, r4
 80058bc:	bf38      	it	cc
 80058be:	2304      	movcc	r3, #4
 80058c0:	441d      	add	r5, r3
 80058c2:	445b      	add	r3, fp
 80058c4:	461e      	mov	r6, r3
 80058c6:	462c      	mov	r4, r5
 80058c8:	4544      	cmp	r4, r8
 80058ca:	d30e      	bcc.n	80058ea <__mdiff+0xf6>
 80058cc:	f108 0103 	add.w	r1, r8, #3
 80058d0:	1b49      	subs	r1, r1, r5
 80058d2:	f021 0103 	bic.w	r1, r1, #3
 80058d6:	3d03      	subs	r5, #3
 80058d8:	45a8      	cmp	r8, r5
 80058da:	bf38      	it	cc
 80058dc:	2100      	movcc	r1, #0
 80058de:	440b      	add	r3, r1
 80058e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80058e4:	b199      	cbz	r1, 800590e <__mdiff+0x11a>
 80058e6:	6117      	str	r7, [r2, #16]
 80058e8:	e79e      	b.n	8005828 <__mdiff+0x34>
 80058ea:	46e6      	mov	lr, ip
 80058ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80058f0:	fa1f fc81 	uxth.w	ip, r1
 80058f4:	44f4      	add	ip, lr
 80058f6:	0c08      	lsrs	r0, r1, #16
 80058f8:	4471      	add	r1, lr
 80058fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80058fe:	b289      	uxth	r1, r1
 8005900:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005904:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005908:	f846 1b04 	str.w	r1, [r6], #4
 800590c:	e7dc      	b.n	80058c8 <__mdiff+0xd4>
 800590e:	3f01      	subs	r7, #1
 8005910:	e7e6      	b.n	80058e0 <__mdiff+0xec>
 8005912:	bf00      	nop
 8005914:	08006266 	.word	0x08006266
 8005918:	08006277 	.word	0x08006277

0800591c <__d2b>:
 800591c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005920:	2101      	movs	r1, #1
 8005922:	4690      	mov	r8, r2
 8005924:	4699      	mov	r9, r3
 8005926:	9e08      	ldr	r6, [sp, #32]
 8005928:	f7ff fcd0 	bl	80052cc <_Balloc>
 800592c:	4604      	mov	r4, r0
 800592e:	b930      	cbnz	r0, 800593e <__d2b+0x22>
 8005930:	4602      	mov	r2, r0
 8005932:	f240 310f 	movw	r1, #783	@ 0x30f
 8005936:	4b23      	ldr	r3, [pc, #140]	@ (80059c4 <__d2b+0xa8>)
 8005938:	4823      	ldr	r0, [pc, #140]	@ (80059c8 <__d2b+0xac>)
 800593a:	f000 f90d 	bl	8005b58 <__assert_func>
 800593e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005946:	b10d      	cbz	r5, 800594c <__d2b+0x30>
 8005948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	f1b8 0300 	subs.w	r3, r8, #0
 8005952:	d024      	beq.n	800599e <__d2b+0x82>
 8005954:	4668      	mov	r0, sp
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	f7ff fd7f 	bl	800545a <__lo0bits>
 800595c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005960:	b1d8      	cbz	r0, 800599a <__d2b+0x7e>
 8005962:	f1c0 0320 	rsb	r3, r0, #32
 8005966:	fa02 f303 	lsl.w	r3, r2, r3
 800596a:	430b      	orrs	r3, r1
 800596c:	40c2      	lsrs	r2, r0
 800596e:	6163      	str	r3, [r4, #20]
 8005970:	9201      	str	r2, [sp, #4]
 8005972:	9b01      	ldr	r3, [sp, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf0c      	ite	eq
 8005978:	2201      	moveq	r2, #1
 800597a:	2202      	movne	r2, #2
 800597c:	61a3      	str	r3, [r4, #24]
 800597e:	6122      	str	r2, [r4, #16]
 8005980:	b1ad      	cbz	r5, 80059ae <__d2b+0x92>
 8005982:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005986:	4405      	add	r5, r0
 8005988:	6035      	str	r5, [r6, #0]
 800598a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800598e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005990:	6018      	str	r0, [r3, #0]
 8005992:	4620      	mov	r0, r4
 8005994:	b002      	add	sp, #8
 8005996:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800599a:	6161      	str	r1, [r4, #20]
 800599c:	e7e9      	b.n	8005972 <__d2b+0x56>
 800599e:	a801      	add	r0, sp, #4
 80059a0:	f7ff fd5b 	bl	800545a <__lo0bits>
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	6163      	str	r3, [r4, #20]
 80059aa:	3020      	adds	r0, #32
 80059ac:	e7e7      	b.n	800597e <__d2b+0x62>
 80059ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80059b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80059b6:	6030      	str	r0, [r6, #0]
 80059b8:	6918      	ldr	r0, [r3, #16]
 80059ba:	f7ff fd2f 	bl	800541c <__hi0bits>
 80059be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80059c2:	e7e4      	b.n	800598e <__d2b+0x72>
 80059c4:	08006266 	.word	0x08006266
 80059c8:	08006277 	.word	0x08006277

080059cc <__sflush_r>:
 80059cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	0716      	lsls	r6, r2, #28
 80059d4:	4605      	mov	r5, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	d454      	bmi.n	8005a84 <__sflush_r+0xb8>
 80059da:	684b      	ldr	r3, [r1, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	dc02      	bgt.n	80059e6 <__sflush_r+0x1a>
 80059e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	dd48      	ble.n	8005a78 <__sflush_r+0xac>
 80059e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059e8:	2e00      	cmp	r6, #0
 80059ea:	d045      	beq.n	8005a78 <__sflush_r+0xac>
 80059ec:	2300      	movs	r3, #0
 80059ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059f2:	682f      	ldr	r7, [r5, #0]
 80059f4:	6a21      	ldr	r1, [r4, #32]
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	d030      	beq.n	8005a5c <__sflush_r+0x90>
 80059fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	0759      	lsls	r1, r3, #29
 8005a00:	d505      	bpl.n	8005a0e <__sflush_r+0x42>
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	1ad2      	subs	r2, r2, r3
 8005a06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a08:	b10b      	cbz	r3, 8005a0e <__sflush_r+0x42>
 8005a0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a0c:	1ad2      	subs	r2, r2, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4628      	mov	r0, r5
 8005a12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a14:	6a21      	ldr	r1, [r4, #32]
 8005a16:	47b0      	blx	r6
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	d106      	bne.n	8005a2c <__sflush_r+0x60>
 8005a1e:	6829      	ldr	r1, [r5, #0]
 8005a20:	291d      	cmp	r1, #29
 8005a22:	d82b      	bhi.n	8005a7c <__sflush_r+0xb0>
 8005a24:	4a28      	ldr	r2, [pc, #160]	@ (8005ac8 <__sflush_r+0xfc>)
 8005a26:	410a      	asrs	r2, r1
 8005a28:	07d6      	lsls	r6, r2, #31
 8005a2a:	d427      	bmi.n	8005a7c <__sflush_r+0xb0>
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	6062      	str	r2, [r4, #4]
 8005a30:	6922      	ldr	r2, [r4, #16]
 8005a32:	04d9      	lsls	r1, r3, #19
 8005a34:	6022      	str	r2, [r4, #0]
 8005a36:	d504      	bpl.n	8005a42 <__sflush_r+0x76>
 8005a38:	1c42      	adds	r2, r0, #1
 8005a3a:	d101      	bne.n	8005a40 <__sflush_r+0x74>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b903      	cbnz	r3, 8005a42 <__sflush_r+0x76>
 8005a40:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a44:	602f      	str	r7, [r5, #0]
 8005a46:	b1b9      	cbz	r1, 8005a78 <__sflush_r+0xac>
 8005a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a4c:	4299      	cmp	r1, r3
 8005a4e:	d002      	beq.n	8005a56 <__sflush_r+0x8a>
 8005a50:	4628      	mov	r0, r5
 8005a52:	f7ff fb3d 	bl	80050d0 <_free_r>
 8005a56:	2300      	movs	r3, #0
 8005a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a5a:	e00d      	b.n	8005a78 <__sflush_r+0xac>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b0      	blx	r6
 8005a62:	4602      	mov	r2, r0
 8005a64:	1c50      	adds	r0, r2, #1
 8005a66:	d1c9      	bne.n	80059fc <__sflush_r+0x30>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0c6      	beq.n	80059fc <__sflush_r+0x30>
 8005a6e:	2b1d      	cmp	r3, #29
 8005a70:	d001      	beq.n	8005a76 <__sflush_r+0xaa>
 8005a72:	2b16      	cmp	r3, #22
 8005a74:	d11d      	bne.n	8005ab2 <__sflush_r+0xe6>
 8005a76:	602f      	str	r7, [r5, #0]
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e021      	b.n	8005ac0 <__sflush_r+0xf4>
 8005a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	e01a      	b.n	8005aba <__sflush_r+0xee>
 8005a84:	690f      	ldr	r7, [r1, #16]
 8005a86:	2f00      	cmp	r7, #0
 8005a88:	d0f6      	beq.n	8005a78 <__sflush_r+0xac>
 8005a8a:	0793      	lsls	r3, r2, #30
 8005a8c:	bf18      	it	ne
 8005a8e:	2300      	movne	r3, #0
 8005a90:	680e      	ldr	r6, [r1, #0]
 8005a92:	bf08      	it	eq
 8005a94:	694b      	ldreq	r3, [r1, #20]
 8005a96:	1bf6      	subs	r6, r6, r7
 8005a98:	600f      	str	r7, [r1, #0]
 8005a9a:	608b      	str	r3, [r1, #8]
 8005a9c:	2e00      	cmp	r6, #0
 8005a9e:	ddeb      	ble.n	8005a78 <__sflush_r+0xac>
 8005aa0:	4633      	mov	r3, r6
 8005aa2:	463a      	mov	r2, r7
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	6a21      	ldr	r1, [r4, #32]
 8005aa8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005aac:	47e0      	blx	ip
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	dc07      	bgt.n	8005ac2 <__sflush_r+0xf6>
 8005ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aba:	f04f 30ff 	mov.w	r0, #4294967295
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac2:	4407      	add	r7, r0
 8005ac4:	1a36      	subs	r6, r6, r0
 8005ac6:	e7e9      	b.n	8005a9c <__sflush_r+0xd0>
 8005ac8:	dfbffffe 	.word	0xdfbffffe

08005acc <_fflush_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	690b      	ldr	r3, [r1, #16]
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b913      	cbnz	r3, 8005adc <_fflush_r+0x10>
 8005ad6:	2500      	movs	r5, #0
 8005ad8:	4628      	mov	r0, r5
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	b118      	cbz	r0, 8005ae6 <_fflush_r+0x1a>
 8005ade:	6a03      	ldr	r3, [r0, #32]
 8005ae0:	b90b      	cbnz	r3, 8005ae6 <_fflush_r+0x1a>
 8005ae2:	f7fe fb9b 	bl	800421c <__sinit>
 8005ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f3      	beq.n	8005ad6 <_fflush_r+0xa>
 8005aee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005af0:	07d0      	lsls	r0, r2, #31
 8005af2:	d404      	bmi.n	8005afe <_fflush_r+0x32>
 8005af4:	0599      	lsls	r1, r3, #22
 8005af6:	d402      	bmi.n	8005afe <_fflush_r+0x32>
 8005af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005afa:	f7fe fc86 	bl	800440a <__retarget_lock_acquire_recursive>
 8005afe:	4628      	mov	r0, r5
 8005b00:	4621      	mov	r1, r4
 8005b02:	f7ff ff63 	bl	80059cc <__sflush_r>
 8005b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b08:	4605      	mov	r5, r0
 8005b0a:	07da      	lsls	r2, r3, #31
 8005b0c:	d4e4      	bmi.n	8005ad8 <_fflush_r+0xc>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	059b      	lsls	r3, r3, #22
 8005b12:	d4e1      	bmi.n	8005ad8 <_fflush_r+0xc>
 8005b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b16:	f7fe fc79 	bl	800440c <__retarget_lock_release_recursive>
 8005b1a:	e7dd      	b.n	8005ad8 <_fflush_r+0xc>

08005b1c <_sbrk_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	2300      	movs	r3, #0
 8005b20:	4d05      	ldr	r5, [pc, #20]	@ (8005b38 <_sbrk_r+0x1c>)
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	602b      	str	r3, [r5, #0]
 8005b28:	f7fb fd2a 	bl	8001580 <_sbrk>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_sbrk_r+0x1a>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_sbrk_r+0x1a>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20000478 	.word	0x20000478

08005b3c <memcpy>:
 8005b3c:	440a      	add	r2, r1
 8005b3e:	4291      	cmp	r1, r2
 8005b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b44:	d100      	bne.n	8005b48 <memcpy+0xc>
 8005b46:	4770      	bx	lr
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4e:	4291      	cmp	r1, r2
 8005b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b54:	d1f9      	bne.n	8005b4a <memcpy+0xe>
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <__assert_func>:
 8005b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b5a:	4614      	mov	r4, r2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4b09      	ldr	r3, [pc, #36]	@ (8005b84 <__assert_func+0x2c>)
 8005b60:	4605      	mov	r5, r0
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68d8      	ldr	r0, [r3, #12]
 8005b66:	b954      	cbnz	r4, 8005b7e <__assert_func+0x26>
 8005b68:	4b07      	ldr	r3, [pc, #28]	@ (8005b88 <__assert_func+0x30>)
 8005b6a:	461c      	mov	r4, r3
 8005b6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b70:	9100      	str	r1, [sp, #0]
 8005b72:	462b      	mov	r3, r5
 8005b74:	4905      	ldr	r1, [pc, #20]	@ (8005b8c <__assert_func+0x34>)
 8005b76:	f000 f841 	bl	8005bfc <fiprintf>
 8005b7a:	f000 f851 	bl	8005c20 <abort>
 8005b7e:	4b04      	ldr	r3, [pc, #16]	@ (8005b90 <__assert_func+0x38>)
 8005b80:	e7f4      	b.n	8005b6c <__assert_func+0x14>
 8005b82:	bf00      	nop
 8005b84:	2000002c 	.word	0x2000002c
 8005b88:	08006415 	.word	0x08006415
 8005b8c:	080063e7 	.word	0x080063e7
 8005b90:	080063da 	.word	0x080063da

08005b94 <_calloc_r>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	fba1 5402 	umull	r5, r4, r1, r2
 8005b9a:	b93c      	cbnz	r4, 8005bac <_calloc_r+0x18>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	f7ff fb09 	bl	80051b4 <_malloc_r>
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <_calloc_r+0x1e>
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	4630      	mov	r0, r6
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	220c      	movs	r2, #12
 8005bae:	6002      	str	r2, [r0, #0]
 8005bb0:	e7f9      	b.n	8005ba6 <_calloc_r+0x12>
 8005bb2:	462a      	mov	r2, r5
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	f7fe fbaa 	bl	800430e <memset>
 8005bba:	e7f5      	b.n	8005ba8 <_calloc_r+0x14>

08005bbc <__ascii_mbtowc>:
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	b901      	cbnz	r1, 8005bc2 <__ascii_mbtowc+0x6>
 8005bc0:	a901      	add	r1, sp, #4
 8005bc2:	b142      	cbz	r2, 8005bd6 <__ascii_mbtowc+0x1a>
 8005bc4:	b14b      	cbz	r3, 8005bda <__ascii_mbtowc+0x1e>
 8005bc6:	7813      	ldrb	r3, [r2, #0]
 8005bc8:	600b      	str	r3, [r1, #0]
 8005bca:	7812      	ldrb	r2, [r2, #0]
 8005bcc:	1e10      	subs	r0, r2, #0
 8005bce:	bf18      	it	ne
 8005bd0:	2001      	movne	r0, #1
 8005bd2:	b002      	add	sp, #8
 8005bd4:	4770      	bx	lr
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	e7fb      	b.n	8005bd2 <__ascii_mbtowc+0x16>
 8005bda:	f06f 0001 	mvn.w	r0, #1
 8005bde:	e7f8      	b.n	8005bd2 <__ascii_mbtowc+0x16>

08005be0 <__ascii_wctomb>:
 8005be0:	4603      	mov	r3, r0
 8005be2:	4608      	mov	r0, r1
 8005be4:	b141      	cbz	r1, 8005bf8 <__ascii_wctomb+0x18>
 8005be6:	2aff      	cmp	r2, #255	@ 0xff
 8005be8:	d904      	bls.n	8005bf4 <__ascii_wctomb+0x14>
 8005bea:	228a      	movs	r2, #138	@ 0x8a
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	4770      	bx	lr
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	700a      	strb	r2, [r1, #0]
 8005bf8:	4770      	bx	lr
	...

08005bfc <fiprintf>:
 8005bfc:	b40e      	push	{r1, r2, r3}
 8005bfe:	b503      	push	{r0, r1, lr}
 8005c00:	4601      	mov	r1, r0
 8005c02:	ab03      	add	r3, sp, #12
 8005c04:	4805      	ldr	r0, [pc, #20]	@ (8005c1c <fiprintf+0x20>)
 8005c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c0a:	6800      	ldr	r0, [r0, #0]
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	f000 f835 	bl	8005c7c <_vfiprintf_r>
 8005c12:	b002      	add	sp, #8
 8005c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c18:	b003      	add	sp, #12
 8005c1a:	4770      	bx	lr
 8005c1c:	2000002c 	.word	0x2000002c

08005c20 <abort>:
 8005c20:	2006      	movs	r0, #6
 8005c22:	b508      	push	{r3, lr}
 8005c24:	f000 f9fe 	bl	8006024 <raise>
 8005c28:	2001      	movs	r0, #1
 8005c2a:	f7fb fc34 	bl	8001496 <_exit>

08005c2e <__sfputc_r>:
 8005c2e:	6893      	ldr	r3, [r2, #8]
 8005c30:	b410      	push	{r4}
 8005c32:	3b01      	subs	r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	6093      	str	r3, [r2, #8]
 8005c38:	da07      	bge.n	8005c4a <__sfputc_r+0x1c>
 8005c3a:	6994      	ldr	r4, [r2, #24]
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	db01      	blt.n	8005c44 <__sfputc_r+0x16>
 8005c40:	290a      	cmp	r1, #10
 8005c42:	d102      	bne.n	8005c4a <__sfputc_r+0x1c>
 8005c44:	bc10      	pop	{r4}
 8005c46:	f000 b931 	b.w	8005eac <__swbuf_r>
 8005c4a:	6813      	ldr	r3, [r2, #0]
 8005c4c:	1c58      	adds	r0, r3, #1
 8005c4e:	6010      	str	r0, [r2, #0]
 8005c50:	7019      	strb	r1, [r3, #0]
 8005c52:	4608      	mov	r0, r1
 8005c54:	bc10      	pop	{r4}
 8005c56:	4770      	bx	lr

08005c58 <__sfputs_r>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	460f      	mov	r7, r1
 8005c5e:	4614      	mov	r4, r2
 8005c60:	18d5      	adds	r5, r2, r3
 8005c62:	42ac      	cmp	r4, r5
 8005c64:	d101      	bne.n	8005c6a <__sfputs_r+0x12>
 8005c66:	2000      	movs	r0, #0
 8005c68:	e007      	b.n	8005c7a <__sfputs_r+0x22>
 8005c6a:	463a      	mov	r2, r7
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c72:	f7ff ffdc 	bl	8005c2e <__sfputc_r>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d1f3      	bne.n	8005c62 <__sfputs_r+0xa>
 8005c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c7c <_vfiprintf_r>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	460d      	mov	r5, r1
 8005c82:	4614      	mov	r4, r2
 8005c84:	4698      	mov	r8, r3
 8005c86:	4606      	mov	r6, r0
 8005c88:	b09d      	sub	sp, #116	@ 0x74
 8005c8a:	b118      	cbz	r0, 8005c94 <_vfiprintf_r+0x18>
 8005c8c:	6a03      	ldr	r3, [r0, #32]
 8005c8e:	b90b      	cbnz	r3, 8005c94 <_vfiprintf_r+0x18>
 8005c90:	f7fe fac4 	bl	800421c <__sinit>
 8005c94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c96:	07d9      	lsls	r1, r3, #31
 8005c98:	d405      	bmi.n	8005ca6 <_vfiprintf_r+0x2a>
 8005c9a:	89ab      	ldrh	r3, [r5, #12]
 8005c9c:	059a      	lsls	r2, r3, #22
 8005c9e:	d402      	bmi.n	8005ca6 <_vfiprintf_r+0x2a>
 8005ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ca2:	f7fe fbb2 	bl	800440a <__retarget_lock_acquire_recursive>
 8005ca6:	89ab      	ldrh	r3, [r5, #12]
 8005ca8:	071b      	lsls	r3, r3, #28
 8005caa:	d501      	bpl.n	8005cb0 <_vfiprintf_r+0x34>
 8005cac:	692b      	ldr	r3, [r5, #16]
 8005cae:	b99b      	cbnz	r3, 8005cd8 <_vfiprintf_r+0x5c>
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f000 f938 	bl	8005f28 <__swsetup_r>
 8005cb8:	b170      	cbz	r0, 8005cd8 <_vfiprintf_r+0x5c>
 8005cba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cbc:	07dc      	lsls	r4, r3, #31
 8005cbe:	d504      	bpl.n	8005cca <_vfiprintf_r+0x4e>
 8005cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc4:	b01d      	add	sp, #116	@ 0x74
 8005cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	0598      	lsls	r0, r3, #22
 8005cce:	d4f7      	bmi.n	8005cc0 <_vfiprintf_r+0x44>
 8005cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cd2:	f7fe fb9b 	bl	800440c <__retarget_lock_release_recursive>
 8005cd6:	e7f3      	b.n	8005cc0 <_vfiprintf_r+0x44>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ce2:	2330      	movs	r3, #48	@ 0x30
 8005ce4:	f04f 0901 	mov.w	r9, #1
 8005ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005e98 <_vfiprintf_r+0x21c>
 8005cf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cf4:	4623      	mov	r3, r4
 8005cf6:	469a      	mov	sl, r3
 8005cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cfc:	b10a      	cbz	r2, 8005d02 <_vfiprintf_r+0x86>
 8005cfe:	2a25      	cmp	r2, #37	@ 0x25
 8005d00:	d1f9      	bne.n	8005cf6 <_vfiprintf_r+0x7a>
 8005d02:	ebba 0b04 	subs.w	fp, sl, r4
 8005d06:	d00b      	beq.n	8005d20 <_vfiprintf_r+0xa4>
 8005d08:	465b      	mov	r3, fp
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f7ff ffa2 	bl	8005c58 <__sfputs_r>
 8005d14:	3001      	adds	r0, #1
 8005d16:	f000 80a7 	beq.w	8005e68 <_vfiprintf_r+0x1ec>
 8005d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d1c:	445a      	add	r2, fp
 8005d1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d20:	f89a 3000 	ldrb.w	r3, [sl]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 809f 	beq.w	8005e68 <_vfiprintf_r+0x1ec>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d34:	f10a 0a01 	add.w	sl, sl, #1
 8005d38:	9304      	str	r3, [sp, #16]
 8005d3a:	9307      	str	r3, [sp, #28]
 8005d3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d40:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d42:	4654      	mov	r4, sl
 8005d44:	2205      	movs	r2, #5
 8005d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4a:	4853      	ldr	r0, [pc, #332]	@ (8005e98 <_vfiprintf_r+0x21c>)
 8005d4c:	f7fe fb5f 	bl	800440e <memchr>
 8005d50:	9a04      	ldr	r2, [sp, #16]
 8005d52:	b9d8      	cbnz	r0, 8005d8c <_vfiprintf_r+0x110>
 8005d54:	06d1      	lsls	r1, r2, #27
 8005d56:	bf44      	itt	mi
 8005d58:	2320      	movmi	r3, #32
 8005d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d5e:	0713      	lsls	r3, r2, #28
 8005d60:	bf44      	itt	mi
 8005d62:	232b      	movmi	r3, #43	@ 0x2b
 8005d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d68:	f89a 3000 	ldrb.w	r3, [sl]
 8005d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d6e:	d015      	beq.n	8005d9c <_vfiprintf_r+0x120>
 8005d70:	4654      	mov	r4, sl
 8005d72:	2000      	movs	r0, #0
 8005d74:	f04f 0c0a 	mov.w	ip, #10
 8005d78:	9a07      	ldr	r2, [sp, #28]
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d80:	3b30      	subs	r3, #48	@ 0x30
 8005d82:	2b09      	cmp	r3, #9
 8005d84:	d94b      	bls.n	8005e1e <_vfiprintf_r+0x1a2>
 8005d86:	b1b0      	cbz	r0, 8005db6 <_vfiprintf_r+0x13a>
 8005d88:	9207      	str	r2, [sp, #28]
 8005d8a:	e014      	b.n	8005db6 <_vfiprintf_r+0x13a>
 8005d8c:	eba0 0308 	sub.w	r3, r0, r8
 8005d90:	fa09 f303 	lsl.w	r3, r9, r3
 8005d94:	4313      	orrs	r3, r2
 8005d96:	46a2      	mov	sl, r4
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	e7d2      	b.n	8005d42 <_vfiprintf_r+0xc6>
 8005d9c:	9b03      	ldr	r3, [sp, #12]
 8005d9e:	1d19      	adds	r1, r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	9103      	str	r1, [sp, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bfbb      	ittet	lt
 8005da8:	425b      	neglt	r3, r3
 8005daa:	f042 0202 	orrlt.w	r2, r2, #2
 8005dae:	9307      	strge	r3, [sp, #28]
 8005db0:	9307      	strlt	r3, [sp, #28]
 8005db2:	bfb8      	it	lt
 8005db4:	9204      	strlt	r2, [sp, #16]
 8005db6:	7823      	ldrb	r3, [r4, #0]
 8005db8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dba:	d10a      	bne.n	8005dd2 <_vfiprintf_r+0x156>
 8005dbc:	7863      	ldrb	r3, [r4, #1]
 8005dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dc0:	d132      	bne.n	8005e28 <_vfiprintf_r+0x1ac>
 8005dc2:	9b03      	ldr	r3, [sp, #12]
 8005dc4:	3402      	adds	r4, #2
 8005dc6:	1d1a      	adds	r2, r3, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	9203      	str	r2, [sp, #12]
 8005dcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dd0:	9305      	str	r3, [sp, #20]
 8005dd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005e9c <_vfiprintf_r+0x220>
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	4650      	mov	r0, sl
 8005dda:	7821      	ldrb	r1, [r4, #0]
 8005ddc:	f7fe fb17 	bl	800440e <memchr>
 8005de0:	b138      	cbz	r0, 8005df2 <_vfiprintf_r+0x176>
 8005de2:	2240      	movs	r2, #64	@ 0x40
 8005de4:	9b04      	ldr	r3, [sp, #16]
 8005de6:	eba0 000a 	sub.w	r0, r0, sl
 8005dea:	4082      	lsls	r2, r0
 8005dec:	4313      	orrs	r3, r2
 8005dee:	3401      	adds	r4, #1
 8005df0:	9304      	str	r3, [sp, #16]
 8005df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df6:	2206      	movs	r2, #6
 8005df8:	4829      	ldr	r0, [pc, #164]	@ (8005ea0 <_vfiprintf_r+0x224>)
 8005dfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dfe:	f7fe fb06 	bl	800440e <memchr>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d03f      	beq.n	8005e86 <_vfiprintf_r+0x20a>
 8005e06:	4b27      	ldr	r3, [pc, #156]	@ (8005ea4 <_vfiprintf_r+0x228>)
 8005e08:	bb1b      	cbnz	r3, 8005e52 <_vfiprintf_r+0x1d6>
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	3307      	adds	r3, #7
 8005e0e:	f023 0307 	bic.w	r3, r3, #7
 8005e12:	3308      	adds	r3, #8
 8005e14:	9303      	str	r3, [sp, #12]
 8005e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e18:	443b      	add	r3, r7
 8005e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e1c:	e76a      	b.n	8005cf4 <_vfiprintf_r+0x78>
 8005e1e:	460c      	mov	r4, r1
 8005e20:	2001      	movs	r0, #1
 8005e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e26:	e7a8      	b.n	8005d7a <_vfiprintf_r+0xfe>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f04f 0c0a 	mov.w	ip, #10
 8005e2e:	4619      	mov	r1, r3
 8005e30:	3401      	adds	r4, #1
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	4620      	mov	r0, r4
 8005e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e3a:	3a30      	subs	r2, #48	@ 0x30
 8005e3c:	2a09      	cmp	r2, #9
 8005e3e:	d903      	bls.n	8005e48 <_vfiprintf_r+0x1cc>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0c6      	beq.n	8005dd2 <_vfiprintf_r+0x156>
 8005e44:	9105      	str	r1, [sp, #20]
 8005e46:	e7c4      	b.n	8005dd2 <_vfiprintf_r+0x156>
 8005e48:	4604      	mov	r4, r0
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e50:	e7f0      	b.n	8005e34 <_vfiprintf_r+0x1b8>
 8005e52:	ab03      	add	r3, sp, #12
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	462a      	mov	r2, r5
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4b13      	ldr	r3, [pc, #76]	@ (8005ea8 <_vfiprintf_r+0x22c>)
 8005e5c:	a904      	add	r1, sp, #16
 8005e5e:	f7fd fd93 	bl	8003988 <_printf_float>
 8005e62:	4607      	mov	r7, r0
 8005e64:	1c78      	adds	r0, r7, #1
 8005e66:	d1d6      	bne.n	8005e16 <_vfiprintf_r+0x19a>
 8005e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e6a:	07d9      	lsls	r1, r3, #31
 8005e6c:	d405      	bmi.n	8005e7a <_vfiprintf_r+0x1fe>
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	059a      	lsls	r2, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_vfiprintf_r+0x1fe>
 8005e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e76:	f7fe fac9 	bl	800440c <__retarget_lock_release_recursive>
 8005e7a:	89ab      	ldrh	r3, [r5, #12]
 8005e7c:	065b      	lsls	r3, r3, #25
 8005e7e:	f53f af1f 	bmi.w	8005cc0 <_vfiprintf_r+0x44>
 8005e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e84:	e71e      	b.n	8005cc4 <_vfiprintf_r+0x48>
 8005e86:	ab03      	add	r3, sp, #12
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	462a      	mov	r2, r5
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ea8 <_vfiprintf_r+0x22c>)
 8005e90:	a904      	add	r1, sp, #16
 8005e92:	f7fe f817 	bl	8003ec4 <_printf_i>
 8005e96:	e7e4      	b.n	8005e62 <_vfiprintf_r+0x1e6>
 8005e98:	08006517 	.word	0x08006517
 8005e9c:	0800651d 	.word	0x0800651d
 8005ea0:	08006521 	.word	0x08006521
 8005ea4:	08003989 	.word	0x08003989
 8005ea8:	08005c59 	.word	0x08005c59

08005eac <__swbuf_r>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	460e      	mov	r6, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	b118      	cbz	r0, 8005ebe <__swbuf_r+0x12>
 8005eb6:	6a03      	ldr	r3, [r0, #32]
 8005eb8:	b90b      	cbnz	r3, 8005ebe <__swbuf_r+0x12>
 8005eba:	f7fe f9af 	bl	800421c <__sinit>
 8005ebe:	69a3      	ldr	r3, [r4, #24]
 8005ec0:	60a3      	str	r3, [r4, #8]
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	071a      	lsls	r2, r3, #28
 8005ec6:	d501      	bpl.n	8005ecc <__swbuf_r+0x20>
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	b943      	cbnz	r3, 8005ede <__swbuf_r+0x32>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f82a 	bl	8005f28 <__swsetup_r>
 8005ed4:	b118      	cbz	r0, 8005ede <__swbuf_r+0x32>
 8005ed6:	f04f 37ff 	mov.w	r7, #4294967295
 8005eda:	4638      	mov	r0, r7
 8005edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	6922      	ldr	r2, [r4, #16]
 8005ee2:	b2f6      	uxtb	r6, r6
 8005ee4:	1a98      	subs	r0, r3, r2
 8005ee6:	6963      	ldr	r3, [r4, #20]
 8005ee8:	4637      	mov	r7, r6
 8005eea:	4283      	cmp	r3, r0
 8005eec:	dc05      	bgt.n	8005efa <__swbuf_r+0x4e>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f7ff fdeb 	bl	8005acc <_fflush_r>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d1ed      	bne.n	8005ed6 <__swbuf_r+0x2a>
 8005efa:	68a3      	ldr	r3, [r4, #8]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	60a3      	str	r3, [r4, #8]
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	6022      	str	r2, [r4, #0]
 8005f06:	701e      	strb	r6, [r3, #0]
 8005f08:	6962      	ldr	r2, [r4, #20]
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d004      	beq.n	8005f1a <__swbuf_r+0x6e>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	07db      	lsls	r3, r3, #31
 8005f14:	d5e1      	bpl.n	8005eda <__swbuf_r+0x2e>
 8005f16:	2e0a      	cmp	r6, #10
 8005f18:	d1df      	bne.n	8005eda <__swbuf_r+0x2e>
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f7ff fdd5 	bl	8005acc <_fflush_r>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d0d9      	beq.n	8005eda <__swbuf_r+0x2e>
 8005f26:	e7d6      	b.n	8005ed6 <__swbuf_r+0x2a>

08005f28 <__swsetup_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4b29      	ldr	r3, [pc, #164]	@ (8005fd0 <__swsetup_r+0xa8>)
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	460c      	mov	r4, r1
 8005f32:	b118      	cbz	r0, 8005f3c <__swsetup_r+0x14>
 8005f34:	6a03      	ldr	r3, [r0, #32]
 8005f36:	b90b      	cbnz	r3, 8005f3c <__swsetup_r+0x14>
 8005f38:	f7fe f970 	bl	800421c <__sinit>
 8005f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f40:	0719      	lsls	r1, r3, #28
 8005f42:	d422      	bmi.n	8005f8a <__swsetup_r+0x62>
 8005f44:	06da      	lsls	r2, r3, #27
 8005f46:	d407      	bmi.n	8005f58 <__swsetup_r+0x30>
 8005f48:	2209      	movs	r2, #9
 8005f4a:	602a      	str	r2, [r5, #0]
 8005f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	e033      	b.n	8005fc0 <__swsetup_r+0x98>
 8005f58:	0758      	lsls	r0, r3, #29
 8005f5a:	d512      	bpl.n	8005f82 <__swsetup_r+0x5a>
 8005f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f5e:	b141      	cbz	r1, 8005f72 <__swsetup_r+0x4a>
 8005f60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f64:	4299      	cmp	r1, r3
 8005f66:	d002      	beq.n	8005f6e <__swsetup_r+0x46>
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f7ff f8b1 	bl	80050d0 <_free_r>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6063      	str	r3, [r4, #4]
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f043 0308 	orr.w	r3, r3, #8
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	b94b      	cbnz	r3, 8005fa2 <__swsetup_r+0x7a>
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f98:	d003      	beq.n	8005fa2 <__swsetup_r+0x7a>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	f000 f882 	bl	80060a6 <__smakebuf_r>
 8005fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fa6:	f013 0201 	ands.w	r2, r3, #1
 8005faa:	d00a      	beq.n	8005fc2 <__swsetup_r+0x9a>
 8005fac:	2200      	movs	r2, #0
 8005fae:	60a2      	str	r2, [r4, #8]
 8005fb0:	6962      	ldr	r2, [r4, #20]
 8005fb2:	4252      	negs	r2, r2
 8005fb4:	61a2      	str	r2, [r4, #24]
 8005fb6:	6922      	ldr	r2, [r4, #16]
 8005fb8:	b942      	cbnz	r2, 8005fcc <__swsetup_r+0xa4>
 8005fba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fbe:	d1c5      	bne.n	8005f4c <__swsetup_r+0x24>
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
 8005fc2:	0799      	lsls	r1, r3, #30
 8005fc4:	bf58      	it	pl
 8005fc6:	6962      	ldrpl	r2, [r4, #20]
 8005fc8:	60a2      	str	r2, [r4, #8]
 8005fca:	e7f4      	b.n	8005fb6 <__swsetup_r+0x8e>
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e7f7      	b.n	8005fc0 <__swsetup_r+0x98>
 8005fd0:	2000002c 	.word	0x2000002c

08005fd4 <_raise_r>:
 8005fd4:	291f      	cmp	r1, #31
 8005fd6:	b538      	push	{r3, r4, r5, lr}
 8005fd8:	4605      	mov	r5, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	d904      	bls.n	8005fe8 <_raise_r+0x14>
 8005fde:	2316      	movs	r3, #22
 8005fe0:	6003      	str	r3, [r0, #0]
 8005fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005fea:	b112      	cbz	r2, 8005ff2 <_raise_r+0x1e>
 8005fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ff0:	b94b      	cbnz	r3, 8006006 <_raise_r+0x32>
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 f830 	bl	8006058 <_getpid_r>
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006002:	f000 b817 	b.w	8006034 <_kill_r>
 8006006:	2b01      	cmp	r3, #1
 8006008:	d00a      	beq.n	8006020 <_raise_r+0x4c>
 800600a:	1c59      	adds	r1, r3, #1
 800600c:	d103      	bne.n	8006016 <_raise_r+0x42>
 800600e:	2316      	movs	r3, #22
 8006010:	6003      	str	r3, [r0, #0]
 8006012:	2001      	movs	r0, #1
 8006014:	e7e7      	b.n	8005fe6 <_raise_r+0x12>
 8006016:	2100      	movs	r1, #0
 8006018:	4620      	mov	r0, r4
 800601a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800601e:	4798      	blx	r3
 8006020:	2000      	movs	r0, #0
 8006022:	e7e0      	b.n	8005fe6 <_raise_r+0x12>

08006024 <raise>:
 8006024:	4b02      	ldr	r3, [pc, #8]	@ (8006030 <raise+0xc>)
 8006026:	4601      	mov	r1, r0
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f7ff bfd3 	b.w	8005fd4 <_raise_r>
 800602e:	bf00      	nop
 8006030:	2000002c 	.word	0x2000002c

08006034 <_kill_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	2300      	movs	r3, #0
 8006038:	4d06      	ldr	r5, [pc, #24]	@ (8006054 <_kill_r+0x20>)
 800603a:	4604      	mov	r4, r0
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	f7fb fa18 	bl	8001476 <_kill>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d102      	bne.n	8006050 <_kill_r+0x1c>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	b103      	cbz	r3, 8006050 <_kill_r+0x1c>
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	bd38      	pop	{r3, r4, r5, pc}
 8006052:	bf00      	nop
 8006054:	20000478 	.word	0x20000478

08006058 <_getpid_r>:
 8006058:	f7fb ba06 	b.w	8001468 <_getpid>

0800605c <__swhatbuf_r>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	460c      	mov	r4, r1
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	4615      	mov	r5, r2
 8006066:	2900      	cmp	r1, #0
 8006068:	461e      	mov	r6, r3
 800606a:	b096      	sub	sp, #88	@ 0x58
 800606c:	da0c      	bge.n	8006088 <__swhatbuf_r+0x2c>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	2100      	movs	r1, #0
 8006072:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006076:	bf14      	ite	ne
 8006078:	2340      	movne	r3, #64	@ 0x40
 800607a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800607e:	2000      	movs	r0, #0
 8006080:	6031      	str	r1, [r6, #0]
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	b016      	add	sp, #88	@ 0x58
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	466a      	mov	r2, sp
 800608a:	f000 f849 	bl	8006120 <_fstat_r>
 800608e:	2800      	cmp	r0, #0
 8006090:	dbed      	blt.n	800606e <__swhatbuf_r+0x12>
 8006092:	9901      	ldr	r1, [sp, #4]
 8006094:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006098:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800609c:	4259      	negs	r1, r3
 800609e:	4159      	adcs	r1, r3
 80060a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060a4:	e7eb      	b.n	800607e <__swhatbuf_r+0x22>

080060a6 <__smakebuf_r>:
 80060a6:	898b      	ldrh	r3, [r1, #12]
 80060a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060aa:	079d      	lsls	r5, r3, #30
 80060ac:	4606      	mov	r6, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	d507      	bpl.n	80060c2 <__smakebuf_r+0x1c>
 80060b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	2301      	movs	r3, #1
 80060bc:	6163      	str	r3, [r4, #20]
 80060be:	b003      	add	sp, #12
 80060c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060c2:	466a      	mov	r2, sp
 80060c4:	ab01      	add	r3, sp, #4
 80060c6:	f7ff ffc9 	bl	800605c <__swhatbuf_r>
 80060ca:	9f00      	ldr	r7, [sp, #0]
 80060cc:	4605      	mov	r5, r0
 80060ce:	4639      	mov	r1, r7
 80060d0:	4630      	mov	r0, r6
 80060d2:	f7ff f86f 	bl	80051b4 <_malloc_r>
 80060d6:	b948      	cbnz	r0, 80060ec <__smakebuf_r+0x46>
 80060d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060dc:	059a      	lsls	r2, r3, #22
 80060de:	d4ee      	bmi.n	80060be <__smakebuf_r+0x18>
 80060e0:	f023 0303 	bic.w	r3, r3, #3
 80060e4:	f043 0302 	orr.w	r3, r3, #2
 80060e8:	81a3      	strh	r3, [r4, #12]
 80060ea:	e7e2      	b.n	80060b2 <__smakebuf_r+0xc>
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80060f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	9b01      	ldr	r3, [sp, #4]
 80060fa:	6020      	str	r0, [r4, #0]
 80060fc:	b15b      	cbz	r3, 8006116 <__smakebuf_r+0x70>
 80060fe:	4630      	mov	r0, r6
 8006100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006104:	f000 f81e 	bl	8006144 <_isatty_r>
 8006108:	b128      	cbz	r0, 8006116 <__smakebuf_r+0x70>
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f023 0303 	bic.w	r3, r3, #3
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	431d      	orrs	r5, r3
 800611a:	81a5      	strh	r5, [r4, #12]
 800611c:	e7cf      	b.n	80060be <__smakebuf_r+0x18>
	...

08006120 <_fstat_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	2300      	movs	r3, #0
 8006124:	4d06      	ldr	r5, [pc, #24]	@ (8006140 <_fstat_r+0x20>)
 8006126:	4604      	mov	r4, r0
 8006128:	4608      	mov	r0, r1
 800612a:	4611      	mov	r1, r2
 800612c:	602b      	str	r3, [r5, #0]
 800612e:	f7fb fa01 	bl	8001534 <_fstat>
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	d102      	bne.n	800613c <_fstat_r+0x1c>
 8006136:	682b      	ldr	r3, [r5, #0]
 8006138:	b103      	cbz	r3, 800613c <_fstat_r+0x1c>
 800613a:	6023      	str	r3, [r4, #0]
 800613c:	bd38      	pop	{r3, r4, r5, pc}
 800613e:	bf00      	nop
 8006140:	20000478 	.word	0x20000478

08006144 <_isatty_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	2300      	movs	r3, #0
 8006148:	4d05      	ldr	r5, [pc, #20]	@ (8006160 <_isatty_r+0x1c>)
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	f7fb f9ff 	bl	8001552 <_isatty>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_isatty_r+0x1a>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_isatty_r+0x1a>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	20000478 	.word	0x20000478

08006164 <_init>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr

08006170 <_fini>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr
